<?xml version='1.0' encoding='ISO-8859-1' standalone='yes' ?>
<tagfile>
  <compound kind="page">
    <name>index</name>
    <title>MiXiM API Reference</title>
    <filename>index</filename>
  </compound>
  <compound kind="file">
    <name>winsupport.cc</name>
    <path>D:/Projects/MiXiM/extsrc/mixim/src/base/utils/</path>
    <filename>a00317</filename>
    <includes id="a00318" name="winsupport.h" local="yes" imported="no">winsupport.h</includes>
  </compound>
  <compound kind="file">
    <name>winsupport.h</name>
    <path>D:/Projects/MiXiM/extsrc/mixim/src/base/utils/</path>
    <filename>a00318</filename>
  </compound>
  <compound kind="page">
    <name>mobancpp</name>
    <title>MoBAN C++ reference</title>
    <filename>a00001</filename>
  </compound>
  <compound kind="group">
    <name>applLayer</name>
    <title>applLayer - application layer modules</title>
    <filename>a00506.html</filename>
    <class kind="class">BaseApplLayer</class>
    <class kind="class">TestApplLayer</class>
    <class kind="class">NetwControlInfo</class>
    <class kind="class">BurstApplLayer</class>
    <class kind="class">BurstApplLayerBattery</class>
    <class kind="class">SensorApplLayer</class>
  </compound>
  <compound kind="group">
    <name>netwLayer</name>
    <title>netwLayer - network layer modules</title>
    <filename>a00507.html</filename>
    <class kind="class">AddressingInterface</class>
    <class kind="class">ArpInterface</class>
    <class kind="class">BaseArp</class>
    <class kind="class">BaseNetwLayer</class>
    <class kind="class">MacToNetwControlInfo</class>
    <class kind="class">NetwControlInfo</class>
    <class kind="class">NetwToMacControlInfo</class>
    <class kind="class">AdaptiveProbabilisticBroadcast</class>
    <class kind="class">ArpHost</class>
    <class kind="class">DummyRoute</class>
    <class kind="class">Flood</class>
    <class kind="class">ProbabilisticBroadcast</class>
    <class kind="class">WiseRoute</class>
  </compound>
  <compound kind="group">
    <name>nic</name>
    <title>nic - network interfaces</title>
    <filename>a00508.html</filename>
    <subgroup>macLayer</subgroup>
    <subgroup>phyLayer</subgroup>
  </compound>
  <compound kind="group">
    <name>macLayer</name>
    <title>macLayer - MAC layer modules</title>
    <filename>a00509.html</filename>
    <class kind="class">BaseMacLayer</class>
    <class kind="class">MacToPhyControlInfo</class>
    <class kind="class">MacToPhyInterface</class>
    <class kind="class">PhyToMacControlInfo</class>
    <class kind="class">MacToNetwControlInfo</class>
    <class kind="class">NetwToMacControlInfo</class>
    <class kind="class">AlohaMacLayer</class>
    <class kind="class">CSMA802154</class>
    <class kind="class">LMacLayer</class>
    <class kind="class">Mac80211</class>
    <class kind="class">UWBIRMac</class>
    <class kind="class">MacToUWBIRPhyControlInfo</class>
    <class kind="class">BMacLayer</class>
    <class kind="class">csma</class>
    <class kind="class">CSMAMacLayer</class>
  </compound>
  <compound kind="group">
    <name>phyLayer</name>
    <title>phyLayer - physical layer modules</title>
    <filename>a00510.html</filename>
    <class kind="class">ConnectionManagerAccess</class>
    <class kind="class">BasePhyLayer</class>
    <class kind="class">ChannelInfo</class>
    <class kind="class">MacToPhyControlInfo</class>
    <class kind="class">MacToPhyInterface</class>
    <class kind="class">PhyToMacControlInfo</class>
    <class kind="class">RadioStateAnalogueModel</class>
    <class kind="class">MiximRadio</class>
    <class kind="class">RSAMConstMappingIterator</class>
    <class kind="class">RSAMMapping</class>
    <class kind="class">Signal</class>
    <class kind="class">MacToUWBIRPhyControlInfo</class>
    <class kind="class">PhyLayer</class>
    <class kind="class">PhyLayerBattery</class>
    <class kind="class">PhyLayerUWBIR</class>
    <class kind="class">RadioUWBIR</class>
    <class kind="class">SamplePhyLayer</class>
    <subgroup>analogueModels</subgroup>
    <subgroup>decider</subgroup>
  </compound>
  <compound kind="group">
    <name>analogueModels</name>
    <title>analogueModels - AnalogueModel implementations</title>
    <filename>a00511.html</filename>
    <class kind="class">AnalogueModel</class>
    <class kind="class">BreakpointPathlossModel</class>
    <class kind="class">IntensityModel</class>
    <class kind="class">JakesFadingMapping</class>
    <class kind="class">JakesFading</class>
    <class kind="class">LogNormalShadowing</class>
    <class kind="class">PERModel</class>
    <class kind="class">SimplePathlossConstMapping</class>
    <class kind="class">SimplePathlossModel</class>
    <class kind="class">UWBIRIEEE802154APathlossModel</class>
    <class kind="class">UWBIRStochasticPathlossModel</class>
    <class kind="class">RandomFreqTimeModel</class>
    <class kind="class">RandomFrequencyOnlyModel</class>
  </compound>
  <compound kind="group">
    <name>decider</name>
    <title>decider - decider modules</title>
    <filename>a00512.html</filename>
    <class kind="class">BaseDecider</class>
    <class kind="class">ChannelState</class>
    <class kind="class">DeciderResult</class>
    <class kind="class">Decider</class>
    <class kind="class">DeciderToPhyInterface</class>
    <class kind="class">Decider80211</class>
    <class kind="class">Decider80211Battery</class>
    <class kind="class">Decider802154Narrow</class>
    <class kind="class">DeciderResult80211</class>
    <class kind="class">DeciderResult802154Narrow</class>
    <class kind="class">DeciderResultUWBIR</class>
    <class kind="class">DeciderUWBIRED</class>
    <class kind="class">DeciderUWBIREDSync</class>
    <class kind="class">DeciderUWBIREDSyncOnAddress</class>
    <class kind="class">SNRThresholdDecider</class>
  </compound>
  <compound kind="group">
    <name>mobility</name>
    <title>mobility - modules handling the mobility of the hosts</title>
    <filename>a00513.html</filename>
    <class kind="class">IMobility</class>
    <class kind="class">ANSimMobility</class>
    <class kind="class">BonnMotionFileCache</class>
    <class kind="class">BonnMotionMobility</class>
    <class kind="class">CircleMobility</class>
    <class kind="class">ConstSpeedMobility</class>
    <class kind="class">LinearMobility</class>
    <class kind="class">LinearNodeDistributionMobility</class>
    <class kind="class">LineSegmentsMobilityBase</class>
    <class kind="class">MassMobility</class>
    <class kind="class">MoBANCoordinator</class>
    <class kind="class">MoBANLocal</class>
    <class kind="class">MobilityBase</class>
    <class kind="class">MovingMobilityBase</class>
    <class kind="class">Posture</class>
    <class kind="class">PostureTransition</class>
    <class kind="class">RectangleMobility</class>
    <class kind="class">StaticGridMobility</class>
    <class kind="class">StationaryMobility</class>
    <class kind="class">TractorMobility</class>
    <class kind="class">TurtleMobility</class>
  </compound>
  <compound kind="group">
    <name>utils</name>
    <title>utils  -  utility classes</title>
    <filename>a00514.html</filename>
    <class kind="class">FindModule</class>
    <class kind="class">NetwControlInfo</class>
    <class kind="class">Coord</class>
    <class kind="class">FWMath</class>
    <class kind="class">DroppedPacket</class>
    <class kind="class">Packet</class>
    <class kind="class">ProbBcastNetwControlInfo</class>
    <class kind="class">SimTracer</class>
  </compound>
  <compound kind="group">
    <name>base</name>
    <title>base - base MiXiM modules</title>
    <filename>a00515.html</filename>
    <subgroup>baseModules</subgroup>
    <subgroup>connectionManager</subgroup>
    <subgroup>baseUtils</subgroup>
  </compound>
  <compound kind="group">
    <name>baseModules</name>
    <title>baseModules - base module classes of MiXiM</title>
    <filename>a00516.html</filename>
    <class kind="class">ConnectionManagerAccess</class>
    <class kind="class">AddressingInterface</class>
    <class kind="class">ArpInterface</class>
    <class kind="class">BaseApplLayer</class>
    <class kind="class">BaseArp</class>
    <class kind="class">DrawAmount</class>
    <class kind="class">BaseBattery</class>
    <class kind="class">BaseLayer</class>
    <class kind="class">BaseMacLayer</class>
    <class kind="class">BaseModule</class>
    <class kind="class">BaseNetwLayer</class>
    <class kind="class">BaseWorldUtility</class>
    <class kind="class">MiximBatteryAccess</class>
    <class kind="class">BaseDecider</class>
    <class kind="class">BasePhyLayer</class>
  </compound>
  <compound kind="group">
    <name>connectionManager</name>
    <title>connectionManager - channel and connection related classes</title>
    <filename>a00517.html</filename>
    <class kind="class">BaseConnectionManager</class>
    <class kind="class">ConnectionManager</class>
    <class kind="class">ConnectionManagerAccess</class>
    <class kind="class">NicEntry</class>
    <class kind="class">NicEntryDebug</class>
    <class kind="class">NicEntryDirect</class>
  </compound>
  <compound kind="group">
    <name>baseUtils</name>
    <title>baseUtils - utilities for base MiXiM</title>
    <filename>a00518.html</filename>
    <class kind="class">FindModule</class>
    <class kind="class">MacToNetwControlInfo</class>
    <class kind="class">NetwControlInfo</class>
    <class kind="class">NetwToMacControlInfo</class>
  </compound>
  <compound kind="group">
    <name>mapping</name>
    <title>mapping - classes representing mathematical mappings</title>
    <filename>a00519.html</filename>
    <class kind="class">Dimension</class>
    <class kind="class">DimensionSet</class>
    <class kind="class">Argument</class>
    <class kind="class">NoNextIteratorException</class>
    <class kind="class">ConstMappingIterator</class>
    <class kind="class">ConstMapping</class>
    <class kind="class">MappingIterator</class>
    <class kind="class">Mapping</class>
    <class kind="class">SimpleConstMappingIterator</class>
    <class kind="class">SimpleConstMapping</class>
    <class kind="class">TimeMappingIterator</class>
    <class kind="class">TimeMapping</class>
    <class kind="class">ConstantSimpleConstMapping</class>
    <class kind="class">MultiDimMappingIterator</class>
    <class kind="class">MultiDimMapping</class>
    <class kind="class">MappingUtils</class>
    <class kind="class">JakesFadingMapping</class>
    <class kind="class">SimplePathlossConstMapping</class>
    <class kind="class">SimpleTimeConstMapping</class>
    <subgroup>mappingDetails</subgroup>
  </compound>
  <compound kind="group">
    <name>mappingDetails</name>
    <title>mappingDetails - mostly internal mapping classes</title>
    <filename>a00520.html</filename>
    <class kind="class">Interpolated</class>
    <class kind="class">PairLess</class>
    <class kind="class">NextSmaller</class>
    <class kind="class">Nearest</class>
    <class kind="class">Linear</class>
    <class kind="class">ConstInterpolateableIterator</class>
    <class kind="class">InterpolateableIterator</class>
    <class kind="class">InterpolateableMap</class>
    <class kind="class">BaseFilteredIterator</class>
    <class kind="class">FilteredMappingIterator</class>
    <class kind="class">LinearIntplMappingIterator</class>
    <class kind="class">LinearIntplMapping</class>
    <class kind="class">Interpolated&lt; Mapping * &gt;</class>
    <class kind="class">Linear&lt; std::map&lt; Argument::mapped_type, Mapping * &gt; &gt;</class>
    <class kind="class">ConstMappingIteratorWrapper</class>
    <class kind="class">ConstMappingWrapper</class>
    <class kind="class">FilledUpMappingIterator</class>
    <class kind="class">FilledUpMapping</class>
    <class kind="class">ConcatConstMappingIterator</class>
    <class kind="class">ConcatConstMapping</class>
    <class kind="class">BaseDelayedIterator</class>
    <class kind="class">BaseDelayedMapping</class>
    <class kind="class">ConstDelayedMapping</class>
    <class kind="class">DelayedMapping</class>
    <member kind="typedef">
      <type>BaseFilteredIterator&lt; ConstMappingIterator &gt;</type>
      <name>FilteredConstMappingIterator</name>
      <anchorfile>a00520.html</anchorfile>
      <anchor>gaa645dfa599e41183c494290d0abba30f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BaseDelayedIterator&lt; FilteredConstMappingIterator, ConstMappingIterator &gt;</type>
      <name>ConstDelayedMappingIterator</name>
      <anchorfile>a00520.html</anchorfile>
      <anchor>ga65c3da57807297c8c20a24d18e142051</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BaseDelayedIterator&lt; FilteredMappingIterator, MappingIterator &gt;</type>
      <name>DelayedMappingIterator</name>
      <anchorfile>a00520.html</anchorfile>
      <anchor>gaf6d7bb3c43fe0bda97133e548ce327c2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>protocols</name>
    <title>protocols - Classes for the different protocols implemented in MiXiM</title>
    <filename>a00521.html</filename>
    <subgroup>ieee80211</subgroup>
    <subgroup>ieee802154</subgroup>
    <subgroup>ieee802154a</subgroup>
    <subgroup>csma</subgroup>
  </compound>
  <compound kind="group">
    <name>ieee80211</name>
    <title>IEEE 802.11 - Classes for the IEEE 802.11 implementation of MiXiM</title>
    <filename>a00522.html</filename>
    <class kind="class">Mac80211</class>
    <class kind="class">Decider80211</class>
    <class kind="class">Decider80211Battery</class>
    <class kind="class">DeciderResult80211</class>
  </compound>
  <compound kind="group">
    <name>ieee802154</name>
    <title>IEEE 802.15.4 - Classes for the IEEE 802.15.4 implementation of MiXiM</title>
    <filename>a00523.html</filename>
    <class kind="class">CSMA802154</class>
    <class kind="class">Decider802154Narrow</class>
    <class kind="class">DeciderResult802154Narrow</class>
    <subgroup>exampleIEEE802154Narrow</subgroup>
  </compound>
  <compound kind="group">
    <name>ieee802154a</name>
    <title>IEEE 802.15.4A - Classes that implement the IEEE 802.15.4A UWB PHY.</title>
    <filename>a00524.html</filename>
    <class kind="class">UWBIRIEEE802154APathlossModel</class>
    <class kind="class">UWBIRStochasticPathlossModel</class>
    <class kind="class">AlohaMacLayer</class>
    <class kind="class">UWBIRMac</class>
    <class kind="class">DeciderResultUWBIR</class>
    <class kind="class">DeciderUWBIRED</class>
    <class kind="class">DeciderUWBIREDSync</class>
    <class kind="class">DeciderUWBIREDSyncOnAddress</class>
    <class kind="class">MacToUWBIRPhyControlInfo</class>
    <class kind="class">PhyLayerUWBIR</class>
    <class kind="class">RadioUWBIR</class>
    <class kind="class">IEEE802154A</class>
  </compound>
  <compound kind="group">
    <name>csma</name>
    <title>CSMA - Classes for the CSMA implementation of MiXiM</title>
    <filename>a00525.html</filename>
    <class kind="class">CSMA802154</class>
    <class kind="class">csma</class>
    <class kind="class">CSMAMacLayer</class>
    <subgroup>exampleCSMA</subgroup>
  </compound>
  <compound kind="group">
    <name>examples</name>
    <title>examples - Classes for the examples of MiXiM</title>
    <filename>a00526.html</filename>
    <subgroup>exampleAM</subgroup>
    <subgroup>exampleCSMA</subgroup>
    <subgroup>exampleIEEE802154Narrow</subgroup>
  </compound>
  <compound kind="group">
    <name>exampleAM</name>
    <title>AnalogueModels example - Classes from the AnalogueModels example</title>
    <filename>a00527.html</filename>
    <class kind="class">RandomFreqTimeModel</class>
    <class kind="class">RandomFrequencyOnlyModel</class>
    <class kind="class">SamplePhyLayer</class>
    <class kind="class">SimpleMacLayer</class>
    <class kind="class">ThresholdDecider</class>
  </compound>
  <compound kind="group">
    <name>exampleCSMA</name>
    <title>CSMAMac example - Classes from the CSMAMac example</title>
    <filename>a00528.html</filename>
    <class kind="class">SimpleNetwLayer</class>
  </compound>
  <compound kind="group">
    <name>exampleIEEE802154Narrow</name>
    <title>IEEE 802.15.4 Narrow band example - Classes from the ieee802154Narrow example</title>
    <filename>a00529.html</filename>
    <class kind="class">NetworkStackTrafficGen</class>
    <class kind="class">WorldUtilityStats</class>
  </compound>
  <compound kind="group">
    <name>power</name>
    <title>Power consumption - Classes using/defining power consumption</title>
    <filename>a00530.html</filename>
    <class kind="class">DrawAmount</class>
    <class kind="class">BaseBattery</class>
    <class kind="class">MiximBatteryAccess</class>
    <class kind="class">HostState</class>
    <class kind="class">Decider80211Battery</class>
    <class kind="class">PhyLayerBattery</class>
    <class kind="class">PhyLayerUWBIR</class>
    <class kind="class">BatteryState</class>
    <class kind="class">BatteryStats</class>
    <class kind="class">DeviceEntry</class>
    <class kind="class">SimpleBattery</class>
  </compound>
  <compound kind="class">
    <name>AccessModuleWrap</name>
    <filename>a00002.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>wrapType</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a6526ebf12a047ec5a36bd316106289b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>get</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>ade1e704006c8d3ef72182aba45c2757c</anchor>
      <arglist>(cModule *const from=NULL)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>AccessModuleWrap</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a9bf8ece6802a197230f4409770f5badb</anchor>
      <arglist>(const AccessModuleWrap&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>AccessModuleWrap&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a3c1a92bece36b793df6bdb3a44e35023</anchor>
      <arglist>(const AccessModuleWrap&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T *</type>
      <name>pModule</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a385653cd58a20af54c6938f5c66d9a40</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AdaptiveProbabilisticBroadcast</name>
    <filename>a00003.html</filename>
    <base>ProbabilisticBroadcast</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>ad3541d0be9b308c1b72633d25300afdb</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; LAddress::L3Type, cMessage * &gt;</type>
      <name>NeighborMap</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>ac812417316f250f21403ac68bb51a14c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerMsg</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a2d8f30c81020c4b349a20fbfa4802f96</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>af335f5b22cd11f9644a689974b693d83</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateNeighMap</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a5050ae81c2431d300c466cdd9f6d64ba</anchor>
      <arglist>(ProbabilisticBroadcastPkt *m)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateBeta</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a64e92130f274ebb5ddaedd1725758a14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>timeInNeighboursTable</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>af1ea69483d848c4c9619244e92ef5d11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>bvec</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>ab044e9a8c8e811cf98570600ea4ac787</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NeighborMap</type>
      <name>neighMap</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>ab6362dba6e830e1b85acfc05ba797d0c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AddressingInterface</name>
    <filename>a00004.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual LAddress::L2Type</type>
      <name>myMacAddr</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>a7d81614e8dea6e3a7316184e6b9e959c</anchor>
      <arglist>(const cModule *mac) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual LAddress::L3Type</type>
      <name>myNetwAddr</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>a3f4172beef51056ebc815246b6c9d651</anchor>
      <arglist>(const cModule *netw) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Aggregation</name>
    <filename>a00005.html</filename>
    <base>BaseLayer</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>acf3b1cfc2915c422e5a10e7993884b9b</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>a23a9449e9da9c20870401f6447ab6be2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>a8842b174cfe5d24701929f92c4141317</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUpperMsg</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>a9723e5a17551e41ae8a7de5078f6ac7f</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerMsg</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>ab3b44d15baaa9f4df289db09b80d4e52</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerControl</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>a353bd188f3fe9b10669693535c418c0e</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUpperControl</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>ac14f64c8962a1ffc3e5bb08f31ece68a</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::pair&lt; simtime_t, std::list&lt; ApplPkt * &gt; &gt;</type>
      <name>destInfo</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>a9dfe7efa90d418375b00a0a2e17b5102</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>Aggregation</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>a3934c88320964519d54854c553581f1b</anchor>
      <arglist>(const Aggregation &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Aggregation &amp;</type>
      <name>operator=</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>a907fe3f56ccfe0ea5b5602828299f1c4</anchor>
      <arglist>(const Aggregation &amp;)</arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual bool</type>
      <name>isOkToSendNow</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>a02d91d701bc60eb40188c5f9fae78aaf</anchor>
      <arglist>(const LAddress::L3Type &amp;dest)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>sendAggregatedPacketNow</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>a91d8c260d470399ac97a388f9ab2c47c</anchor>
      <arglist>(const LAddress::L3Type &amp;dest)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; LAddress::L3Type, destInfo &gt;</type>
      <name>destInfos</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>ab98b40b8c660cbdecfd8f2f95c220540</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>cMessage *</type>
      <name>aggregationTimer</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>ae648f73f274251b488a7e46d3845f932</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>simtime_t</type>
      <name>interPacketDelay</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>a0abe9f87f1f0ca50edae0ff34c7e4963</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>nbMaxPacketsPerAggregation</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>aef3536282aa4bb5ab096cadce567c5c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long</type>
      <name>nbAggrPktSentDown</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>af832b5c9509f380afe2307ccb51deb22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long</type>
      <name>nbAggrPktReceived</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>a6b133c36db4e8186c94d9396730a1c01</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AggrPkt</name>
    <filename>a00006.html</filename>
    <member kind="function">
      <type></type>
      <name>AggrPkt</name>
      <anchorfile>a00006.html</anchorfile>
      <anchor>a5521e2627b7ff0b84ef091f767330eb0</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AggrPkt</name>
      <anchorfile>a00006.html</anchorfile>
      <anchor>a26b3b2338071cbdefa3c3bf4406bb7c7</anchor>
      <arglist>(const AggrPkt &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>AggrPkt &amp;</type>
      <name>operator=</name>
      <anchorfile>a00006.html</anchorfile>
      <anchor>ab204ec3243e37e07534f099bfcb0ebbd</anchor>
      <arglist>(const AggrPkt &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AggrPkt *</type>
      <name>dup</name>
      <anchorfile>a00006.html</anchorfile>
      <anchor>adcf7da1a7f0f101bdd1503aa87891341</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStoredPacketsArraySize</name>
      <anchorfile>a00006.html</anchorfile>
      <anchor>a88d883e4a4de1b9173a6f64a8823e0cd</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getStoredPacketsArraySize</name>
      <anchorfile>a00006.html</anchorfile>
      <anchor>ae297a7eda404aee610aa61985373e08b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual pApplPkt &amp;</type>
      <name>getStoredPackets</name>
      <anchorfile>a00006.html</anchorfile>
      <anchor>a0b0cfc025025aa28e7829507c9d76a3b</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStoredPackets</name>
      <anchorfile>a00006.html</anchorfile>
      <anchor>af09fb10442b267feed12616ffd4a48c7</anchor>
      <arglist>(unsigned int k, const pApplPkt &amp;storedPackets_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>storePacket</name>
      <anchorfile>a00006.html</anchorfile>
      <anchor>a0a14eecfbd272e1117b1d649a897128e</anchor>
      <arglist>(pApplPkt &amp;storedPackets_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isEmpty</name>
      <anchorfile>a00006.html</anchorfile>
      <anchor>a2dedbe4f93fde722ed870bccd5df6c43</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual pApplPkt &amp;</type>
      <name>popFrontPacket</name>
      <anchorfile>a00006.html</anchorfile>
      <anchor>a2eff26a8e958529a6a25f1d33a88bae9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; pApplPkt &gt;</type>
      <name>storedPackets</name>
      <anchorfile>a00006.html</anchorfile>
      <anchor>aa7c6c5ae7cb4d245893214d6e7fdf22d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AlohaMacLayer</name>
    <filename>a00008.html</filename>
    <base>UWBIRMac</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>abab6939a0c82122391528d386df97c2c</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a4c822fb23aeaf77651ce1278a9d12d4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>minBE</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>abcd74293a66cf3f4914abf131bba65b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>maxBE</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a1490b7aa9b05b1d0aed3ca802dccea22</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual macpkt_ptr_t</type>
      <name>encapsMsg</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a52988f430b2def656fdb4b1f6dc15395</anchor>
      <arglist>(cPacket *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerMsg</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a585dd6a0b5c3c6a33e1f760ccd8ac29e</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>AlohaMacLayer</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a6c77857ba89b8cb3af1e1182c6873b2b</anchor>
      <arglist>(const AlohaMacLayer &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>AlohaMacLayer &amp;</type>
      <name>operator=</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>ac00dc76f2fb840fe1e4bca8c7340bd2e</anchor>
      <arglist>(const AlohaMacLayer &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AnalogueModel</name>
    <filename>a00009.html</filename>
    <member kind="typedef">
      <type>std::map&lt; std::string, cMsgPar &gt;</type>
      <name>ParameterMap</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>ab1820eb5285a02a2464be54ec651feab</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MiximAirFrame *</type>
      <name>airframe_ptr_t</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>abb2c10fa4e04867e9998284d6e636250</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>initFromMap</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>a9c52493cdf1baa4110a83869e8bc13c5</anchor>
      <arglist>(const ParameterMap &amp;)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>filterSignal</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>a3242bc36a68dab53551d4ab1f1dab010</anchor>
      <arglist>(airframe_ptr_t frame, const Coord &amp;sendersPos, const Coord &amp;receiverPos)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ANSimMobility</name>
    <filename>a00010.html</filename>
    <base>LineSegmentsMobilityBase</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a6ac23c2be4355fc0b5fb60f5f59d5270</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initializePosition</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a2df0372df98db599461667b500a0b292</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setTargetPosition</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a297696a4c49833d685f3a79775079663</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>move</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>ac6f3a0cb6a8f7b0c09d1e9cc01e06c22</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual cXMLElement *</type>
      <name>findNextPositionChange</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a9125fa0472aeee2ad8874d220bb8758e</anchor>
      <arglist>(cXMLElement *positionChange)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>extractDataFrom</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a39577e65116b0ec8f05c118710b5445b</anchor>
      <arglist>(cXMLElement *node)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>nodeId</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>ae840aa686318c0ddafb17ac1e52c6021</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cXMLElement *</type>
      <name>nextPositionChange</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a6ba5424c2f29db1141ff3cb8a36b5f21</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Argument</name>
    <filename>a00013.html</filename>
    <class kind="class">Argument::key_iterator</class>
    <member kind="typedef">
      <type>DimensionSet::value_type</type>
      <name>key_type</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>ac1eb4e3eff9e8f84ef4dc0c91127eba1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>mapped_type</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a3dd501f2b9169432270402847347950a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>mapped_type</type>
      <name>mapped_type_cref</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a92bb9c0642c2a4bb6bebde5c280065a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>container_type::iterator</type>
      <name>iterator</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a62ef6fa40b8600df45f05d0e36e6d296</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>container_type::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a521abc97d737e8c77742dcc9f4b21022</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Argument</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>aa0332822be81f516faa499d00474c834</anchor>
      <arglist>(simtime_t_cref timeVal=SIMTIME_ZERO)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Argument</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a4de14fe94af77f9d568cf74313dfbcd1</anchor>
      <arglist>(const DimensionSet &amp;dims, simtime_t_cref timeVal=SIMTIME_ZERO)</arglist>
    </member>
    <member kind="function">
      <type>simtime_t_cref</type>
      <name>getTime</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a2ecb3b041b5b8721d6767531e4ac792a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTime</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a8087982f050bdc61d787b128ca9ac8f9</anchor>
      <arglist>(simtime_t_cref time)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasArgVal</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a0e9998020362333915af80cde79df9e6</anchor>
      <arglist>(const Argument::key_type &amp;dim) const </arglist>
    </member>
    <member kind="function">
      <type>mapped_type_cref</type>
      <name>getArgValue</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a137a911de0281cbb519fe13727aa0813</anchor>
      <arglist>(const Argument::key_type &amp;dim) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setArgValue</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a27bd7000e865670a673039233424d2ab</anchor>
      <arglist>(const Argument::key_type &amp;dim, Argument::mapped_type_cref value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setArgValues</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a72ac36c91caaeb8f34eb091abff19c51</anchor>
      <arglist>(const Argument &amp;o, bool ignoreUnknown=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSamePosition</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>ac69b6722244626cdf4e0a006c9822cec</anchor>
      <arglist>(const Argument &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>afedad9de51d93e634baa82f1152d7155</anchor>
      <arglist>(const Argument &amp;o) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isClose</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a306689df8719cb4334335d93cd657f74</anchor>
      <arglist>(const Argument &amp;o, Argument::mapped_type_cref epsilon=Argument::mapped_type(0.000001)) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a20805e35e4f766088dccfa2bbd8faf03</anchor>
      <arglist>(const Argument &amp;o) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>ac983761168238481be2bc9d9d180abe5</anchor>
      <arglist>(const Argument &amp;o, const DimensionSet *const dims=NULL) const </arglist>
    </member>
    <member kind="function">
      <type>DimensionSet</type>
      <name>getDimensions</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a8b3fcda23d2eec4e931126d261e4b194</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Argument &amp;</type>
      <name>operator=</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>ada2c927eb0577a2ab63f314d369751aa</anchor>
      <arglist>(const Argument &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>af0e836fd4aaecc1461b994e21f66ddc3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a493bcd3b014d9bc09f5b0a5093797136</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>aeeb6730c20ae8a8d6c9606f2e03cc1da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a839f872b871bcce52fa4179b0e8ee0a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>find</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>ae4b61830a991f8911978c30a67dd2da6</anchor>
      <arglist>(const Argument::key_type &amp;dim)</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>find</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a3289dcd0413f1df96a51df6cef134ad4</anchor>
      <arglist>(const Argument::key_type &amp;dim) const </arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>lower_bound</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>ac22d11d6f986ecc564b98c1dbd0acb53</anchor>
      <arglist>(const Argument::key_type &amp;dim)</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>lower_bound</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>afd7c54a936671eb153f524443e36de52</anchor>
      <arglist>(const Argument::key_type &amp;dim) const </arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const mapped_type</type>
      <name>MappedZero</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a8523627cdc70492e5e0935b9a3a78cc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const mapped_type</type>
      <name>MappedOne</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a657d962a1b965814e6b2eecb07f03e80</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; key_type, mapped_type &gt;</type>
      <name>container_type</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a5b90c0766620d819b1bf1221603cc4c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>container_type::value_type</type>
      <name>value_type</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a296f0e0c35afc921b9b39b312e97e425</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>iterator</type>
      <name>insertValue</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a9f8683a4ac0a277d92f4ee4c553b75f9</anchor>
      <arglist>(iterator pos, const Argument::value_type &amp;valPair, iterator &amp;itEnd, bool ignoreUnknown=false)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>time</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a69cba55a3a7e1414ba8edde37796d84e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>container_type</type>
      <name>values</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a7e41277b3b57f03fbb47336c2b7439f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a7eb8c897281544d904f4a45de93a5cf9</anchor>
      <arglist>(std::ostream &amp;out, const Argument &amp;d)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Argument::key_iterator</name>
    <filename>a00116.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>IteratorType::value_type::first_type &amp;</type>
      <name>reference</name>
      <anchorfile>a00116.html</anchorfile>
      <anchor>aad04b5c3a84f4c80b659a05472cd28bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IteratorType::value_type::first_type *</type>
      <name>pointer</name>
      <anchorfile>a00116.html</anchorfile>
      <anchor>a7fb179e9a64691d51f7e893ea2686a09</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>key_iterator</name>
      <anchorfile>a00116.html</anchorfile>
      <anchor>ad23a42675cec51608c15650632cc15e8</anchor>
      <arglist>(const IteratorType &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>const reference</type>
      <name>operator*</name>
      <anchorfile>a00116.html</anchorfile>
      <anchor>a0842776337ded8b72060c6d13e40f7f5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>pointer</type>
      <name>operator-&gt;</name>
      <anchorfile>a00116.html</anchorfile>
      <anchor>af77b4543026de6ab04c5708d8e12480b</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArpHost</name>
    <filename>a00014.html</filename>
    <base>ArpInterface</base>
    <base>AddressingInterface</base>
    <base>BaseModule</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>a3ca8e0906ce88bc0a15f066e15cc0377</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>a2d7d301d833e0adede08407e5f52a188</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual LAddress::L2Type</type>
      <name>getMacAddr</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>a8b3d00cdaf3f160612ded6a4b06280c0</anchor>
      <arglist>(const LAddress::L3Type &amp;netwAddr) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual LAddress::L3Type</type>
      <name>getNetwAddr</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>a7884fa8ccc3dae4f66b14ded91af82f1</anchor>
      <arglist>(const LAddress::L2Type &amp;macAddr) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual LAddress::L2Type</type>
      <name>myMacAddr</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>ad2664d803237a5f16a7f58b2bd26a115</anchor>
      <arglist>(const cModule *mac) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual LAddress::L3Type</type>
      <name>myNetwAddr</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>ac41771ef247478b921e90161ba19aea5</anchor>
      <arglist>(const cModule *netw) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>offset</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>a6415d8077862f22c8323380afb659d21</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArpInterface</name>
    <filename>a00015.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual LAddress::L2Type</type>
      <name>getMacAddr</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a793bf2888740e48020eacbceaac211c2</anchor>
      <arglist>(const LAddress::L3Type &amp;netwAddr) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseApplLayer</name>
    <filename>a00016.html</filename>
    <base>BaseLayer</base>
    <member kind="enumeration">
      <name>BaseApplMessageKinds</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>ae0d47602558bc21ad258c06cf11f4361</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LAST_BASE_APPL_MESSAGE_KIND</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>ae0d47602558bc21ad258c06cf11f4361a366d211a4409475c5bc2a1193033d8b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>BaseApplControlKinds</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a78a7344b6587fdf1c02e299b156825d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LAST_BASE_APPL_CONTROL_KIND</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a78a7344b6587fdf1c02e299b156825d9a5bfff2f2b6be2fc6599387eebaebb944</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BaseApplLayer</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a28b0216a8fff432bf8f66a4e8aae7e07</anchor>
      <arglist>(unsigned stacksize)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>aa3ebaf5d1d1bdbec4648b07f65eb4145</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendDelayedDown</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a08d91ffcf2598556db4dd3ba845e4979</anchor>
      <arglist>(cMessage *, simtime_t_cref)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual LAddress::L3Type</type>
      <name>myApplAddr</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a5b07d8afa4a3675a7e4c0d09dbbbddf3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>aba8356197b089f23dd9c19b6b7937dab</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerMsg</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a448cd52ea7a441a8f2edb3794a59205b</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerControl</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a581ca398f2066910d8d10676e90d206b</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUpperMsg</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a29c15eb83ed7749c838c005a3fb554d4</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUpperControl</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a823ae7127366be3fa2e11c98ace537b7</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>headerLength</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>ab42918350289ee246b194a5ab5e18d97</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>BaseApplLayer</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>aa7b5fc9d52b209e9b2487c21a1ea6de2</anchor>
      <arglist>(const BaseApplLayer &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>BaseApplLayer &amp;</type>
      <name>operator=</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a57f4b36ce9194004e9b5c32e92d43664</anchor>
      <arglist>(const BaseApplLayer &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseArp</name>
    <filename>a00017.html</filename>
    <base>ArpInterface</base>
    <base>AddressingInterface</base>
    <base>BaseModule</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a424a847f259dbde5a83aa7c30a3a32bd</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a135cde8c1da09de4f40172e4624d771b</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual LAddress::L2Type</type>
      <name>getMacAddr</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a1d9f02236e27d18f7674b4783469de66</anchor>
      <arglist>(const LAddress::L3Type &amp;netwAddr) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual LAddress::L2Type</type>
      <name>myMacAddr</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a78d2ec3b76eb4f6ac90405c48a498579</anchor>
      <arglist>(const cModule *mac) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual LAddress::L3Type</type>
      <name>myNetwAddr</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a7d56f12536f10efeb4c4ef7a75c3a4be</anchor>
      <arglist>(const cModule *netw) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>coreDebug</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a20ca05db31d80a36c5b0263b6ead1a1d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseBattery</name>
    <filename>a00018.html</filename>
    <base>BaseModule</base>
    <member kind="function">
      <type></type>
      <name>BaseBattery</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a2aa922227a7f1d1c1e8188aaea1a16e5</anchor>
      <arglist>(unsigned stacksize)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>registerDevice</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a6b2ac07e8d11823bdd239de2bfa4563a</anchor>
      <arglist>(const std::string &amp;name, int numAccounts)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>draw</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a4ac1773aef7363fc880a9689706ccc99</anchor>
      <arglist>(int drainID, DrawAmount &amp;amount, int account)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getVoltage</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a20ee7721d8da961e3493da63a0fafb81</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>estimateResidualRelative</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a67c0d2c69f13b6c7ca4a24b23257d83f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>estimateResidualAbs</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a15862e04dfa8b40082ecccff79b14ca0</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual HostState::States</type>
      <name>getState</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>ab9afb1ddcea070ee4fdf9807521cc806</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>BaseBattery</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a667ecc08fd49ebadcec8b7eea41102bc</anchor>
      <arglist>(const BaseBattery &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>BaseBattery &amp;</type>
      <name>operator=</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a19d997709c3c25391b2856d8a54e2810</anchor>
      <arglist>(const BaseBattery &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseConnectionManager</name>
    <filename>a00019.html</filename>
    <class kind="class">BaseConnectionManager::CoordSet</class>
    <class kind="class">BaseConnectionManager::GridCoord</class>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a046d0df64848f1932ac1580be9d5306f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a0d39342f1e732ad44ef7e4e2dccac24f</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>registerNic</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a2ee333e0335730f5f6bd346d59a9813e</anchor>
      <arglist>(cModule *nic, ConnectionManagerAccess *chAccess, const Coord *nicPos)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unregisterNic</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a3e3f6ea1da0e15af3c91493dcfdc22ba</anchor>
      <arglist>(cModule *nic)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateNicPos</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a8dbfe21d2205c13ab6373245dd432353</anchor>
      <arglist>(NicEntry::t_nicid_cref nicID, const Coord *newPos)</arglist>
    </member>
    <member kind="function">
      <type>const NicEntry::GateList &amp;</type>
      <name>getGateList</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a0d0325d9aee770539d802b878ebf32cf</anchor>
      <arglist>(NicEntry::t_nicid_cref nicID) const </arglist>
    </member>
    <member kind="function">
      <type>const cGate *</type>
      <name>getOutGateTo</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a6911cdbad686c0f471df22da1351cb69</anchor>
      <arglist>(const NicEntry *nic, const NicEntry *targetNic) const </arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; NicEntry::t_nicid, NicEntry * &gt;</type>
      <name>NicEntries</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a8438ef8cd5adf3c9f3804f088813679e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; NicEntries &gt;</type>
      <name>RowVector</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a07e3ba99630593a0b453056767f3c419</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; RowVector &gt;</type>
      <name>NicMatrix</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a332ff3a0e07c412efaaa2332b00b1c38</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; NicMatrix &gt;</type>
      <name>NicCube</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a6b43342fe2608cb862e03c07cf9f799b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual double</type>
      <name>calcInterfDist</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a00b2487d2565c70a46101964a2767643</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>registerNicExt</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a385acdbacf030906826f7ee09b683a81</anchor>
      <arglist>(NicEntry::t_nicid_cref nicID)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>unregisterNicExt</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a01ca86d85b1ce76a5e128daeabd95cfa</anchor>
      <arglist>(NicEntry::t_nicid_cref nicID)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>updateConnections</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>af37541b95430b53676895f25131f42ff</anchor>
      <arglist>(NicEntry::t_nicid_cref nicID, const Coord *oldPos, const Coord *newPos)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>isInRange</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a418d9fb4151ff38840838a94189ba8b6</anchor>
      <arglist>(NicEntries::mapped_type pFromNic, NicEntries::mapped_type pToNic)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NicEntries</type>
      <name>nics</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a9e2d47a851899da506730fcdda24030e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>coreDebug</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a6b75c5b6311b76e4894d669524a15043</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>sendDirect</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>acdfe4a6c7e4d6cfc729219946488a1be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Coord *</type>
      <name>playgroundSize</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>ab68d40f806cce405a8e97958f1245303</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>maxInterferenceDistance</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a1570049e688ff532c2454fce2ef02f3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>maxDistSquared</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>aa9b0c739744c1eafd365add0afe4a037</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>useTorus</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>ade8a5353ad5be39ebb3830e45ec64fbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>drawMIR</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>acc2243ef90f9857769043cd040c48705</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NicCube</type>
      <name>nicGrid</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a4d9992e134da9af1d9b90deba1d7759a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>findDistance</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a9a4bce8e878f2d6aa18fb2606f6d8409</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GridCoord</type>
      <name>gridDim</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>afea80604515a28ff8a6a1d07b9b0a9d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>updateNicConnections</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>af36a4fd1f31773f63187cc9717441a98</anchor>
      <arglist>(NicEntries &amp;nmap, NicEntries::mapped_type nic)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>checkGrid</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a16e2ed3f54ca82817f0ee8a8522a4a86</anchor>
      <arglist>(GridCoord &amp;oldCell, GridCoord &amp;newCell, NicEntry::t_nicid_cref id)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>GridCoord</type>
      <name>getCellForCoordinate</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a6f22acc9201a4bcef5c738f4aec66529</anchor>
      <arglist>(const Coord &amp;c) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>NicEntries &amp;</type>
      <name>getCellEntries</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a417b0fbfe52596afd9d26a98f0cf0c32</anchor>
      <arglist>(const GridCoord &amp;cell)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>wrapIfTorus</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>ac460ea324e64948008f551159b58130b</anchor>
      <arglist>(int value, int max) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>fillUnionWithNeighbors</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a4d96862ff7bb89a13dee8e643c1fa947</anchor>
      <arglist>(CoordSet &amp;gridUnion, const GridCoord &amp;cell) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>BaseConnectionManager</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a7377116ab228d89a70dcfcc8091b5bfc</anchor>
      <arglist>(const BaseConnectionManager &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>BaseConnectionManager &amp;</type>
      <name>operator=</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a2748ca6453fa93fd6028986bbeb875dc</anchor>
      <arglist>(const BaseConnectionManager &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseConnectionManager::CoordSet</name>
    <filename>a00066.html</filename>
    <member kind="function">
      <type></type>
      <name>CoordSet</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>a5c4c714b303d8a6ccae2628c22357556</anchor>
      <arglist>(unsigned sz)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CoordSet</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>a3f1d637881b9e4ca2a306295eacdc634</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>aaa3c6a4f31789b4644a5bb7aaf414206</anchor>
      <arglist>(const GridCoord &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>GridCoord *</type>
      <name>next</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>a02d6a8788ed22b635e7d8edbcb576d9d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>getSize</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>adc447bc3bef91b0edd4349b803a48da1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>getmaxSize</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>ad4c6538276bc45a1efdeb8ebbfaf3d9f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>insert</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>a6f6a48e14b2c80e70d66f8fd3310df65</anchor>
      <arglist>(const GridCoord &amp;c, unsigned pos)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; GridCoord * &gt;</type>
      <name>data</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>a6bf527335c1f943a562a948d63e1c435</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned</type>
      <name>maxSize</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>ab92f6508285f667d0e7f811c74c048cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned</type>
      <name>size</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>a81adb787e364efa97276766eb19fe644</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned</type>
      <name>current</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>a0bdf347931c8b2c7ae970769291a804e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseConnectionManager::GridCoord</name>
    <filename>a00097.html</filename>
    <member kind="function">
      <type></type>
      <name>GridCoord</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>acc40471233f51e22e561d78ef9231926</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridCoord</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>afa7e86ef98fd7a4d91d0fdfcdb17e9e3</anchor>
      <arglist>(int x, int y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridCoord</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>acae21cc9126603082dbce10f45e97a5e</anchor>
      <arglist>(int x, int y, int z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridCoord</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>a4f3fd84363c60c0260dc01660b8a6dc8</anchor>
      <arglist>(const GridCoord &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridCoord</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>a5277a00268c4b72ea0af57f595100f32</anchor>
      <arglist>(const Coord &amp;c, const Coord &amp;gridCellSize=Coord(1.0, 1.0, 1.0))</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>info</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>a91ebc91e4af84ce4cf11d177d8ed7813</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>x</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>a158c3270ff10545efaf07d41c67306b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>y</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>aaaa399690632b3e605af0bd1c190100b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>z</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>a075ddccd3c60f44fe6051c7afefdd255</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>a2b7b149e4419a68dad34a9558f5c3c31</anchor>
      <arglist>(const GridCoord &amp;a, const GridCoord &amp;b)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>a8b6fb213ce1ee286ec6c894b7b22cfa5</anchor>
      <arglist>(const GridCoord &amp;a, const GridCoord &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseDecider</name>
    <filename>a00020.html</filename>
    <base>Decider</base>
    <class kind="struct">BaseDecider::tCSRInfo</class>
    <class kind="struct">BaseDecider::tProcessingSignal</class>
    <member kind="enumeration">
      <name>BaseDeciderControlKinds</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a7232c10b806ef074db6b1452664cc4a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PACKET_DROPPED</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a7232c10b806ef074db6b1452664cc4a2ab80ab87167f9836332d1d5678f6aab64</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LAST_BASE_DECIDER_CONTROL_KIND</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a7232c10b806ef074db6b1452664cc4a2a1944cc67bf3f0c98342e3975bd05021c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BaseDecider</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>acff4618fa7a9c2e9abf257e60e487de2</anchor>
      <arglist>(DeciderToPhyInterface *phy, double sensitivity, int myIndex, bool debug)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>processSignal</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a066c6bb5c11795e973d14157ea3a9c64</anchor>
      <arglist>(airframe_ptr_t frame)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>cancelProcessSignal</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>ae3c39418955737e6bae1a71a4b86d518</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ChannelState</type>
      <name>getChannelState</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a35e3f8f4e683747fbec1618ee1608982</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>handleChannelSenseRequest</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>afd31e5a65d1798d329ace9bdbec25d64</anchor>
      <arglist>(ChannelSenseRequest *request)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>channelChanged</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a1807c7256b577fe24cdd8e9c839f1d20</anchor>
      <arglist>(int newChannel)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a3d59c0be545b6d7db1233c2bb256eb5d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="enumeration">
      <name>eSignalState</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a66b8c7b730a6169202fdb36263b74aaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NEW</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a66b8c7b730a6169202fdb36263b74aaaa3276f47da7417662597b21ee3afa2d31</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPECT_HEADER</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a66b8c7b730a6169202fdb36263b74aaaaf0a66719215a9be8335546666facaab6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPECT_END</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a66b8c7b730a6169202fdb36263b74aaaa5539b8e545c0676dab0b0efb80dfeeac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>struct BaseDecider::tProcessingSignal</type>
      <name>ReceivedSignal</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>aa13822e21b4389a929359e581c4ec659</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>struct BaseDecider::tCSRInfo</type>
      <name>CSRInfo</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a2b6737edc0aa4a9c90f2da7b090caf76</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::pair&lt; double, simtime_t &gt;</type>
      <name>channel_sense_rssi_t</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a5f79c1bbb4b39c82164e0805e1eeb699</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::pair&lt; Mapping *, channel_sense_rssi_t::second_type &gt;</type>
      <name>rssi_mapping_t</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>aa11a3ec12ab83f9223d7bf11279e6226</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>getFrameReceivingPower</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a9f433fe8b7693074d3121320e50c85e3</anchor>
      <arglist>(airframe_ptr_t frame) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual eSignalState</type>
      <name>getNextSignalState</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a4a8ddbaf158b593d4aabeac39c1d36ad</anchor>
      <arglist>(eSignalState CurState) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>getNextSignalHandleTime</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a5e45eb03d1a7f3653385181236714f21</anchor>
      <arglist>(const airframe_ptr_t frame) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>processNewSignal</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>aa2a5b719b17153ecd9decb7dce98a0d1</anchor>
      <arglist>(airframe_ptr_t frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>processSignalHeader</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>ab53849078ba0481ea80a8926bdedd5f0</anchor>
      <arglist>(airframe_ptr_t)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual DeciderResult *</type>
      <name>createResult</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>ac6ef3a4cf1b91bcec788b540d61bfeba</anchor>
      <arglist>(const airframe_ptr_t frame) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>processSignalEnd</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a6ff53fb85a926f2d6bdf8dd9164ee0c7</anchor>
      <arglist>(airframe_ptr_t frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>processUnknownSignal</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>aacce0cd3c123c63be6acfd773f936910</anchor>
      <arglist>(airframe_ptr_t frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual eSignalState</type>
      <name>getSignalState</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a53c0ec4fdf4f47e54fc1e8c757a18f91</anchor>
      <arglist>(const airframe_ptr_t frame) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual eSignalState</type>
      <name>setSignalState</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a448a9f952964b494f44e5f5aef1313aa</anchor>
      <arglist>(const airframe_ptr_t frame, eSignalState newState)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>handleNewSenseRequest</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a1dba383c238fba606279ef483b435f78</anchor>
      <arglist>(ChannelSenseRequest *request)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSenseRequestEnd</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a2f175306cc0ae9d2805bc050315a47d8</anchor>
      <arglist>(CSRInfo &amp;requestInfo)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>canAnswerCSR</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>ab6c1c16f5d0f3c18dd029aa9cac256a6</anchor>
      <arglist>(const CSRInfo &amp;requestInfo) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual channel_sense_rssi_t</type>
      <name>calcChannelSenseRSSI</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>ac7a2b437d463db0f1f8f85d5a9685c2c</anchor>
      <arglist>(simtime_t_cref start, simtime_t_cref end) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>answerCSR</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>ab8e925001d1f8630338c50f8ec10bb0d</anchor>
      <arglist>(CSRInfo &amp;requestInfo)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>channelStateChanged</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>add7242168c4bb521c6335f3de590e4b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>getChannelInfo</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a0310d4013043026404832008d40d48b9</anchor>
      <arglist>(simtime_t_cref start, simtime_t_cref end, AirFrameVector &amp;out) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Mapping *</type>
      <name>calculateSnrMapping</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>aea9e98c3a9752bcf08e42742b01d2fe3</anchor>
      <arglist>(const airframe_ptr_t frame) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual rssi_mapping_t</type>
      <name>calculateRSSIMapping</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a53eb943cea4604171a5c1cc4cdec4c20</anchor>
      <arglist>(simtime_t_cref start, simtime_t_cref end, const airframe_ptr_t exclude=NULL) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>sensitivity</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a5eece8bf532f92912ccbd0a3bc4d6fb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ReceivedSignal</type>
      <name>currentSignal</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a22e578e992fab5ab54fe5fcdf196d9e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CSRInfo</type>
      <name>currentChannelSenseRequest</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>ac6cd60e58a8a557ed511f8193ced4f7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myIndex</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a33e7f02028e78116193d09d6cdbc987e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>debug</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>aa22cd5156240713e37578172ba5557ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned long</type>
      <name>nbFramesWithInterference</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>af6deaeeb4679fb1615e554e32351d0f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned long</type>
      <name>nbFramesWithoutInterference</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a4edc0767503b6e2fabf7d1c95769cf6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned long</type>
      <name>nbFramesWithInterferencePartial</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>abe788d039da95bf14448d49100878056</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned long</type>
      <name>nbFramesWithoutInterferencePartial</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a116f303ff80bc33ee5567eef9c93e3c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned long</type>
      <name>nbFramesWithInterferenceDropped</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a0f9f4136734b77a716ddff10e4623b1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned long</type>
      <name>nbFramesWithoutInterferenceDropped</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a23234fcce39ae2b4615007ea59eef19c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>BaseDecider::tCSRInfo</name>
    <filename>a00206.html</filename>
    <member kind="typedef">
      <type>ChannelSenseRequest *</type>
      <name>first_type</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>a93e251a88ffd6ab24f775fd9f569e389</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>simtime_t</type>
      <name>second_type</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>a5a8b70e8057f50600ba97c8bf36e7b85</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>tCSRInfo</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>a573c236f5887f7206d651607cbf8d8a3</anchor>
      <arglist>(const tCSRInfo &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>tCSRInfo &amp;</type>
      <name>operator=</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>a964dec581745ed10b0045f4bf2973962</anchor>
      <arglist>(const tCSRInfo &amp;copy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>a88c3a682160c0c3d632e79135eac36e6</anchor>
      <arglist>(tCSRInfo &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>ChannelSenseRequest *const</type>
      <name>getRequest</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>a1edb504319f79627ac1c9fc47ebaf406</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRequest</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>af4980447c104b86c5c6413e86afd7015</anchor>
      <arglist>(ChannelSenseRequest *request)</arglist>
    </member>
    <member kind="function">
      <type>simtime_t_cref</type>
      <name>getSenseStart</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>ad2a6aeb2a33f811a82a9412826de3d0c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSenseStart</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>a8e2aba56d4272f214edf017dffd2e5bf</anchor>
      <arglist>(simtime_t_cref start)</arglist>
    </member>
    <member kind="function">
      <type>simtime_t_cref</type>
      <name>getAnswerTime</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>a8dcb7a4c09effeb393e61634b0b06453</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAnswerTime</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>a2b466ad084dda23176cc064807fad2c9</anchor>
      <arglist>(simtime_t_cref answerAt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>a6d9375f7b138807fe9d6f5a151380358</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>first_type</type>
      <name>first</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>ac2e01c51427965a7e6c9cd863b112a83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>second_type</type>
      <name>second</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>ad9fbead769d43ac7be266d908a5feb44</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>canAnswerAt</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>a4f558a56b8a6db320dbf0dec48f7f245</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>BaseDecider::tProcessingSignal</name>
    <filename>a00215.html</filename>
    <member kind="typedef">
      <type>airframe_ptr_t</type>
      <name>first_type</name>
      <anchorfile>a00215.html</anchorfile>
      <anchor>a369fbb42aa4b51be1f34ac331fbfd60d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>eSignalState</type>
      <name>second_type</name>
      <anchorfile>a00215.html</anchorfile>
      <anchor>a8d8bd437cfbc3aed968a20cc1a7a2cf2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>tProcessingSignal</name>
      <anchorfile>a00215.html</anchorfile>
      <anchor>adf42e7381f05925ac9399ffac31e5d2f</anchor>
      <arglist>(first_type f, second_type s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>tProcessingSignal</name>
      <anchorfile>a00215.html</anchorfile>
      <anchor>a4da38823d0322b74271716cb5c395302</anchor>
      <arglist>(const tProcessingSignal &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>tProcessingSignal &amp;</type>
      <name>operator=</name>
      <anchorfile>a00215.html</anchorfile>
      <anchor>a68126f67e1f24b2acc472bd89f6acddd</anchor>
      <arglist>(const tProcessingSignal &amp;copy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>a00215.html</anchorfile>
      <anchor>a296684ba30cea4f2c4826bfd561bc254</anchor>
      <arglist>(tProcessingSignal &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>interferenceWith</name>
      <anchorfile>a00215.html</anchorfile>
      <anchor>a2e0d39a4d9fa18a348d5ea4e18365a36</anchor>
      <arglist>(const first_type &amp;frame)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startProcessing</name>
      <anchorfile>a00215.html</anchorfile>
      <anchor>a39e8b94007087ea17c05f27df88b7336</anchor>
      <arglist>(first_type frame, second_type state)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>finishProcessing</name>
      <anchorfile>a00215.html</anchorfile>
      <anchor>ac3ae14cb43df1e8d00dc6b0cff8562ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isProcessing</name>
      <anchorfile>a00215.html</anchorfile>
      <anchor>ae3c8879c03486c160311e6c7fd24a10b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getInterferenceCnt</name>
      <anchorfile>a00215.html</anchorfile>
      <anchor>a5b698123b757c9e2024f83de10db37a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>getBusyEndTime</name>
      <anchorfile>a00215.html</anchorfile>
      <anchor>ac965c9044fbf64eedb72cf94e2721b45</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a00215.html</anchorfile>
      <anchor>a3dc0ed6b473c246453826194169cb4f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>first_type</type>
      <name>first</name>
      <anchorfile>a00215.html</anchorfile>
      <anchor>a9e1a097b36bb1ae3338001b8af83d691</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>second_type</type>
      <name>second</name>
      <anchorfile>a00215.html</anchorfile>
      <anchor>adc1fa9d47e6115bd743a57b97c722c36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>iInterferenceCnt</name>
      <anchorfile>a00215.html</anchorfile>
      <anchor>ae02250eef3f42acd459379c607e33722</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>busyUntilTime</name>
      <anchorfile>a00215.html</anchorfile>
      <anchor>a5e4a7bdf0f72b5d8f887a24c4c47af97</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseDelayedIterator</name>
    <filename>a00021.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>BaseDelayedIterator</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>abcab9572c280c99fef14ddd0a87412f9</anchor>
      <arglist>(Iterator *it, simtime_t_cref delay)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Argument &amp;</type>
      <name>getNextPosition</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>ab5238914bcef66527dd7a8ecb951d5e6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>jumpTo</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>aa0c12e487930b671c16e697782c4fcf3</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>jumpToBegin</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>a46a0da319b981b94d0c6e2bf73d0e28b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>iterateTo</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>abc9b1227759ade39f70bde566d7ca596</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>next</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>a0f4e26de87701b0d5522101c6161c568</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Argument &amp;</type>
      <name>getPosition</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>a7315a6ec3aa9f6267fd84e207c9e09f2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Argument</type>
      <name>undelayPosition</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>adc48153655a44a6cb038437df65dd8d8</anchor>
      <arglist>(const Argument &amp;pos) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Argument</type>
      <name>delayPosition</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>a2f79592eaa15f47a5c2758572ed58ce0</anchor>
      <arglist>(const Argument &amp;pos) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updatePosition</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>a13b0a9510f63d62886e3359f5f1bcdb1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>delay</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>a59687f9e8e1cf20dee889ade67390f36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Argument</type>
      <name>position</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>a3062c1ea41e22ca984d5fd0d9d50dc73</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Argument</type>
      <name>nextPosition</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>a365d9f953c4c0951a3e19f7c219d67ea</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseDelayedMapping</name>
    <filename>a00022.html</filename>
    <templarg>Base</templarg>
    <member kind="function">
      <type></type>
      <name>BaseDelayedMapping</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a46b5a00f5d48a963e9fe1124bb236e2c</anchor>
      <arglist>(const BaseDelayedMapping &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>BaseDelayedMapping &amp;</type>
      <name>operator=</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a05b473ea4a0ab58701a700ec32aeea08</anchor>
      <arglist>(const BaseDelayedMapping &amp;copy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a3a7a7f787c13e1525e291a59051b63fa</anchor>
      <arglist>(BaseDelayedMapping &amp;s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BaseDelayedMapping</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a4121ef9bead8791770437997bfb9ebf8</anchor>
      <arglist>(Base *mapping, simtime_t_cref delay)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Base::argument_value_t</type>
      <name>getValue</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a9313b24f93d94b323f47a5fd0a849a04</anchor>
      <arglist>(const Argument &amp;pos) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstMappingIterator *</type>
      <name>createConstIterator</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a922ff027b2032c6c5284518d21627b46</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstMappingIterator *</type>
      <name>createConstIterator</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>aa90590b41b093a0ceccfa8a956517294</anchor>
      <arglist>(const Argument &amp;pos) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t_cref</type>
      <name>getDelay</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a667349faa339199cee8e4578ceefa741</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>delayMapping</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a8706c7b3dfda9f2ac159a3ddc0938632</anchor>
      <arglist>(simtime_t_cref d)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Argument</type>
      <name>delayPosition</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a98979867884249cd5e2644ec9ebc2adb</anchor>
      <arglist>(const Argument &amp;pos) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Base *</type>
      <name>mapping</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a45e46d51eb02ec4cb5314b4f9c96c46e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>delay</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a057be7b4a86261f973846e215e75212c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseFilteredIterator</name>
    <filename>a00023.html</filename>
    <templarg>Base</templarg>
    <member kind="typedef">
      <type>Base::argument_value_t</type>
      <name>argument_value_t</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a37be87cd4c1a250782d6d7b4758ffe15</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::argument_value_cref_t</type>
      <name>argument_value_cref_t</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a8044e0808bc668aba7894fdf64a96ca5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BaseFilteredIterator</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a25ac1815f0f271b16081ac946b3dafbd</anchor>
      <arglist>(Base *orig)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Argument &amp;</type>
      <name>getNextPosition</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a8fcdb15b385b6002fccb23fda1b05bec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>jumpTo</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a946f4502219bdeaf9a7bb82beb4aa1b3</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>jumpToBegin</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>aa988f218dbea7d9dd9b78950f071951e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>iterateTo</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a71f991a67d882d0ecc82ebdc47112f73</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>next</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>abbf0aa24021e5cf581e7b9109ae39650</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>inRange</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a3ce64085acaddb83c3ba1ff609f13e46</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasNext</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a3ecf227a5674b9334de5da528d020807</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Argument &amp;</type>
      <name>getPosition</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a76e879408ec7305bc5785be4cf8befa7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual argument_value_t</type>
      <name>getValue</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>aa26459d30e85ab6d4497fd92f2eb6f14</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Base *</type>
      <name>origIterator</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a7522be7db740698ef7e270677d9b0f39</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>BaseFilteredIterator</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a79784da3e48dc4ee105c67d19bde054c</anchor>
      <arglist>(const BaseFilteredIterator &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>BaseFilteredIterator &amp;</type>
      <name>operator=</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>addcff12ae1c2f69a3801ba93562a4633</anchor>
      <arglist>(const BaseFilteredIterator &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseLayer</name>
    <filename>a00025.html</filename>
    <base>MiximBatteryAccess</base>
    <member kind="function">
      <type></type>
      <name>BaseLayer</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a0afd7ae9809a632ee75a136838029c07</anchor>
      <arglist>(unsigned stacksize)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a70f5ea30a9980d57b8384faed29ec3eb</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a8039dac8d02052c97c1fcc209910fdde</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a5ab11502dbeeea89693d29841376a2f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const simsignalwrap_t</type>
      <name>catPacketSignal</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a665bf8ad06b2c4b5419669869e68ef00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const simsignalwrap_t</type>
      <name>catPassedMsgSignal</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a8474b0b98731b2d66c9fe3a3ae040edd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const simsignalwrap_t</type>
      <name>catDroppedPacketSignal</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>ad8ba02d92dd106da1d85192eb28250c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a87d7e1e5aa73216f07e35d7be4358924</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>handleUpperMsg</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a8c0fcfb2e806357a65d5bdb1c338627b</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>handleLowerMsg</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a5ca2278405070baa474dfbf059930247</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>handleLowerControl</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>aa37925527fae20a5de1a755103056219</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>handleUpperControl</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>ab412568faae75040194e01d5e541dd67</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendDown</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a1873d6e3fc6d92cf8482b39f1c5ac6c8</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendUp</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>adbf061566606041db811b519f0400ed5</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendControlUp</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>aa1190a06fb4dfb15d8ff001468335dc8</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendControlDown</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a6d01a0f56978740d7617c2e338858cc3</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>recordPacket</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a33f4f320f4b6c4ec48651847338ff47f</anchor>
      <arglist>(PassedMessage::direction_t dir, PassedMessage::gates_t gate, const cMessage *m)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PassedMessage *</type>
      <name>passedMsg</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>adf7be46c3b45429ae7e45c466202eebd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>upperLayerIn</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>aa73b04b4b90c5d44adf7b1ea1264412d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>upperLayerOut</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a6a901380d0b82b72898cad4ba6cff331</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>lowerLayerIn</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>abf4366df3282b3358945a3267538b93a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>lowerLayerOut</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>aa77fd3b24dc3caec970d7f5c48626e52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>upperControlIn</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>aba75bba311458c62b4b2fa2bb9711a91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>upperControlOut</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a5e0a6cb17bfc2fd3127ac884d0e9d3c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>lowerControlIn</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a1d2eb99059680b97b366ae8342f18af5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>lowerControlOut</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a380159410191c5ea0e5f95766a4814dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>BaseLayer</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>ae32ebb422e76d38e48231ebd84fe772b</anchor>
      <arglist>(const BaseLayer &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>BaseLayer &amp;</type>
      <name>operator=</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a063fda133f5220b9db525cd32c6d683b</anchor>
      <arglist>(const BaseLayer &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseMacLayer</name>
    <filename>a00026.html</filename>
    <base>BaseLayer</base>
    <member kind="enumeration">
      <name>BaseMacMessageKinds</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a8f1f4f485d6548964c1f1cbd75d1d9c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LAST_BASE_MAC_MESSAGE_KIND</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a8f1f4f485d6548964c1f1cbd75d1d9c7a0e31be8e59c319e75d7a9858ff984a2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>BaseMacControlKinds</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a49e0e548a6c20d002bd67afa7b76c483</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TX_OVER</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a49e0e548a6c20d002bd67afa7b76c483a5e5e0e55f7cc75b0d8bad06a212371f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PACKET_DROPPED</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a49e0e548a6c20d002bd67afa7b76c483adebf9c77bbe6f19772866cccbef0fe4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LAST_BASE_MAC_CONTROL_KIND</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a49e0e548a6c20d002bd67afa7b76c483a914b2cf7aab4597589adb15d8fec8b18</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MacPkt *</type>
      <name>macpkt_ptr_t</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>ac820b5548446a4fb7f264f1253c3d8af</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BaseMacLayer</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a23cf7efcbdc6fd3f30c5e8209bb4e033</anchor>
      <arglist>(unsigned stacksize)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a61c82dc3b225eac37f7fa9936c28c2c3</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>const LAddress::L2Type &amp;</type>
      <name>getMACAddress</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>afc72edc0b6187b41d084195028b9b61a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>registerInterface</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>adc87295362ca7859cb6fe2a5bbe3c90d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUpperMsg</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a6de2ca07018de313a7147a03e6d77bff</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerMsg</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a413375cec02b990a521b62086a02264c</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>add5277c1a60dab10db40c8d9641e48c4</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerControl</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a796d456d593dfab3188b37e506dd76a8</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUpperControl</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>ae4679596514426f66e66cb5ca9c29275</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual cPacket *</type>
      <name>decapsMsg</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a998b4c4c56074a354b50f8c4fc5d6d4c</anchor>
      <arglist>(macpkt_ptr_t)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual macpkt_ptr_t</type>
      <name>encapsMsg</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a0e1c8dad62e40f43a43c7b8a0cb71501</anchor>
      <arglist>(cPacket *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Signal *</type>
      <name>createSignal</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a28ca155ff241c3e202a94724cc87b232</anchor>
      <arglist>(simtime_t_cref start, simtime_t_cref length, double power, double bitrate)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Mapping *</type>
      <name>createConstantMapping</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a1c05648ce7d11bc767f9acd3d64ee067</anchor>
      <arglist>(simtime_t_cref start, simtime_t_cref end, Argument::mapped_type_cref value)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Mapping *</type>
      <name>createRectangleMapping</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a23ed373dcfd98255df5f5ffa7e30eec6</anchor>
      <arglist>(simtime_t_cref start, simtime_t_cref end, Argument::mapped_type_cref value)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ConstMapping *</type>
      <name>createSingleFrequencyMapping</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a3da0a0f34a80528e6efcb5593a073c55</anchor>
      <arglist>(simtime_t_cref start, simtime_t_cref end, Argument::mapped_type_cref centerFreq, Argument::mapped_type_cref bandWith, Argument::mapped_type_cref value)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>BaseConnectionManager *</type>
      <name>getConnectionManager</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a68f36d36168a8ba5c8a4c84c17f1ba40</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const LAddress::L2Type &amp;</type>
      <name>getUpperDestinationFromControlInfo</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a48135ffa21044a71d92149d5301f9deb</anchor>
      <arglist>(const cObject *const pCtrlInfo) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>setUpControlInfo</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a3f1d2f1614a5d25f8b5f64b74e1c40a7</anchor>
      <arglist>(cMessage *const pMsg, const LAddress::L2Type &amp;pSrcAddr)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>setDownControlInfo</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>ab57af129814d784f2a96978f036c575a</anchor>
      <arglist>(cMessage *const pMsg, Signal *const pSignal)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const cModule *</type>
      <name>getNic</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>ae51d8e3e0977cfc1d4f10f8135378fc4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>cModule *</type>
      <name>getNic</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a4e979a7bc017957f4414e3210b3b12db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MacToPhyInterface *</type>
      <name>phy</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>aa7b1e6bdb734765a9f4eff7d486dfbea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>headerLength</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a26ddb186455b73c8dc8b5698296804d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LAddress::L2Type</type>
      <name>myMacAddr</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a8a26df9da07801d8ccb530530ef57ee2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>coreDebug</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>ab3111737703e0d4b5198478fb1f75e60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>phyHeaderLength</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>ab54fe535cdac4d9ee526153163991b4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>BaseMacLayer</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a2ca8cf850c20c2823cb1daf2f4a6361e</anchor>
      <arglist>(const BaseMacLayer &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>BaseMacLayer &amp;</type>
      <name>operator=</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>aac78343ae4c96940669323e51ec09ada</anchor>
      <arglist>(const BaseMacLayer &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseModule</name>
    <filename>a00027.html</filename>
    <member kind="function">
      <type></type>
      <name>BaseModule</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>ab8e21b1eab02b58e24ab06858faa5104</anchor>
      <arglist>(unsigned stacksize)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>a03030e439aaf030c83da6e71e8be2f80</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>ace4692f0eb43b2d4ca4e46f81b5c77a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>logName</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>a662d45fd2e3edf53d40e84b98f4dc885</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const cModule *</type>
      <name>getNode</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>af7e5a2e34b218afcc9b92d75e5e11df8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveSignal</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>a9195e1fe5a0ca770e7d29351e0ab2ecf</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, cObject *obj)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleHostState</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>a44220aa650488eee8ad121f8bc599265</anchor>
      <arglist>(const HostState &amp;state)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>switchHostState</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>a2edf4477674604a8c2eb2b95e952694a</anchor>
      <arglist>(HostState::States state)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>cModule *</type>
      <name>findHost</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>aabf0226159b22b46e70031fd3bb3b1b2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const cModule *</type>
      <name>findHost</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>a2ab00477b78a8e8954472688f466d4ea</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>debug</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>af32711ea117b066fcd10081a17bb81d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>notAffectedByHostState</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>ad2e5c785ee5b988e624a11a9b80e2bce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const simsignalwrap_t</type>
      <name>catHostStateSignal</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>a0d89757df3cc2bf55649eee85aad6402</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>BaseModule</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>ad0cbb062952b5a1bc9eaa725de983505</anchor>
      <arglist>(const BaseModule &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>BaseModule &amp;</type>
      <name>operator=</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>ac5c54f656cb8c9b794060b2d88d5a161</anchor>
      <arglist>(const BaseModule &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseNetwLayer</name>
    <filename>a00028.html</filename>
    <base>BaseLayer</base>
    <member kind="enumeration">
      <name>BaseNetwMessageKinds</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>ae9b454fb23adb3ba3d2fe487f507ffab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LAST_BASE_NETW_MESSAGE_KIND</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>ae9b454fb23adb3ba3d2fe487f507ffaba0739a621763c662b0064f1f92644ae05</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>BaseNetwControlKinds</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>aca717c433c9975c6cbbc8f3ec8ce8af4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LAST_BASE_NETW_CONTROL_KIND</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>aca717c433c9975c6cbbc8f3ec8ce8af4a9d1de6d232d7ba06347a8c4f77477b89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NetwPkt *</type>
      <name>netwpkt_ptr_t</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a70ef917f412c70e361b698d6989e677f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BaseNetwLayer</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a6a2b54b843abb985471f228b93785b8b</anchor>
      <arglist>(unsigned stacksize)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a1e521b5549bfe29ae94d95265c0fe8d2</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual cMessage *</type>
      <name>decapsMsg</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a5e35aa24556a7cab9b6658889e98cb74</anchor>
      <arglist>(netwpkt_ptr_t)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual netwpkt_ptr_t</type>
      <name>encapsMsg</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>aad9d232f77fa033ffa2f1e7abe8e4af6</anchor>
      <arglist>(cPacket *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>setDownControlInfo</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a627a9f853785bc061b1423ac6ad9ad21</anchor>
      <arglist>(cMessage *const pMsg, const LAddress::L2Type &amp;pDestAddr)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>setUpControlInfo</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a701bcbce5b46085ad3c987aecfd84010</anchor>
      <arglist>(cMessage *const pMsg, const LAddress::L3Type &amp;pSrcAddr)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUpperMsg</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a0b473fbb2517ac7b0c633afdb002c269</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerMsg</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a58afc64e0a96fe4d80d6b9f53cfd53c6</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a1b6a30a1442d646a41df5acc7ef1e047</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerControl</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a478dcd88ab7a82412deb8075afe61278</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUpperControl</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>ad06c4c45457946b3abbfe68d5533575d</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>headerLength</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a9b802bd94a739e6202690d743ecc83a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArpInterface *</type>
      <name>arp</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a57d8927211b7979cf801038333ffdd50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LAddress::L3Type</type>
      <name>myNetwAddr</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a7df0d33fcf757b2e63af619f28bf3312</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>coreDebug</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a7420f776d8b4017a42781c38ad8b142a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>BaseNetwLayer</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>aee611df05c5866cfead2ec23b2593e65</anchor>
      <arglist>(const BaseNetwLayer &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>BaseNetwLayer &amp;</type>
      <name>operator=</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>ac736985952cb46f7340488218e23ae57</anchor>
      <arglist>(const BaseNetwLayer &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BasePhyLayer</name>
    <filename>a00029.html</filename>
    <base>ConnectionManagerAccess</base>
    <base>DeciderToPhyInterface</base>
    <base>MacToPhyInterface</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BasePhyLayer</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a0fc69907490ed2752d2a888ef26348ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>ae32062e99cf8196496491bb6800ed3d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>setUpControlInfo</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>af629dfbac6c68d0310ed91a7520c7ab2</anchor>
      <arglist>(cMessage *const pMsg, DeciderResult *const pDeciderResult)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getRadioState</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a893db61c894236b50c4c56e569ceedbb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isRadioInRX</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a36f7f3be7d32aa1818c0f31057478e80</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>setRadioState</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a5170b3aadae25dc6b9e61974076be04b</anchor>
      <arglist>(int rs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ChannelState</type>
      <name>getChannelState</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a8cc235ebda1b8ff6dcf17b6b0b91fc13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>getPhyHeaderLength</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>acb8478eaf566b68e949e6d16cea0e22a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrentRadioChannel</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>aa662c2194a72e2c46f6b25e7e6901834</anchor>
      <arglist>(int newRadioChannel)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getCurrentRadioChannel</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a78d08dafa6b53482145a7fe6adf30648</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNbRadioChannels</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a30f5f83644568e1be77cc25ea74aaf8b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getChannelInfo</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>af47d1c1771648303c64aa1da77cba2e4</anchor>
      <arglist>(simtime_t_cref from, simtime_t_cref to, AirFrameVector &amp;out) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstMapping *</type>
      <name>getThermalNoise</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a42664d512b88bedf58b5d21adc180984</anchor>
      <arglist>(simtime_t_cref from, simtime_t_cref to)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sendControlMsgToMac</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a76d0386516d18d1cc64af5ef6fb315cd</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sendUp</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>aa255e2b0181c204d4a8d06075967ef10</anchor>
      <arglist>(airframe_ptr_t packet, DeciderResult *result)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>getSimTime</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a45584e776ce714bcb30232bd4ace850c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>cancelScheduledMessage</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>aa4c75db0828cf579907b1e9a9c683e99</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>rescheduleMessage</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>ac012473c1be0df5df5f901ad1a3e890e</anchor>
      <arglist>(cMessage *msg, simtime_t_cref t)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>drawCurrent</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a81153199f268b4831f42b20b06959764</anchor>
      <arglist>(double amount, int activity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>recordScalar</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a4be8fe4abf2c9705625f93114aa6d337</anchor>
      <arglist>(const char *name, double value, const char *unit=NULL)</arglist>
    </member>
    <member kind="enumeration">
      <name>eAirFrameStates</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a4cd91821a30270d51c4c66594b9d7122</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>START_RECEIVE</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a4cd91821a30270d51c4c66594b9d7122aa0cb17278ea70e7e327de30aad32e0a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RECEIVING</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a4cd91821a30270d51c4c66594b9d7122a2900d4f5f03ec09b83e5c24744924755</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>END_RECEIVE</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a4cd91821a30270d51c4c66594b9d7122a8c8f8a59dc873e035f19750598ceb157</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; AnalogueModel * &gt;</type>
      <name>AnalogueModelList</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>ac8dca20c727bdb1494d97da1c64bb55d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>T</type>
      <name>readPar</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>acb6faccca49fc7d6f8604ee7f29b4c46</anchor>
      <arglist>(const char *parName, const T defaultValue) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a08704deaf03b73c8eda67cc60e670853</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a3880154c8db8b8efb5315cb6ef8f6c41</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MiximRadio *</type>
      <name>initializeRadio</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>aad75440994998cc89ef7028528197cb7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual AnalogueModel *</type>
      <name>getAnalogueModelFromName</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>af578e3fbeacc12b639dd5f072215bac5</anchor>
      <arglist>(const std::string &amp;name, ParameterMap &amp;params) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>_AMODEL_CLASS_ *</type>
      <name>createAnalogueModel</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a1e4dd47185d6931380f459c62200faee</anchor>
      <arglist>(const ParameterMap &amp;params) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Decider *</type>
      <name>getDeciderFromName</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a7d18a0853db85eba39f370e51ae8b007</anchor>
      <arglist>(const std::string &amp;name, ParameterMap &amp;params)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>_DECIDER_CLASS_ *</type>
      <name>createDecider</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a5aa60c2caec2dad44aca154e0710a7e4</anchor>
      <arglist>(const ParameterMap &amp;params)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual airframe_ptr_t</type>
      <name>encapsMsg</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a9e03a4078cc2d1c4214249120901321c</anchor>
      <arglist>(cPacket *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>filterSignal</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>aadce19c8b5e2737ab4fb0d53184ccecf</anchor>
      <arglist>(airframe_ptr_t frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finishRadioSwitching</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>aa1de743a3d3ba652c1f3b84b34585743</anchor>
      <arglist>(bool bSendCtrlMsg=true)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>myProtocolId</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>adecf85d8636ac48e1ce8cea176a3c71c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>isKnownProtocolId</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a618479a7b36d43594ab3e8a7d80007bb</anchor>
      <arglist>(int id) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>simtime_t</type>
      <name>readPar</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a3ceb75519538a55431f4f63702529445</anchor>
      <arglist>(const char *parName, const simtime_t defaultValue) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleAirFrame</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>ac8e87dac89d0c0daa01a8d430be7e7b6</anchor>
      <arglist>(airframe_ptr_t frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUpperMessage</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a17b1d469775962d23835dd5f43a639ac</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUpperControlMessage</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a4cab267d310b5fd6cefe613fc8dfe71d</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMessage</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a17088ad93f59e143ff6c7ba866a31982</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleChannelSenseRequest</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a6866e3f79df84cdb5550a51d6502463f</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleAirFrameFirstReceive</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a6062d98a2df1275c6ef008facfd8c0af</anchor>
      <arglist>(airframe_ptr_t msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleAirFrameStartReceive</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>af21aac7c5a0c4bc282817232f3879611</anchor>
      <arglist>(airframe_ptr_t msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleAirFrameReceiving</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a500cbd8d17f36299121b01a103667cd5</anchor>
      <arglist>(airframe_ptr_t msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleAirFrameEndReceive</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a415f92b23835dc5ffc568747a4669b8f</anchor>
      <arglist>(airframe_ptr_t msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendControlMessageUp</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>aaa439e85a8bc20a39477055aecf04993</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendMacPktUp</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>af5ac9665c3f3eaee7846ef0ba141b858</anchor>
      <arglist>(cMessage *pkt)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendMessageDown</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>aaf9ded47fad2c0930aee595b9ec16770</anchor>
      <arglist>(airframe_ptr_t pkt)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendSelfMessage</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>aa59aef501cadd36c94d4f82efe9b64be</anchor>
      <arglist>(cMessage *msg, simtime_t_cref time)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>protocolId</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>addc3dfa9056f0acafefacd34d5d059bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ConstantSimpleConstMapping *</type>
      <name>thermalNoise</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>afedc2cd6f80601fb040b56256e6cc756</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>maxTXPower</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a80fe7028b2fbf92f61dd30b79e30a86d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>sensitivity</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a7eaa041636b623066b5abd87a38afa25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>recordStats</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a71f6c8e91a8f597a5d213b30c64b0cf8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ChannelInfo</type>
      <name>channelInfo</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a38d35bc99079eff49deb6c870b1175e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MiximRadio *</type>
      <name>radio</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>ab2a4c85442ff2436ca7fbe6c424c1b2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Decider *</type>
      <name>decider</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a5be00b3a133596d8ed78a9f8e38973d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AnalogueModelList</type>
      <name>analogueModels</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>abc00fc5777ef641f72b5a4d85bf65c93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>upperLayerIn</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a49fcd06f6c27aab1d14d13eaecc09f1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>upperLayerOut</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a334fbbb0a1608058c46906ef2c90045f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>upperControlOut</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>aca9b66970dd836cc696dd0907c58598b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>upperControlIn</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>ab58c7430371f1ba135e0a641d150c1e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>radioSwitchingOverTimer</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>ac28de586b21162c377a180233299a1d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>txOverTimer</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a2ce22bc20ab469e99352958face5468d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>headerLength</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a75255fe80f09f87b7db213d21db3b8e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BaseWorldUtility *</type>
      <name>world</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>ad1de573273df163a5fc2b8b537c65e23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static short</type>
      <name>airFramePriority</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>ac68a290868512c992f8a49b6af7b6c7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>getParametersFromXML</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a7582bacd4cd232ebf9eeaee6ec473a64</anchor>
      <arglist>(cXMLElement *xmlData, ParameterMap &amp;outputMap) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>initializeAnalogueModels</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a8ea7353793eed2f1a7b0cd1caacd72e9</anchor>
      <arglist>(cXMLElement *xmlConfig)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>initializeDecider</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a9da4f8ffaa373a0de7895cbea524816b</anchor>
      <arglist>(cXMLElement *xmlConfig)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>BasePhyLayer</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a6dd46cf3eb4cac8e6fe56a4f17cf8f55</anchor>
      <arglist>(const BasePhyLayer &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>BasePhyLayer &amp;</type>
      <name>operator=</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a7dc17265602d237a6981845df223fa54</anchor>
      <arglist>(const BasePhyLayer &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseWorldUtility</name>
    <filename>a00030.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>a08cd184861fa214245ba5c9928e5aefc</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function">
      <type>const Coord *</type>
      <name>getPgs</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>a179c8bf9d4613cbb1af0a85d779827a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>useTorus</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>a37a1abb90a220afdaf6dbdab58299e51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Coord</type>
      <name>getRandomPosition</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>a3c574ecd7a055ba2407f638ce548bc24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>use2D</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>a84c3d488e01d52be51c686e3fb206498</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>getUniqueAirFrameId</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>a1c955c6c60dfa5b46a2bf683a20a84fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>speedOfLight</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>a84d040f815027b3098451b02733ac63d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeIfNecessary</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>aabcceb57843568c213b0772b08971827</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>playgroundSize</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>a74ba640d810a03334770d1f150fe1da4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>useTorusFlag</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>aa906ac76b1c5b51f6743104b532ed4f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>use2DFlag</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>abc092a88c21ecc008a7a32bc311201e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>airFrameId</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>a490427de9d083bd510a4370002f70716</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isInitialized</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>a3c5b996451b88c37022a191668d715a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BasicModule</name>
    <filename>a00031.html</filename>
    <base>INotifiable</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual cModule *</type>
      <name>findHost</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>aa05d2372f6004febdbcb02175f218369</anchor>
      <arglist>(bool errorIfNotFound=true) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const char *</type>
      <name>getLogName</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>ad3cb64be134cf17fedc75bd04b698a8e</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>ae0497ccac7ad62630013847a8985dd4e</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>a970d6ae46715ef49ca54b79efcf8df7a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const char *</type>
      <name>logName</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>a148b7c2d82dc4b7a551193a367591e04</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveChangeNotification</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>aaba53958696e211632fbf133f7ca0ca4</anchor>
      <arglist>(int category, const cObject *details)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>coreDebug</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>a8236f7f9236aa45ff3921bb7918e8b16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>debug</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>a6ad967ecb9d1507f3efea5a11f89eae7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>loggingName</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>a6b20f2c5f3846ce757517c5b37db501b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BatteryState</name>
    <filename>a00032.html</filename>
    <member kind="function">
      <type></type>
      <name>BatteryState</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ae670927fcf61d4747da036db42a4a10a</anchor>
      <arglist>(double n=-1)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRel</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aaaacc811d07db14a871acadf438e1685</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getAbs</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a1da8df3aab646db06c6341fb48efcfe6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aaa9af946d2a8a122b13d9eb16e97fc15</anchor>
      <arglist>(double s)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>info</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a36ff9183e3c338cedef736514ffba096</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>nominal</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a035f6edba77666695304d885fab6612e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>absolute</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aebcd9c40f472c24575a8987dcfcf612b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BatteryStats</name>
    <filename>a00033.html</filename>
    <base>BaseModule</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a07bebc9788ff9ec28a8b4d3d1473d977</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>aa5991c9ecc71e069e42f0496e5a1c37f</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveSignal</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a9fc9cb2cb11cc93cd22b9a3a5df33013</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, cObject *obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a07c69e80cfcfe2df2d90f3bbbcaa7493</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>summary</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a659de266519b40fcc35e920b8c45408f</anchor>
      <arglist>(double, double, simtime_t_cref)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>detail</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a36927a49cf82b948194a84e595bc1db3</anchor>
      <arglist>(const DeviceEntry *, int)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const simsignalwrap_t</type>
      <name>catBatteryStateSignal</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>adc69f67560c724bb41dbd4c5dfd81df0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>doDetail</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a03ac20b06dbccee77e65191265682eaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>doTimeSeries</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>aaee44a254a029ec3ef5500c46ceb53dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>residualVec</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a0743e048cf348ccb088f7fe63ce5eaf0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>relativeVec</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a64567e581be22366087716a23f4d9d20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>estimateVec</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a1c3254ee8dbc2c51c58598aa5fe208c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>estimateRelVec</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a7b1d7fe230c0aa033926faf32dbcc4d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>BatteryStats</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>ab497aaa7286125376a409eb86ec9d4fb</anchor>
      <arglist>(const BatteryStats &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>BatteryStats &amp;</type>
      <name>operator=</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a110cd30b14b41a9452bad66bafff30c3</anchor>
      <arglist>(const BatteryStats &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BMacLayer</name>
    <filename>a00035.html</filename>
    <base>BaseMacLayer</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>aacfdc6bca51f7097b58556fdf1744689</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>a977715453feffb03e242372808661828</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerMsg</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>ac16d3f8eda5c8d43c4a33a581aa4fbfb</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUpperMsg</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>a43c9f5377b89dd4cd4e4e48fb3e96107</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>a0d6b089a3e75932385bf38815b44b8bc</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerControl</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>a6b362134693ef8ab49abdea9a7d6dda1</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="enumeration">
      <name>States</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>aeed53f8e3ce2313f84d47dd7226f1a9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>TYPES</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>a7d56487b9b46428d6c225ad59cf1e1cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>BMAC_COLORS</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>ab86d33b96584c398e40eb6ee973ce3e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::list&lt; macpkt_ptr_t &gt;</type>
      <name>MacQueue</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>af5858f009b2297135483e4c7d8cddabb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>changeDisplayColor</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>a727a243ed5bfe43d34452f310860fd74</anchor>
      <arglist>(BMAC_COLORS color)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendDataPacket</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>a2f19dac6f5e7041c9b65a1e547763ffa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendMacAck</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>af2a4df90f60f2c5b93813b5424f7ee0f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendPreamble</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>afeb78e201913f491b8abb8416dd6eefc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>attachSignal</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>a5f0384e6e1a28a7d303ec5d6d2cc9dd4</anchor>
      <arglist>(macpkt_ptr_t macPkt)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>addToQueue</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>acff92f0d4ba44ee5035c0d3729729257</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MacQueue</type>
      <name>macQueue</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>ae34984aa9d79ca356e9d310cf7fe431e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>States</type>
      <name>macState</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>a3f547e9f97f0c07b692c32c4183c5411</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>resend_data</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>a1e2aa705eae24e7148f4bbe0471d3229</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>ack_timeout</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>a145c410ec2d1eb9e3597b3200c26f0d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>start_bmac</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>a62d5d912d56ba740ea23f07dccd6fcbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>wakeup</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>a6313438a0e18d8fddff825cef84d9195</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>send_ack</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>a1198ad2c538df561f6fd1eb9199500bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>cca_timeout</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>ac68eaf403ee572049cdd43847781d05c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>ack_tx_over</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>a5119f45880b076605c50cccd3f29f61a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>send_preamble</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>ace3db346970036d2d2c69a3f19711359</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>stop_preambles</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>aaabfc50cbcf1575c29c768cdf1907433</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>data_tx_over</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>a2cd83b341f6b776c3ceb053f8fe7cfea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>data_timeout</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>ac52679dd69998ee9e391355043be28dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DroppedPacket</type>
      <name>droppedPacket</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>a6a19e8ed9b796a93f8e0aeeaff22de83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>nicId</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>a5eb298197cc0eac3b5cd389b9dc4d88a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>queueLength</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>acd3669a9dfbb2bc04d64f91ae8755a68</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>animation</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>a344d41bb6a3dd348f0b193a253a44e63</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>slotDuration</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>ad52c754e33e66f1811d4d0a52f748aea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>bitrate</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>a30e8c5f8b0666509bec376dcc7dc057b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>checkInterval</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>a6672d3d6469bf079cea9e9fc0430cfd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>txPower</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>a8507b0daed75036c14e6822cddb09832</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>useMacAcks</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>ac44f7816182a2431558f281628808dbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>maxTxAttempts</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>ac89bcf80f1642195df80253067ba92e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>stats</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>a3a94af09a9ad4145931583187c8cc793</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>nbTxDataPackets</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>a9946b0282bdb89f97ac77defb0f21f29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>nbTxPreambles</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>af3f1a45e3ed165116eb7e611abdb7c02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>nbRxDataPackets</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>a0ae502acaea0c8f470983c9a56475694</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>nbRxPreambles</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>a7f43f96f806b0316f6d01c7f21c4f363</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>nbMissedAcks</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>a0276e15ee64fe3090a02b607af5a28fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>nbRecvdAcks</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>a307308885949e74955ec033cbe395588</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>nbDroppedDataPackets</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>ac945ffe44db428a09d1b08fda495f18a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>nbTxAcks</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>acf00fd5e322a487ae4bc0b4764b6fcb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LAddress::L2Type</type>
      <name>lastDataPktSrcAddr</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>a71676818c7ef0efe88e96d4cf9586570</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LAddress::L2Type</type>
      <name>lastDataPktDestAddr</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>a7b37169e49e94f23f31cc66eb4427f60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>txAttempts</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>a6d7ed556ad8e34b05eeeb71e56a1737e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>BMacLayer</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>a0d881bb7876eef8b5c6845fe0daf259a</anchor>
      <arglist>(const BMacLayer &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>BMacLayer &amp;</type>
      <name>operator=</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>ab48b373b857f30e8ebae7f2793b84736</anchor>
      <arglist>(const BMacLayer &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BonnMotionFile</name>
    <filename>a00036.html</filename>
    <member kind="typedef">
      <type>std::vector&lt; double &gt;</type>
      <name>Line</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>a8d0cd61f5b1284cbffd827c179d60ec7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const Line *</type>
      <name>getLine</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>a53dd2337b7b1809751fca2a828a11665</anchor>
      <arglist>(int nodeId) const </arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::list&lt; Line &gt;</type>
      <name>LineList</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>a07effbbc07901ec6bf284331f592a61c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LineList</type>
      <name>lines</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>a64119f4470afc52e4d8ccb74d96e2023</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>BonnMotionFileCache</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>ad131800aaf23bcc613f26a3ae6bde111</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BonnMotionFileCache</name>
    <filename>a00037.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual const BonnMotionFile *</type>
      <name>getFile</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>acd2a73b9199e01b31db26ec817604b8b</anchor>
      <arglist>(const char *filename)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static BonnMotionFileCache *</type>
      <name>getInstance</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a995dc4f97f699bb7a7361120f5cb46b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>deleteInstance</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a8eda04da33078a95b2971e2c429969e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; std::string, BonnMotionFile &gt;</type>
      <name>BMFileMap</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>ac750dfb8bf1a24c281a65d3f8604fa69</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>parseFile</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a419bd9e8bbf1b82de00d37f69d289257</anchor>
      <arglist>(const char *filename, BonnMotionFile &amp;bmFile)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BMFileMap</type>
      <name>cache</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a97929fd681c1e9f2aa8d5269d47655fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static BonnMotionFileCache *</type>
      <name>inst</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a5afb0e0b1382039314aee521db870412</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BonnMotionMobility</name>
    <filename>a00038.html</filename>
    <base>LineSegmentsMobilityBase</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00038.html</anchorfile>
      <anchor>aefa1902bb0eb0797092868ed523c1327</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initializePosition</name>
      <anchorfile>a00038.html</anchorfile>
      <anchor>a9cbf06aed21560e9bbc9c6b20572edbf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setTargetPosition</name>
      <anchorfile>a00038.html</anchorfile>
      <anchor>a329cf4ceedc6b5bebc1714889c4924e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>move</name>
      <anchorfile>a00038.html</anchorfile>
      <anchor>abc3f79d60f65eb5af771ed44dcaa3bbd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>is3D</name>
      <anchorfile>a00038.html</anchorfile>
      <anchor>ad75448e3f89321dcd3a5d006a6a1a321</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const BonnMotionFile::Line *</type>
      <name>lines</name>
      <anchorfile>a00038.html</anchorfile>
      <anchor>a25856d9d3847c2313b76de3a8414ed2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>currentLine</name>
      <anchorfile>a00038.html</anchorfile>
      <anchor>a498dd7542299e309733e5e58a2d30836</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BreakpointPathlossModel</name>
    <filename>a00039.html</filename>
    <base>AnalogueModel</base>
    <member kind="function">
      <type></type>
      <name>BreakpointPathlossModel</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>a75f814ce2e0a9c22764a6821848c3153</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>initFromMap</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>ad3082c9473bc2e4f973b565268f37ce0</anchor>
      <arglist>(const ParameterMap &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>filterSignal</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>a6e8f40d451a398c981c5039da397b4db</anchor>
      <arglist>(airframe_ptr_t, const Coord &amp;, const Coord &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isActiveAtDestination</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>a40f8c0d27eba086bc3a2f6f65af1f37c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isActiveAtOrigin</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>a1f36f2c1056bc9365838cc0d89d5e441</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>PL01</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>aaf5084c5a5dc83b37a468e5813a8191d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>PL02</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>a31580babd35b18cbd87a7ac30b71693f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>PL01_real</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>abaedae8f705d49e1c7fc547eede38c62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>PL02_real</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>aea3fe4a5fdc2aead5a651791b07688d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>alpha1</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>a9308bf633a9048ae42b7b004d718606f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>alpha2</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>ab2b41fdd2300b115a75c9647a7cd7e9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>breakpointDistance</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>a8f5df99a4fac21e39f985b8af0d9412c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>carrierFrequency</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>a15f631e677b586706c16f910187c5b69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>useTorus</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>ae4ce233223157fbad4767ee989d0328c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>playgroundSize</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>ab46183c9afd261db6972087e706dd736</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>debug</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>aa9f8dbeb8e7e0f3a9200652d1f81a88c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>pathlosses</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>a0c6ce678120579025519343c8a0974c3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BurstApplLayer</name>
    <filename>a00040.html</filename>
    <base>TestApplLayer</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>ae693c2f1fc343d8c253778a1de1c4082</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>ae3bd389dede2510650cfb8b32d5716b4</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerMsg</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>aaaf45ab3db0685c695394ea862a3d79f</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>burstSize</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>a5f3f95d8dc606e1003cd4262a091d39e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>bSendReply</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>adf86a6c396e69c375906d2d04cea89a2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BurstApplLayerBattery</name>
    <filename>a00041.html</filename>
    <base>BurstApplLayer</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>a8ccaf74e9a310c5f45447283df6dee7e</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>aa3413a8e1ebfbd7630b7389dc4d7f211</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleHostState</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>a844beeae7f5dd04a628538b1b9fead02</anchor>
      <arglist>(const HostState &amp;state)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerMsg</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>a66a2f76f5f30f1920dc65f00a6fd1ac3</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>aa50363ece763f8c35957ce60fab0d9a3</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>bcastOut</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>afe3e5af417f294628cbaa8594542ab38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>replyOut</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>ad6a44e7b94755befebf39fde55643828</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>replyIn</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>ac5175743d144b772c7aa76bfcfacbc3a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ChannelInfo</name>
    <filename>a00043.html</filename>
    <class kind="struct">ChannelInfo::airframe_filter_fctr</class>
    <class kind="class">ChannelInfo::BaseIntersectionIterator</class>
    <class kind="struct">ChannelInfo::c_min_start_time_fctr</class>
    <member kind="typedef">
      <type>MiximAirFrame</type>
      <name>airframe_t</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>a2703dfa7eecb2eca768a70ad9210406a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>airframe_t *</type>
      <name>airframe_ptr_t</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>aa93cf512eb51209e31b2d4903faca31d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; airframe_ptr_t &gt;</type>
      <name>AirFrameVector</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>a220306dd8d5282778f27be702d193431</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addAirFrame</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>a6d92d233abde2703171773354c8689cd</anchor>
      <arglist>(airframe_ptr_t a, simtime_t_cref startTime)</arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>removeAirFrame</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>ac033379c710f5d4c66168032a92f0c1e</anchor>
      <arglist>(airframe_ptr_t a, simtime_t_cref returnTimeIfEmpty=invalidSimTime)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getAirFrames</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>acb7f1f51f0f75b15fd29379e87128b27</anchor>
      <arglist>(simtime_t_cref from, simtime_t_cref to, AirFrameVector &amp;out, airframe_filter_fctr *const fctrFilter=NULL) const </arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>getEarliestInfoPoint</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>a69386cf7e037a163e298c0fd70bd7dea</anchor>
      <arglist>(simtime_t_cref returnTimeIfEmpty=invalidSimTime) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startRecording</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>abab4a17344f3b254693ed34309c6466f</anchor>
      <arglist>(simtime_t_cref start)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stopRecording</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>a884277584d1abf73eaca5df0c61e08c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRecording</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>a5b1b8d56aa2fa64b5d79c0cf5c3167a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isChannelEmpty</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>a5af012c57b6bb9930b1634138ab65bf8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const_simtime_t</type>
      <name>invalidSimTime</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>a6e51dfe3982d95dace93761852a0ac07</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; simtime_t, std::multimap&lt; simtime_t, airframe_ptr_t &gt; &gt;</type>
      <name>AirFrameMatrix</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>aba8c8f81b5fad9216a08d86de4acb070</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>BaseIntersectionIterator&lt; const AirFrameMatrix, AirFrameMatrix::const_iterator, AirFrameMatrix::mapped_type::const_iterator &gt;</type>
      <name>const_iterator</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>a684323fb3bd48d29674f5b14d7ce2f02</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>BaseIntersectionIterator&lt; AirFrameMatrix, AirFrameMatrix::iterator, AirFrameMatrix::mapped_type::iterator &gt;</type>
      <name>iterator</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>afef8a1ed99d3d6ea005c5cc358dbbbbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; long, simtime_t &gt;</type>
      <name>AirFrameStartMap</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>a03476c3a3c992f5e8bb099312e601c6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>aa372e681d453fa1725e81793cdfb4182</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>a8afa15fedf769249c517b832eb577ac2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>erase</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>a97025affc9a97382fc4b767fe698a170</anchor>
      <arglist>(const iterator &amp;__position)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>assertNoIntersections</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>a4ec93f0a935723a0183de82969ff0d6e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToInactives</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>a93b197f70e37825ac3fdc760960144f5</anchor>
      <arglist>(airframe_ptr_t a, simtime_t_cref startTime, simtime_t_cref endTime)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>simtime_t</type>
      <name>findEarliestInfoPoint</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>a93480cb69cb9c0367f30e6ccba84181e</anchor>
      <arglist>(simtime_t_cref returnTimeIfEmpty=invalidSimTime) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>checkAndCleanInterval</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>a1ffb197c5bf86824cd04313da5e9e4ed</anchor>
      <arglist>(simtime_t_cref startTime, simtime_t_cref endTime)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>canDiscardInterval</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>ab4da0befdce7f2b27ae4a61d66ec2167</anchor>
      <arglist>(simtime_t_cref startTime, simtime_t_cref endTime)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>checkAndCleanFrom</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>a3a3f57cc0461d0cb7b938feb58dc3947</anchor>
      <arglist>(simtime_t_cref start)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>getIntersections</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>ab9b1803c1c37bc3d20924ea20fc8da59</anchor>
      <arglist>(const AirFrameMatrix &amp;airFrames, simtime_t_cref from, simtime_t_cref to, AirFrameVector &amp;outVector, airframe_filter_fctr *const fctrFilter=NULL)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static bool</type>
      <name>isIntersecting</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>ac1f58994b3a3002151389722dc311c48</anchor>
      <arglist>(const AirFrameMatrix &amp;airFrames, simtime_t_cref from, simtime_t_cref to)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>deleteAirFrame</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>a1c021b6db89a2f805004e221dd84b3f1</anchor>
      <arglist>(AirFrameMatrix &amp;airFrames, airframe_ptr_t a, simtime_t_cref startTime, simtime_t_cref endTime)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AirFrameMatrix</type>
      <name>activeAirFrames</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>a2db96b70bb8678e3e4959985a7ef27a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AirFrameMatrix</type>
      <name>inactiveAirFrames</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>ac674b4797484960e332e260af4825c04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AirFrameStartMap</type>
      <name>airFrameStarts</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>a9c7678b4205557914b26e58edcdf44c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>recordStartTime</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>a647dc636e9aa2f8a70ac99b604336cb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const const_iterator</type>
      <name>cConstItEnd</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>a37ac84f95c3faeb3e2606a4a01dbf36e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const iterator</type>
      <name>cItEnd</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>a4ad62d494f91f38b3fe52963cc96fb14</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ChannelInfo::airframe_filter_fctr</name>
    <filename>a00007.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>pass</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>a796b51b43fe836f58fd21fa0deab7113</anchor>
      <arglist>(const airframe_ptr_t &amp;a) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ChannelInfo::BaseIntersectionIterator</name>
    <filename>a00024.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>ItSubMatrix::value_type</type>
      <name>value_type</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a471fc1a60af635fb3c0a8ab8d6cce8bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ItSubMatrix::reference</type>
      <name>reference</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>aac7f5f7659e2af1cd8716a834401efd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ItSubMatrix::pointer</type>
      <name>pointer</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a93097271e65622f4c9f6deb25dafcd7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BaseIntersectionIterator&lt; C, ItMatrix, ItSubMatrix &gt;</type>
      <name>iterator</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>afde30f590f3ae0d5bd3826b117f0f8cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::bidirectional_iterator_tag</type>
      <name>iterator_category</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>ad49480648b20cce752a10c1704ffaffc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a5f20f8603ee051ed974807524a421236</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BaseIntersectionIterator</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a6395e3ba8586e3de880388e5d5d58f21</anchor>
      <arglist>(C *airFrames, simtime_t_cref from, simtime_t_cref to)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BaseIntersectionIterator</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>ad3f4ba383c358727a9081102fd501474</anchor>
      <arglist>(const iterator &amp;__it)</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>operator*</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>ae590cfe5db2f81bf58735f210e826e08</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>pointer</type>
      <name>operator-&gt;</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>ab3a18191044b24791c8a56158acc9acd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>_Self &amp;</type>
      <name>operator++</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a45eb6b8c190d1fe0126ba0ff633b7be0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>_Self</type>
      <name>operator++</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a980d6201ccb18916142ca01c30c16152</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a38ab956a1689568c8b0ba646ab479421</anchor>
      <arglist>(const _Self &amp;__x) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>ad924b017640e7eaf589c78bcff4ee730</anchor>
      <arglist>(const _Self &amp;__x) const </arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>BaseIntersectionIterator&lt; C, ItMatrix, ItSubMatrix &gt;</type>
      <name>_Self</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a9638ff6acb30ac74903e35f3c20ae55d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>_Self &amp;</type>
      <name>jumpToNextValid</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a793a9ebbc78c634d3e74fe50aaf0b04e</anchor>
      <arglist>(ItMatrix endItEnd)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>C *</type>
      <name>intervals</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a752c33584da635c8293c29c2116cdc42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t_cref</type>
      <name>from</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>ae2985262dd881a9c3598ca5e780b3a46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t_cref</type>
      <name>to</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a0cafe335b6679b27f704565c57432047</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ItMatrix</type>
      <name>endIt</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a0546c8bfc867fbe321668ac876328d6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ItSubMatrix</type>
      <name>startIt</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>ab0d649bb86964e452843cfc9a78f09b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ItSubMatrix</type>
      <name>startItEnd</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>ac4b600f26b96210e2b41eccc8d9ad893</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ChannelInfo</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>aefc7c05227de417f9908d7c8735c394e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ChannelInfo::c_min_start_time_fctr</name>
    <filename>a00042.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>a85fb96a605f2eeb632d31354b0a10d68</anchor>
      <arglist>(const AirFrameMatrix::value_type &amp;a, const AirFrameMatrix::value_type &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ChannelState</name>
    <filename>a00044.html</filename>
    <member kind="function">
      <type></type>
      <name>ChannelState</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a60196f82a7cf53dde36d88843343a6db</anchor>
      <arglist>(bool isIdle=false, double rssi=0.0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isIdle</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>ab09e4515d5428b1287a62ec1bd1b01fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRSSI</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a74ccec73c5ab45677575e568d3a455fa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>info</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>aa7125a711299c62119c5fe5bc3f43f1f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>idle</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a6ade0df6803fb49731266569e7c94df2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>rssi</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>abb965a7dd22a6000b4a1dc68e55152f7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ChiangMobility</name>
    <filename>a00045.html</filename>
    <base>LineSegmentsMobilityBase</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>a58c485d8f5ec8acfd2b69570f956cd12</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>getNextStateIndex</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>a1c47d92af1dd46eb97a3bc02184328c1</anchor>
      <arglist>(int currentState)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setTargetPosition</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>ae5117103fd3d0afe32e9e6267b2668a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>move</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>a7ce18637a71e90d97461f4cecb935adc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>speed</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>ace622cec7f853a6b11e42531746c559b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>stateTransitionUpdateInterval</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>a472a2f16f7a6b17d11f33f21de8bff5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>xState</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>a18e61bc123a66ed8d405e868bf5fe5a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>yState</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>a47622d5f66dfcc7354a4d90a79155a6c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CircleMobility</name>
    <filename>a00046.html</filename>
    <base>MovingMobilityBase</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>a6ab5b8976743a51b6d06dd98ce1b402e</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initializePosition</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>ad68f43c81f5263103e9786ce62723eb1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>move</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>aaf63e4200e8f9b401b527b8e73717b03</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>cx</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>aac5a0778c988092ab75bf9db0b1b150c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>cy</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>a192968e4e0d9931e7897603eb1e9cca5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>cz</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>ae9ccf20a0bbe22a38bb53fb609f612f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>r</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>a5508772822b819e94fe73c289bf15f93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>startAngle</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>a68e5786451a1d65677782b10c87774d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>speed</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>a8b35beaf237e46bf9366966e9dc2b577</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>omega</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>a9e64ba0defa6892982103bcb98ded29d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>angle</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>a039e90d57dabbf0a5d52ac1be126cc81</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConcatConstMapping</name>
    <filename>a00049.html</filename>
    <templarg></templarg>
    <base>ConstMapping</base>
    <member kind="function">
      <type></type>
      <name>ConcatConstMapping</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>a46236c957b122c4e16d83f7e804dcb06</anchor>
      <arglist>(const ConcatConstMapping &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>ConcatConstMapping &amp;</type>
      <name>operator=</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>ab93320011f9c96397d1c4e116d2e1525</anchor>
      <arglist>(const ConcatConstMapping &amp;copy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>a6622816a1d58aa2cf1bdc1f97df22c7c</anchor>
      <arglist>(ConcatConstMapping &amp;s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConcatConstMapping</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>abfce216332c75a11be1d8ef96dadac18</anchor>
      <arglist>(ConstMapping *refMapping, Iterator first, Iterator last, bool continueOutOfRange=true, Argument::mapped_type_cref oorValue=Argument::MappedZero, Operator op=Operator())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConcatConstMapping</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>ae380dac709f74ae64e14c12eb978c46f</anchor>
      <arglist>(ConstMapping *refMapping, ConstMapping *other, bool continueOutOfRange=true, Argument::mapped_type_cref oorValue=Argument::MappedZero, Operator op=Operator())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addMapping</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>ad9e4caf92010d92e76ed86a597e3399f</anchor>
      <arglist>(ConstMapping *m)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Argument::mapped_type</type>
      <name>getValue</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>a28448679df346f8baf0f889bc0ab522a</anchor>
      <arglist>(const Argument &amp;pos) const </arglist>
    </member>
    <member kind="function">
      <type>Mapping *</type>
      <name>createConcatenatedMapping</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>a575967e48547622110a29a7b90f3c71a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstMappingIterator *</type>
      <name>createConstIterator</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>a417cebabd88daa682ea0f3cae877eae2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstMappingIterator *</type>
      <name>createConstIterator</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>a738035f30d7c365838469aa3eb7e7381</anchor>
      <arglist>(const Argument &amp;pos) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstMapping *</type>
      <name>constClone</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>ad8c0293ec56947b986802fcb636e42b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstMapping *</type>
      <name>getRefMapping</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>abcd3a9507ddf2e6e227fb0682f736b9a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::pair&lt; Dimension, Argument::const_iterator &gt;</type>
      <name>DimIteratorPair</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>afddf6a03d86de6f473b3b36e9523412e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::list&lt; ConstMapping * &gt;</type>
      <name>MappingSet</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>a633e23b7b9cc932171a9242d286f0970</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MappingSet</type>
      <name>mappings</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>a0709d9769788a41c2bb43dbb62aea751</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ConstMapping *</type>
      <name>refMapping</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>a86b5292b536c5392543dc355111b19e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>continueOutOfRange</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>a9fe7cdfd0278ebb79d419fe6d4073a8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Argument::mapped_type</type>
      <name>oorValue</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>aabd4c2441626a2cf4af7a727e78bedde</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Operator</type>
      <name>op</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>af39cd5ee8c6ffea095d07d919162ea55</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConcatConstMappingIterator</name>
    <filename>a00050.html</filename>
    <base>BaseFilteredIterator</base>
    <member kind="function">
      <type></type>
      <name>ConcatConstMappingIterator</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>ad12b11e0d0d30c51e75fefa7a31037fa</anchor>
      <arglist>(ConstMapping *baseMapping)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConcatConstMappingIterator</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>adf03ef18a146cf084b5c3d21f765b031</anchor>
      <arglist>(ConstMapping *baseMapping, const Argument &amp;pos)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ConstMapping *</type>
      <name>baseMapping</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>a0106385bdcdcc52dcb340dff388c7e86</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>ConcatConstMappingIterator</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>a5c2c32fabc3a7232486e94e3520132a2</anchor>
      <arglist>(const ConcatConstMappingIterator &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>ConcatConstMappingIterator &amp;</type>
      <name>operator=</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>ab3f61bd6cd76d188c25f899899ec84c6</anchor>
      <arglist>(const ConcatConstMappingIterator &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConnectionManager</name>
    <filename>a00052.html</filename>
    <base>BaseConnectionManager</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>calcInterfDist</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>abeb688210449aa6a62cb9cd76e5cfeaa</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConnectionManagerAccess</name>
    <filename>a00053.html</filename>
    <base>MiximBatteryAccess</base>
    <base protection="protected">AccessModuleWrap</base>
    <member kind="function">
      <type></type>
      <name>ConnectionManagerAccess</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>ac1280a1bba6dd53779bdc69a4cee62ae</anchor>
      <arglist>(unsigned sz)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>aad16a20e89c1415737abbebd2d2e4383</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveSignal</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a941b21fa937363875b42c0c930aaa58b</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, cObject *obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ChannelMobilityPtrType</type>
      <name>getMobilityModule</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a4cb3ab0227b20e7c783416a888daaa02</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static BaseConnectionManager *</type>
      <name>getConnectionManager</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a20fd2ed2864836dc4c46a95bb9c3437d</anchor>
      <arglist>(const cModule *nic)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>simtime_t</type>
      <name>calculatePropagationDelay</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a3b29e3e00f660a18c7afa75d129e0049</anchor>
      <arglist>(const NicEntry *nic)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendToChannel</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a103dd3abe8464c8857991089cbec78ed</anchor>
      <arglist>(cPacket *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const cModule *</type>
      <name>getNic</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>ab62c70bb62f89d8d986db102228b63b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>cModule *</type>
      <name>getNic</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a359724cad23974a0b9ae4715053bfeb6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>useSendDirect</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>aa59c873347eaa4bf6120100fc7752055</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BaseConnectionManager *</type>
      <name>cc</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a5a093670c3f1b4f28f3dfbe064616b1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>coreDebug</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a855d05134eb8b4b136aac71480d7a842</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>usePropagationDelay</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a9b270265a317f2271088e4fd237f36cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isRegistered</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>ace4348bc0a16695e7555d81064f81c5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const simsignalwrap_t</type>
      <name>mobilityStateChangedSignal</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a2f85f74312468d66a06367bdb769adfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>ConnectionManagerAccess</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>ab4120e130c86b7d586d8c5517da72c5b</anchor>
      <arglist>(const ConnectionManagerAccess &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>ConnectionManagerAccess &amp;</type>
      <name>operator=</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a388dec50b11a24e08f6bf76c65993a6d</anchor>
      <arglist>(const ConnectionManagerAccess &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>const ConstMapping</name>
    <filename>a00054.html</filename>
  </compound>
  <compound kind="class">
    <name>ConstantSimpleConstMapping</name>
    <filename>a00055.html</filename>
    <base>SimpleConstMapping</base>
    <member kind="function">
      <type></type>
      <name>ConstantSimpleConstMapping</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>ab15070ead8f2bf11b97432caece79c3f</anchor>
      <arglist>(const DimensionSet &amp;dims, argument_value_cref_t val)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstantSimpleConstMapping</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>aefcb7fda17307a6362adcab3c288be39</anchor>
      <arglist>(const DimensionSet &amp;dims, const Argument &amp;key, argument_value_cref_t val)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstantSimpleConstMapping</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>abd05667320c3bebe7d8e767507d41809</anchor>
      <arglist>(const ConstantSimpleConstMapping &amp;o)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual argument_value_t</type>
      <name>getValue</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>a64ad8ca116f9a3f0ea575954f43a6706</anchor>
      <arglist>(const Argument &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>argument_value_cref_t</type>
      <name>getValue</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>a3ef566da7c09d971a3f26689083056bc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>a63d0eab4f014a7d8094544c0dca5d7f7</anchor>
      <arglist>(argument_value_cref_t val)</arglist>
    </member>
    <member kind="function">
      <type>ConstMapping *</type>
      <name>constClone</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>a63f15a3fb6da788dbaaeb8b1ee5470f2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>argument_value_t</type>
      <name>value</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>aa62373ce847f05e4d13c97ca420f3f73</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConstDelayedMapping</name>
    <filename>a00056.html</filename>
    <base>BaseDelayedMapping&lt; const ConstMapping &gt;</base>
    <member kind="function">
      <type></type>
      <name>ConstDelayedMapping</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>a7a715735de69da24f3918d96e4706179</anchor>
      <arglist>(const ConstMapping *mapping, simtime_t_cref delay)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstMapping *</type>
      <name>constClone</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>ab03b6e6623b416997b4467b7e14dce69</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConstInterpolateableIterator</name>
    <filename>a00057.html</filename>
    <templarg>_Interpolator</templarg>
    <templarg>_IteratorType</templarg>
    <member kind="typedef">
      <type>_Interpolator</type>
      <name>interpolator_type</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a1ceb4238f825dc152217058c0c7dc001</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>interpolator_type::container_type</type>
      <name>container_type</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a50b68c37524eff1e40fc9b9977476e7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>interpolator_type::key_type</type>
      <name>key_type</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>ad73c5dcc647fa3b7a84763a954fe11bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>interpolator_type::key_cref_type</type>
      <name>key_cref_type</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a2c972215632186ddedcda88204012353</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>interpolator_type::mapped_type</type>
      <name>mapped_type</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a0d498cb8110907ecc04a5a9a005db9ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>interpolator_type::mapped_cref_type</type>
      <name>mapped_cref_type</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a5c3a2627837864de9aa91b7a8ba4c815</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>interpolator_type::pair_type</type>
      <name>pair_type</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a11cdbe76ac12b7479f1c4697131f6dd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>interpolator_type::iterator</type>
      <name>iterator</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a524823dbf762366cded5cfe2ccca2939</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>interpolator_type::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a7539b5f9b0b46a26a33d1f1c22845084</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>interpolator_type::comparator_type</type>
      <name>comparator_type</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a7de2ff003436372e26b57596da13b8c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>_IteratorType</type>
      <name>used_iterator</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>ad651c523db58df483cb6a3369406ef22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>interpolator_type::interpolated</type>
      <name>interpolated</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a5ed1c02edab5e7153ef4d29f26e57216</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstInterpolateableIterator</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>af7376c0555d5afa5e51e5fef70d32d2b</anchor>
      <arglist>(const used_iterator &amp;first, const used_iterator &amp;last, const interpolator_type &amp;intpl)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a4cbe300c6f575e24a8ab9ab269cac8ff</anchor>
      <arglist>(const ConstInterpolateableIterator &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>jumpTo</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>ad149b5c37b429ccc1fc5615c217cd3de</anchor>
      <arglist>(key_cref_type pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>jumpToBegin</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a812d4bd2ab7b419deb933b8c472e1912</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>iterateTo</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a0a190c448a5cfbcd3385c6ccd316542f</anchor>
      <arglist>(key_cref_type pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>aa9b9aaf1491ef6ef251bc7399aecdf52</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>key_type</type>
      <name>getNextPosition</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>aa545c5da980cbc9a5889ac6cf42d7b7e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>inRange</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a4eca971338ae67b5ee34503cbcf1f342</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasNext</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a4906a4e7a03086a28d108fc262faa969</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>interpolated</type>
      <name>getValue</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>afd052facfd07e1a139a6da76d129917e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>interpolated</type>
      <name>getNextValue</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>aca4c6576c12ffd03107960a356e76326</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>key_cref_type</type>
      <name>getPosition</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a2d8b162ab907fbc33e47db214f28518a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const interpolator_type &amp;</type>
      <name>getInterpolator</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a9e45b990b544290f7a0dd1a8155c4978</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>used_iterator</type>
      <name>first</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a3720bcb63a64de42e4b16cb86df2bb77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>used_iterator</type>
      <name>last</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a15720a496cb3f3942707583ef80db5a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>used_iterator</type>
      <name>right</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a4bb5e64387644bd21ca8345e15f5bcd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>key_type</type>
      <name>position</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a22d17fb7ce4b73648b28e62b34292382</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const interpolator_type &amp;</type>
      <name>interpolate</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>aac41169286738eeb6ef050a87eb1ced3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConstMapping</name>
    <filename>a00058.html</filename>
    <member kind="typedef">
      <type>Argument::mapped_type</type>
      <name>argument_value_t</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a5dac61c952f423e9a113ee90a4e0bdeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Argument::mapped_type_cref</type>
      <name>argument_value_cref_t</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a136fb6397efc9ba6a16235fa95339db9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>ConstMapping &amp;</type>
      <name>operator=</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a28a66ff19a5046d773d6f0c49f12353f</anchor>
      <arglist>(const ConstMapping &amp;copy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a473df8fa0aa441ca1adb356b17b1f59f</anchor>
      <arglist>(ConstMapping &amp;s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstMapping</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a7cfc5de32a0d03abfeb9b77fdcf7a413</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstMapping</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a9719bb482f7872e7cd205b62e718d1c2</anchor>
      <arglist>(const ConstMapping &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstMapping</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a4e057daa0a3726cafa70bac0e5393b26</anchor>
      <arglist>(const DimensionSet &amp;dimSet)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual argument_value_t</type>
      <name>getValue</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>afabbd15bb8f50e45901f99633d0a47c9</anchor>
      <arglist>(const Argument &amp;pos) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ConstMappingIterator *</type>
      <name>createConstIterator</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a5ff3a15fe6d536fa7a26a3fe1ff1b274</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ConstMappingIterator *</type>
      <name>createConstIterator</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a951552e2e7f48717ed79d540af538d73</anchor>
      <arglist>(const Argument &amp;pos) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ConstMapping *</type>
      <name>constClone</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a741e083fb18412a3d9cde7eac3dced10</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>argument_value_t</type>
      <name>operator[]</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a9b0ba6e7aaa108549dcd71069fefe199</anchor>
      <arglist>(const Argument &amp;pos) const </arglist>
    </member>
    <member kind="function">
      <type>const DimensionSet &amp;</type>
      <name>getDimensionSet</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>acc1559cf5741bec3aa6422e94c5b9cce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>stream &amp;</type>
      <name>print</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a526e8d5b948e9b2ce9d729e66b162e13</anchor>
      <arglist>(stream &amp;out, argument_value_cref_t lTimeScale=argument_value_t(1000), argument_value_cref_t lLeftColScale=Argument::MappedOne, const std::string &amp;sTableHead=std::string(&quot;o\\ms&quot;), const Dimension *const pOnlyDim=NULL) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DimensionSet</type>
      <name>dimensions</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a009539b72014b7bed96402a5c244fca5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>aedc3078350fcad21ac9c02d6f7245ad2</anchor>
      <arglist>(T v, unsigned int length) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a3fcd3636b4a21f86cccb0d56373aa5a8</anchor>
      <arglist>(simtime_t_cref v, unsigned int length) const </arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>ac01413f3aae147d0c6b9cfcf411b610f</anchor>
      <arglist>(std::ostream &amp;out, const ConstMapping &amp;rMapToPrint)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConstMappingIterator</name>
    <filename>a00059.html</filename>
    <member kind="typedef">
      <type>Argument::mapped_type</type>
      <name>argument_value_t</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>ae00163bcffb33a9448f7ffb33d654417</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Argument::mapped_type_cref</type>
      <name>argument_value_cref_t</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>a4e604f871cbb503b4d4f791067dc282f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstMappingIterator</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>a9b4d3e2619eb1760fffc33221c1c9d79</anchor>
      <arglist>(const ConstMappingIterator &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ConstMappingIterator &amp;</type>
      <name>operator=</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>a7518b144224ce8cacd2f2aae17501b5f</anchor>
      <arglist>(const ConstMappingIterator &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>a4cb323064796469812f479431b111627</anchor>
      <arglist>(ConstMappingIterator &amp;)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Argument &amp;</type>
      <name>getNextPosition</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>a1f4cae3b170754a76049b8e81b2e3c07</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>jumpTo</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>ae3cdbe2115d0e87af0da549b675f2bf8</anchor>
      <arglist>(const Argument &amp;pos)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>jumpToBegin</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>a6b6af19266855c21ce3e3449de3f0d6f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>iterateTo</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>a607d741e2d841265851a85670f247c46</anchor>
      <arglist>(const Argument &amp;pos)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>next</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>afdafa6870cd19b3d35674a7bc777585d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>inRange</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>a4a6348a453418da95978e570fec046fc</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>hasNext</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>ad4bac7233c154b7086c6124d2e21be49</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Argument &amp;</type>
      <name>getPosition</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>a047e853613d5a19ff34526d0cff8fcf9</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual argument_value_t</type>
      <name>getValue</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>ad4419c259e747867f003d07d62d4259f</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConstMappingIteratorWrapper</name>
    <filename>a00060.html</filename>
    <base>MappingIterator</base>
    <member kind="function">
      <type></type>
      <name>ConstMappingIteratorWrapper</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>a10f8c5f502b9cd83e9a6fa2d85195184</anchor>
      <arglist>(ConstMappingIterator *it)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValue</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>a21f0afa0d6ffa165911fe5a19cfd032c</anchor>
      <arglist>(argument_value_cref_t)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Argument &amp;</type>
      <name>getNextPosition</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>a603cbcad1aa33945132a3b8e2cfb769e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>jumpTo</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>a4864dc39a40cada6f4abde4fc6eea3b7</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>jumpToBegin</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>a6e3de2e2477083e963498675ed8b78b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>iterateTo</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>ab96b7f5eca4759cdeaad879512340b93</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>next</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>a01e885f408515be1170ce8af57de217b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>inRange</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>a4a4bb9cfd56c7013bf5bd4347fef3293</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasNext</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>ab60f4f00ba7175122fe6afef43b7cfbc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Argument &amp;</type>
      <name>getPosition</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>aed031f6f66b8c703523fc41b0a7c2107</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual argument_value_t</type>
      <name>getValue</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>a755c87e1eb464724fcc9e5908d25cfac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ConstMappingIterator *const</type>
      <name>iterator</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>af2d62428852c6cefb80bd08c3aa565ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>ConstMappingIteratorWrapper</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>a571c5696de74f8b7f362e474a823b17a</anchor>
      <arglist>(const ConstMappingIteratorWrapper &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>ConstMappingIteratorWrapper &amp;</type>
      <name>operator=</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>ad176a83e7a1d1e5a1dbb8485d2240f6f</anchor>
      <arglist>(const ConstMappingIteratorWrapper &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConstMappingWrapper</name>
    <filename>a00061.html</filename>
    <base>Mapping</base>
    <member kind="function">
      <type></type>
      <name>ConstMappingWrapper</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>ae38ced1acdddd0231959fd66219b7bf2</anchor>
      <arglist>(const ConstMapping *m)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstMappingWrapper</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>af7a80b0695d9d207c2dede99ddabfb71</anchor>
      <arglist>(const ConstMappingWrapper &amp;o)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValue</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>ae546ec9047dae116ef51b5919cf4621a</anchor>
      <arglist>(const Argument &amp;, argument_value_cref_t)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MappingIterator *</type>
      <name>createIterator</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>ab5c7771bd13f8cdb93f5dce837fdffa1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MappingIterator *</type>
      <name>createIterator</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>ab6de270ec2325131f99174860f396025</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual argument_value_t</type>
      <name>getValue</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a6706d0676194d24aa60059d93c8cbc44</anchor>
      <arglist>(const Argument &amp;pos) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstMappingIterator *</type>
      <name>createConstIterator</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a6a2c09d666b9e986798d0be48add4cdd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstMappingIterator *</type>
      <name>createConstIterator</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a648971050f302ee9afd31ebd51d54698</anchor>
      <arglist>(const Argument &amp;pos) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstMapping *</type>
      <name>constClone</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a5290d7c6126897a26e810da626d115ec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Mapping *</type>
      <name>clone</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a17b06a78a2258990893fddf79d9268a0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ConstMapping *</type>
      <name>mapping</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>aa83200fa10c919296e8af734a71d282e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>ConstMappingWrapper &amp;</type>
      <name>operator=</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a1e229ad66ab26ae226c02811500c8e32</anchor>
      <arglist>(const ConstMappingWrapper &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConstSpeedMobility</name>
    <filename>a00062.html</filename>
    <base>LineSegmentsMobilityBase</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a526493cba2a06a0c1df36bc1f190ac1c</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setTargetPosition</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>ae1e2838d4bae6d0821054a5e6c2abb4a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>speed</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>ac5095e1248f9a11346940ce957c0b401</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>typename Linear::container_type</name>
    <filename>a00063.html</filename>
  </compound>
  <compound kind="class">
    <name>typename Interpolator::container_type</name>
    <filename>a00064.html</filename>
  </compound>
  <compound kind="class">
    <name>Coord</name>
    <filename>a00065.html</filename>
    <member kind="function">
      <type></type>
      <name>Coord</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>add896c4f3fb15b4ad762b5270855345c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Coord</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>a93d47461a77c401891842045ff712f15</anchor>
      <arglist>(double x, double y, double z=0.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Coord</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>aaa9f1d0acf5250162e417b61eb12a006</anchor>
      <arglist>(const Coord &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>info</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>a86994bfa7096155d951abb03dcf30bf1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Coord &amp;</type>
      <name>operator*=</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>a41a7f41a153a3fdbed9dea051f0ae559</anchor>
      <arglist>(double f)</arglist>
    </member>
    <member kind="function">
      <type>Coord &amp;</type>
      <name>operator/=</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>a378973a28985ee7cb441eaf2e70ed378</anchor>
      <arglist>(double f)</arglist>
    </member>
    <member kind="function">
      <type>Coord &amp;</type>
      <name>operator+=</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>a07c952bb96124ea08eeff7bba3de6072</anchor>
      <arglist>(const Coord &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>Coord &amp;</type>
      <name>operator=</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>adda0e91b0e155a08a50e733dbfdb8837</anchor>
      <arglist>(const Coord &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Coord &amp;</type>
      <name>operator-=</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>a2cafece343439d415c4557167556ba69</anchor>
      <arglist>(const Coord &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>ab6a7bfcc5c55e5d8edbc7c0cb5a11626</anchor>
      <arglist>(const Coord &amp;a) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sqrdist</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>a9245e5acb794d95128e191e6faef99d4</anchor>
      <arglist>(const Coord &amp;a) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sqrTorusDist</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>aaf6119bf8bc9953d561729314de8ed5e</anchor>
      <arglist>(const Coord &amp;b, const Coord &amp;size) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>squareLength</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>a278c018d6de54a020c39b3b1afaec50e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>length</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>acc536671c07e1af44e6ad9676a6c39ad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInBoundary</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>a7a42e29d7a15ed0b53e47137549e00a6</anchor>
      <arglist>(const Coord &amp;lowerBound, const Coord &amp;upperBound) const </arglist>
    </member>
    <member kind="function">
      <type>Coord</type>
      <name>min</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>a0b27150571dfb315bea3e650ea2956a0</anchor>
      <arglist>(const Coord &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>Coord</type>
      <name>max</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>ac5a32e0e7a527085f63b7b3476ae47a0</anchor>
      <arglist>(const Coord &amp;a)</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>x</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>a0172a22ee75843a96e3a84ebc25f3de7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>y</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>af6e543e0522076e717bae53102655b87</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>z</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>a2bf056108a79437171f18490afbdce2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Coord</type>
      <name>ZERO</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>a2d291cbb8e58af4ce8c68e9c8671b5d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>a93c1d69ee1ef5c0be5f31e9b55fafa84</anchor>
      <arglist>(const Coord &amp;other)</arglist>
    </member>
    <member kind="friend">
      <type>friend Coord</type>
      <name>operator+</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>a4eb976e0a2def05ecb6464bd170b5fa9</anchor>
      <arglist>(const Coord &amp;a, const Coord &amp;b)</arglist>
    </member>
    <member kind="friend">
      <type>friend Coord</type>
      <name>operator-</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>a0a956e1210813652ce2caa7529b3e0be</anchor>
      <arglist>(const Coord &amp;a, const Coord &amp;b)</arglist>
    </member>
    <member kind="friend">
      <type>friend Coord</type>
      <name>operator*</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>a432afd497adcff7b20ca23af611ec919</anchor>
      <arglist>(const Coord &amp;a, double f)</arglist>
    </member>
    <member kind="friend">
      <type>friend Coord</type>
      <name>operator/</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>a310db4e85a0b20ec14725f49aae08cc3</anchor>
      <arglist>(const Coord &amp;a, double f)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>a2dc488cbfa8e8256dfc22b4916b9ef9b</anchor>
      <arglist>(const Coord &amp;a, const Coord &amp;b)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>a321e8d56735047b9e49f869fd8f23d3e</anchor>
      <arglist>(const Coord &amp;a, const Coord &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csma</name>
    <filename>a00067.html</filename>
    <base>BaseMacLayer</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a24e7a48bd1d9036139c75b558ade4161</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a5820325a7d06db8ff3cc3caa25c2eec4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerMsg</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>afde05c6a829f672b556959acb26b0098</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUpperMsg</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>ad85c18d90e41eb2074593a44b64ab855</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a95ef1a0e43d2f5d5fc9a4afb8754bc9e</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerControl</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a168710b3b7dbb234bfa702d6ca10dfe3</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="enumeration">
      <name>t_mac_states</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a1f50989b69d70d63619ace8d8f9a0165</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>t_mac_timer</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>ab33d8c1261a8e13f526a63364232a19e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>t_mac_event</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>abd06e4672cf1a3553d72011f458f78a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>t_csma_frame_types</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>ae008d14977310cab31c835efffcb02e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>backoff_methods</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>ad6c37215e83748e9270a9772727f021d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONSTANT</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>ad6c37215e83748e9270a9772727f021da7ff1f1cf6a8bc1239290f360074513c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINEAR</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>ad6c37215e83748e9270a9772727f021da990e04ecf52a42619a49d0161f4f3421</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPONENTIAL</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>ad6c37215e83748e9270a9772727f021dab16652c86ace580cf5279d6c1538f549</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::list&lt; macpkt_ptr_t &gt;</type>
      <name>MacQueue</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a79da8cd3daf19141aac1706cedbc1962</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>fsmError</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a71d4cce10b4ad207dff72a2dc899c763</anchor>
      <arglist>(t_mac_event event, cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>executeMac</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a23b4dba9c913ac458f38091b2a7de71d</anchor>
      <arglist>(t_mac_event event, cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateStatusIdle</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a74e6f7f3cfe6fc22a20395068dc5854b</anchor>
      <arglist>(t_mac_event event, cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateStatusBackoff</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a846e73980dbac87e941d4067bfe7e320</anchor>
      <arglist>(t_mac_event event, cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateStatusCCA</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a659ab8373554bc363561653873612046</anchor>
      <arglist>(t_mac_event event, cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateStatusTransmitFrame</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>ab30d80ba0fac748a7506b9d3f53d2f43</anchor>
      <arglist>(t_mac_event event, cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateStatusWaitAck</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a700f2c0a1a9674a839eeb7dd8293f8b3</anchor>
      <arglist>(t_mac_event event, cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateStatusSIFS</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a2a6f92b0cd5938f1be719482512f2dd1</anchor>
      <arglist>(t_mac_event event, cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateStatusTransmitAck</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a9129584efe51093888018a0571e94593</anchor>
      <arglist>(t_mac_event event, cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateStatusNotIdle</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>ae4bda74e9b02b7ad58f495014e295bf6</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>manageQueue</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>ab91e92b51bec42503481463ed363c2ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateMacState</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>aaf107192d5d0acf1ff97c5824e6f8084</anchor>
      <arglist>(t_mac_states newMacState)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>attachSignal</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>adbb1cf93b9df290bac431dba44182c1d</anchor>
      <arglist>(macpkt_ptr_t mac, simtime_t_cref startTime)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>manageMissingAck</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>ad300d103185ad00ddae38b8cc471ead6</anchor>
      <arglist>(t_mac_event event, cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>startTimer</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>ae31eb7f8a6f2a44081f63fe51857cd19</anchor>
      <arglist>(t_mac_timer timer)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>scheduleBackoff</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a3267a23dff0a5bcc0291a0f5554b7e48</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual cPacket *</type>
      <name>decapsMsg</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>aedcaefc83f850c1ca35836cb223b412e</anchor>
      <arglist>(macpkt_ptr_t macPkt)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>stats</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a1b4834898677ae70f70e336a5af6bea4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>trace</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>af0459af5600cded297d8baaebf93270a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>t_mac_states</type>
      <name>macState</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a412a3b42a3212ab8a5dd1fcca2976d75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>t_mac_status</type>
      <name>status</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a77ff57b2f2a464a2c6646a74dd7435bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>sifs</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a4c4485a6c261026fbb39eee038c61d35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>macAckWaitDuration</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>ac9f2b5914cfbdd9763531913f0756eb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>transmissionAttemptInterruptedByRx</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>ac818d4052c62aa85c11c5a89aba20866</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>ccaDetectionTime</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>ae54073ef32d73822112cbc3ccfd5cd20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>rxSetupTime</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a2de1e148306253a3b7a33ae2c47201dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>aTurnaroundTime</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>ac820e37e2f86d7131a66aa6d1636cd69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>macMaxCSMABackoffs</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a8651bf006f28d69523c43d2aea774f7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>macMaxFrameRetries</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>af7b3c7c2d0028579026dd17a267d4a72</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>aUnitBackoffPeriod</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a63f8c5595546dedb2d2f779b2f88fc7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>useMACAcks</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a51f34d63f063978e4077e290ed96579d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>backoff_methods</type>
      <name>backoffMethod</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>af9dc9268929f470a2b1dc196f4dd1ad0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>macMinBE</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>aec2a85f71170231d175a7e5f453488bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>macMaxBE</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a07d8675d0999963f22caa47b90feee7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>initialCW</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>aa2d96f20753eff74aa1b9b3251523d24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>txPower</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a45229ade2d3472af4c427384443fbd9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>NB</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>aa01f7215a8fccd726da22a0721994580</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MacQueue</type>
      <name>macQueue</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>ac75e73d1a95881bcdcb125f13876e996</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>queueLength</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a6c5dda6e483befcd9166dd2d1c099ff1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>txAttempts</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a6249492db8b5f2240aefd33ba1bbf04e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>bitrate</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>af881ff622dc82a06fc14008d67a0d084</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DroppedPacket</type>
      <name>droppedPacket</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>ab8c7954aa7b5dc31268b3673a358e9f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>nicId</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a384d9dce68d3db1b258369095e5b12a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>ackLength</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a3fba7040140a46c800ea94560fe0113a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>macpkt_ptr_t</type>
      <name>ackMessage</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>ab36cfe2a1e2cc3a9e9d438c717c2c81c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; LAddress::L2Type, unsigned long &gt;</type>
      <name>SeqNrParent</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>af74178ef86747295323916261137aa50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; LAddress::L2Type, unsigned long &gt;</type>
      <name>SeqNrChild</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a05b34fcf68ecdf0a79c0bb62c51fcbfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>nbTxFrames</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>af02666990b6829d641052aa586985647</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>nbRxFrames</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>aa3aefb9f933191568678e1eceea44b94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>nbMissedAcks</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a2327ecf7f33f21a0636ecb9e503fe51c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>nbRecvdAcks</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a8f39332bf755daf4831639d0691103eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>nbDroppedFrames</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>af153b698e40a2ff960726d2484ce3064</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>nbTxAcks</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a770580278f2fc81aa2b93a57f956f1d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>nbDuplicates</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>aa34632eec8c573fa05868eaed0026028</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>nbBackoffs</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a287036b883dda56bf7cc2c1de600525a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>backoffValues</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a43a9a6dcb52ab4303d6362a5ed6a0084</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>backoffTimer</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a2b7fda303bef70518f6991bdc2dbbc26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>ccaTimer</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a51882c996d78112cd1af01ff89e50f81</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>sifsTimer</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a47cf3021810d0ae2842eb2f0889cd5b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>rxAckTimer</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a98eb459c7e4871dc14864bce8c9ea0e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>csma</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a038a379e63dda186c937524aca6d02d3</anchor>
      <arglist>(const csma &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>csma &amp;</type>
      <name>operator=</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a582f528dcdac17083332fd6ee1799195</anchor>
      <arglist>(const csma &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CSMA802154</name>
    <filename>a00068.html</filename>
    <base>csma</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>abbb7175c6f28345ca29c3ca6f98732fc</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual cPacket *</type>
      <name>decapsMsg</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>ab2174202ba00f0731fc9924597aba925</anchor>
      <arglist>(macpkt_ptr_t macPkt)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerControl</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a0f0003b6596ef17341a93f06397d741e</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CSMAMacLayer</name>
    <filename>a00069.html</filename>
    <base>BaseMacLayer</base>
    <member kind="enumeration">
      <name>States</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>aa504ef94f12cc702c82a81f5f0654913</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RX</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>aa504ef94f12cc702c82a81f5f0654913ab8f2c7ef825f0c569512139f5482e631</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CCA</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>aa504ef94f12cc702c82a81f5f0654913acd80830b40d6cc8615ea4ff537cb37ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TX</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>aa504ef94f12cc702c82a81f5f0654913a18461bd2358689c90c3c5cade629e0b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::list&lt; cPacket * &gt;</type>
      <name>MacQueue</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>af397ee30d94486721632bbcdad8274d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a660262c629f33b00401249d3fdac49be</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>aeaffa0655b4e87224a9a2f09b96805d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerMsg</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a83911b5673de047bcfc3c9b0a719ff15</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUpperMsg</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a06c96c060afdff5c0f348b5ebef5c54d</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a254a29c1cc1f0292039d57c1d189cda3</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerControl</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a2eb12cedf0b4b5e6fda8bd6666186cb6</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>scheduleBackoff</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>aa4ace66cbd53164dc27f4fba70dd60b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual macpkt_ptr_t</type>
      <name>encapsMsg</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a89de5fd0b7f0d1420c1d4e9118c00ef3</anchor>
      <arglist>(cPacket *pkt)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>States</type>
      <name>macState</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>aa78817d8e3bbf7850e5d84a6377ea907</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>slotDuration</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a420bec99b62f029c75996930bc5cb56f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>difs</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a5a0fde63ac12cccfdb98bfe6314ce46d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MacQueue</type>
      <name>macQueue</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a9869bd7667eacdb3a9c5f8ecb0c3ed19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned</type>
      <name>queueLength</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a27628021750dc0e8cf651382663276b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>backoffTimer</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a946e29bb8fead33566797a7062649a1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>minorMsg</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>af06855c96a26dbe77937062bead7f82c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned</type>
      <name>txAttempts</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a6c9b1b0f5eeb45db611633ca986f537b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned</type>
      <name>maxTxAttempts</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>ae3aa6dae3903cabacbcafe783ef33d91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>bitrate</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a70ae938b76fa8fe65d97b0b511767894</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>txPower</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a619cc05568e8ebef57ff9c551cd311d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned</type>
      <name>initialCW</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a8ec2aea0983e2149d3c7d1c06637dd70</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>nbBackoffs</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>ae768a2dadff7e2e41a5ecae37bcedc2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>backoffValues</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>ace6a061501b4d12d2380a458ea253ef5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned long</type>
      <name>nbTxFrames</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a4e15b3f78a53218321cbc408f1cb600b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CSMAMacLayer</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a00a8c8316ff1b37292d80b7ae4e3cb1c</anchor>
      <arglist>(const CSMAMacLayer &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>CSMAMacLayer &amp;</type>
      <name>operator=</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a5e45c114db302a9337ea13ca378cd98a</anchor>
      <arglist>(const CSMAMacLayer &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Decider</name>
    <filename>a00070.html</filename>
    <member kind="typedef">
      <type>DeciderToPhyInterface::airframe_ptr_t</type>
      <name>airframe_ptr_t</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>a8532046253d31801ffe4bc56b0d70850</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Decider</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>a771545ad005ad69bef78b53fa831a7e2</anchor>
      <arglist>(DeciderToPhyInterface *phy)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>initFromMap</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>ae19a201633e5b2bf2d545921049b4f26</anchor>
      <arglist>(const ParameterMap &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>processSignal</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>a130dabc37fec0d579d010de251995558</anchor>
      <arglist>(airframe_ptr_t frame)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>cancelProcessSignal</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>ad4d3a23a53e012607b5ce44865857c2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ChannelState</type>
      <name>getChannelState</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>aa9f0dcd955639fa2c16233f4654a82bc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>handleChannelSenseRequest</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>a93548ff29f4d880ed488785509dd4dd9</anchor>
      <arglist>(ChannelSenseRequest *request)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>a6e4b28a733a18fddec77bb6a3f179be5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>channelChanged</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>ae4da9f61748737c85000dd64e07b66a0</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const_simtime_t</type>
      <name>notAgain</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>a7fbb5a5f14ae118e40d7db1903be6d51</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>DeciderToPhyInterface::AirFrameVector</type>
      <name>AirFrameVector</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>a6baab300e0bec90320dfe956c2d15a57</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>DeciderToPhyInterface::ParameterMap</type>
      <name>ParameterMap</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>a7f3ee545f2ae8b0d8d1814c98917f5b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DeciderToPhyInterface *const</type>
      <name>phy</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>ac0f72556cb799d883b4219cab58320bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>Decider</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>aa17a9e339525c92d6e4139872c037016</anchor>
      <arglist>(const Decider &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Decider &amp;</type>
      <name>operator=</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>a301214aaf9e08d83fd4a060e72c10488</anchor>
      <arglist>(const Decider &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Decider80211</name>
    <filename>a00071.html</filename>
    <base>BaseDecider</base>
    <member kind="enumeration">
      <name>Decider80211ControlKinds</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>aadf94ce46e3edca3fa4d93150f72f4ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COLLISION</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>aadf94ce46e3edca3fa4d93150f72f4aeae5c2edad30720b7e527373b28bd4e1ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LAST_DECIDER_80211_CONTROL_KIND</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>aadf94ce46e3edca3fa4d93150f72f4aea397fbae93de43832a0bb2bc1bf7003a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Decider80211</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>a01af5857e545463912b90aa029a77363</anchor>
      <arglist>(DeciderToPhyInterface *phy, double sensitivity, int myIndex, bool debug)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>initFromMap</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>a64888f8d99455e640d22cdcdeae09a98</anchor>
      <arglist>(const ParameterMap &amp;params)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Argument</type>
      <name>getLowerBandFrequency</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>a59da14e36530b3a420e960a2d517e5df</anchor>
      <arglist>(simtime_t_cref pTimePoint) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Argument</type>
      <name>getUpperBandFrequency</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>acdb12f5675ea4208432cc56aab3f2aec</anchor>
      <arglist>(simtime_t_cref pTimePoint) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual DeciderResult *</type>
      <name>createResult</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>ae8d8435cae6ef92cc9bf8008e0bb56e4</anchor>
      <arglist>(const airframe_ptr_t frame) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>getFrameReceivingPower</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>a81e91e9aa6db0ebad8d19ae8b3bc037a</anchor>
      <arglist>(airframe_ptr_t frame) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>packetOk</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>abf38efc5fc1fe80116c5294ada09c97d</anchor>
      <arglist>(double snirMin, int lengthMPDU, double bitrate) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual channel_sense_rssi_t</type>
      <name>calcChannelSenseRSSI</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>a0be01ad3cb9198b895cc7a0424a26609</anchor>
      <arglist>(simtime_t_cref start, simtime_t_cref end) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>snrThreshold</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>a252eace2ccbe59484cd209be494a3983</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>centerFrequency</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>a15af6d061ab83d73474b6b94684707b6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Decider80211Battery</name>
    <filename>a00072.html</filename>
    <base>Decider80211</base>
    <member kind="function">
      <type></type>
      <name>Decider80211Battery</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a14e88f3482c4567a60f6555781478965</anchor>
      <arglist>(DeciderToPhyInterface *phy, double sensitivity, int myIndex, bool debug)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>initFromMap</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a0326c17f4fcbd636d61d0bafc314bb84</anchor>
      <arglist>(const ParameterMap &amp;params)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>channelStateChanged</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a6de7b8cd714e30cfdd2126c8b5c1ca59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="enumeration">
      <name>Activities</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a63de3b8b20a544610515987d65c2e534</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>decodingCurrentDelta</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a1467ebe1e3bff6c84e06fa026695e1f1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Decider80211MultiChannel</name>
    <filename>a00073.html</filename>
    <base>Decider80211Battery</base>
    <member kind="function">
      <type></type>
      <name>Decider80211MultiChannel</name>
      <anchorfile>a00073.html</anchorfile>
      <anchor>a78bc41cd0231c95845f66bf8ea0ecad9</anchor>
      <arglist>(DeciderToPhyInterface *phy, double sensitivity, int myIndex, bool debug)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>channelChanged</name>
      <anchorfile>a00073.html</anchorfile>
      <anchor>ab688642bf38bd6fe6e3a2cc82c48f4d6</anchor>
      <arglist>(int newChannel)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual DeciderResult *</type>
      <name>createResult</name>
      <anchorfile>a00073.html</anchorfile>
      <anchor>a43d8e040f2971e4793878b19ca614d0f</anchor>
      <arglist>(const airframe_ptr_t frame) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Decider802154Narrow</name>
    <filename>a00074.html</filename>
    <base>BaseDecider</base>
    <member kind="function">
      <type></type>
      <name>Decider802154Narrow</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a0f0783dd408329b1ffc7385b99678af2</anchor>
      <arglist>(DeciderToPhyInterface *phy, double sensitivity, int myIndex, bool debug)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>initFromMap</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a3c11e0b3867c5e98cfa2dda0f53a2a7e</anchor>
      <arglist>(const ParameterMap &amp;params)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>n_choose_k</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a9064e64a17723a91f278fa70b63b1a2f</anchor>
      <arglist>(int n, int k)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual eSignalState</type>
      <name>getNextSignalState</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a122afffb9bc9be41d382a81a5b222603</anchor>
      <arglist>(eSignalState CurState) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>processSignalHeader</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a95c51ba6f01ba9055d0c91200d749d44</anchor>
      <arglist>(airframe_ptr_t frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual DeciderResult *</type>
      <name>createResult</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a0543e527dd0cad7b247b0fd0d55e038a</anchor>
      <arglist>(const airframe_ptr_t frame) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>getBERFromSNR</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a319ea24abec96636367b4d006fbf68d6</anchor>
      <arglist>(double snr) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>syncOnSFD</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>ae21d12f527d54c878e1f291ed4000f65</anchor>
      <arglist>(airframe_ptr_t frame) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>evalBER</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a38caeb19e2307c51882418666bbdf63e</anchor>
      <arglist>(airframe_ptr_t frame) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>sfdLength</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>ade4807869cec17ce6b03c500c1dc3670</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>BER_LOWER_BOUND</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a698238eb8a43edf264671ba779a8d7ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>modulation</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>ad8fd46766da41740d657b82f7f55cffe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>snirDropped</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a16aeca5b7582880d749da898cb262b5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>snirReceived</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>ac91b420188aaaed238a031fe8e86ac94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>snrlog</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a4080fb55ed0c343ab361117f1534b645</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>berlog</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a065631e945194ba68f05fbd9fcfcc308</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>recordStats</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a6bc4bcf0588398a7a4ad69a90992f292</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DeciderResult</name>
    <filename>a00075.html</filename>
    <member kind="function">
      <type></type>
      <name>DeciderResult</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a86937859a140dbe670d6fa3a2f6f839a</anchor>
      <arglist>(bool isCorrect=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isSignalCorrect</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>aa0ff5bc718c64668cb1ce09c2c7dba80</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isCorrect</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a73068fc2669c331401e00fd985ced574</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DeciderResult80211</name>
    <filename>a00076.html</filename>
    <base>DeciderResult</base>
    <member kind="function">
      <type></type>
      <name>DeciderResult80211</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>a67b7eb5cb3ddad6136840f6c42399a4a</anchor>
      <arglist>(bool isCorrect, double bitrate, double snr)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getBitrate</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>a514a242a3b67f14f7536b6d59e26a7ce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getSnr</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>a2a5d1c65094164e0fad38927a14a4fb2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>bitrate</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>ab80f1803479db0321ff8532c9bed815e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>snr</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>a1fe1171bdbc17bfca48bcf700472375d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DeciderResult802154Narrow</name>
    <filename>a00077.html</filename>
    <base>DeciderResult</base>
    <member kind="function">
      <type></type>
      <name>DeciderResult802154Narrow</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>abd971fe5b5a181f68047941686bcfdd3</anchor>
      <arglist>(bool isCorrect, double bitrate, double snr, double ber, double rssi, double errProbMax)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getBitrate</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a1ba6154df76895c4414fa837ff9ad067</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getSnr</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>aa0b0120b1b4074721eedafe599796848</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getBER</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>aa30be9038f1da2e0e56527b6b307d1ff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRSSI</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a4f0b52a07c37da3fdbcd44cc20f7cca1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMaxErrorProbability</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>ae5286a4d334187f29ecb26bc7fe06114</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>bitrate</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a33d940451d172f13efaebc622e94933e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>snr</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a6310b2d4f6b4cfcb5acd3b3449eb971f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>ber</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a6a28dc7eb983c533f652536d3b1a3db1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>rssi</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a6c4f597f8ced8ecd40eebe4e47b2c110</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>maxErrProb</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>ad13218d610503a1a148ac291579a2200</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DeciderResultUWBIR</name>
    <filename>a00078.html</filename>
    <base>DeciderResult</base>
    <member kind="function">
      <type></type>
      <name>DeciderResultUWBIR</name>
      <anchorfile>a00078.html</anchorfile>
      <anchor>a4315cd551cb6bfbbed4b32f4574e4777</anchor>
      <arglist>(bool isCorrect, std::vector&lt; bool &gt; *_decodedBits, double snr)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; bool &gt; *</type>
      <name>getDecodedBits</name>
      <anchorfile>a00078.html</anchorfile>
      <anchor>aa897cebc6f79a6f85c92d1691b18ba07</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getSNR</name>
      <anchorfile>a00078.html</anchorfile>
      <anchor>a8f12ba192d428939858b48289dc40c60</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>DeciderResultUWBIR</name>
      <anchorfile>a00078.html</anchorfile>
      <anchor>adf052a15ea9a0c008129be277406b3f8</anchor>
      <arglist>(const DeciderResultUWBIR &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>DeciderResultUWBIR &amp;</type>
      <name>operator=</name>
      <anchorfile>a00078.html</anchorfile>
      <anchor>a44a0f57082b46f23ab3bd1577de7df13</anchor>
      <arglist>(const DeciderResultUWBIR &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; bool &gt; *</type>
      <name>decodedBits</name>
      <anchorfile>a00078.html</anchorfile>
      <anchor>a443f7f4796bdb9b1182dad78e5efa690</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>snr</name>
      <anchorfile>a00078.html</anchorfile>
      <anchor>ac8675d2299f49ad3793227ef4681bd6a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DeciderToPhyInterface</name>
    <filename>a00079.html</filename>
    <member kind="typedef">
      <type>MiximAirFrame</type>
      <name>airframe_t</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>a150a9a4fc2b6a958fabf082ea7fbb510</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>airframe_t *</type>
      <name>airframe_ptr_t</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>a77b2e121680f32d5882fdd8dd9bf2ca1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; airframe_ptr_t &gt;</type>
      <name>AirFrameVector</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>a13e15d0d80017e55821963b3b4a6cf55</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; std::string, cMsgPar &gt;</type>
      <name>ParameterMap</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>a37995e7f41efc2f95b081653ca01b482</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getChannelInfo</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>a304e09a4309820bc45450f8a5fcfcb34</anchor>
      <arglist>(simtime_t_cref from, simtime_t_cref to, AirFrameVector &amp;out) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ConstMapping *</type>
      <name>getThermalNoise</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>a2c55926187883df5bc322c947d317534</anchor>
      <arglist>(simtime_t_cref from, simtime_t_cref to)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>sendControlMsgToMac</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>a319e413b963f03ff218b0d0024fb66b9</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>sendUp</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>ad81919dcafb2d568303e9ed362dafd93</anchor>
      <arglist>(airframe_ptr_t packet, DeciderResult *result)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual simtime_t</type>
      <name>getSimTime</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>afdcd74839d4a7c6ea34062c8e409220d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>cancelScheduledMessage</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>af85151048dba05ec27e378000fd95403</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>rescheduleMessage</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>a223fb24be9268abba32e90181fa248b9</anchor>
      <arglist>(cMessage *msg, simtime_t_cref t)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>drawCurrent</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>a1ee7d31b5bf0cda9e543ac91b3aaecc5</anchor>
      <arglist>(double amount, int activity)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>recordScalar</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>a9183eb9c635a185f18da631f2d2d9f1c</anchor>
      <arglist>(const char *name, double value, const char *unit=NULL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getCurrentRadioChannel</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>a5c8df09fc0711587b07e2ac5d8412554</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNbRadioChannels</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>ae6cc727e6364c8a55fb735d18f93faa8</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isRadioInRX</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>a7832acf422e9ae79fbf91af927ca9e44</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual long</type>
      <name>getPhyHeaderLength</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>a7579990df34650e82125a1b91105ae15</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DeciderUWBIRED</name>
    <filename>a00080.html</filename>
    <base>BaseDecider</base>
    <member kind="enumeration">
      <name>UWBIRED_CTRL_KIND</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>aea537e08fe1735faa06ae4f26ee30d9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DeciderUWBIRED</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a67c3982d6fb1d23d3e7ab24ac47b5c96</anchor>
      <arglist>(DeciderToPhyInterface *phy, double sensitivity, int myIndex, bool debug)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>initFromMap</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a544bf3b2eecdf476feceed30bb6e4f72</anchor>
      <arglist>(const ParameterMap &amp;params)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getAvgThreshold</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a89d9bc072325f61bf90cdbe1b5f0eacd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>cancelProcessSignal</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a77df8526aff34e04d52f35b3113065e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a2e918d4b8af6b850b52437f40eefc55a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ChannelState</type>
      <name>getChannelState</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>afa82a8d2406cc58c21057561bc7af138</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>getNoiseValue</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>aa30cba820c929bb70124ca98d20a9af0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const simsignalwrap_t</type>
      <name>catUWBIRPacketSignal</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a1ea6df6903891318b6d15881f1908984</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>noiseVariance</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>aa00ea1df1692da3497bb3815da574d0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>peakPulsePower</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>add289afbae9259165ff366f45fb045f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; Signal *, int &gt;</type>
      <name>tSignalMap</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a652dcb740180e4ddbf7f774abfae5214</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ConcatConstMapping&lt; std::multiplies&lt; double &gt; &gt;</type>
      <name>MultipliedMapping</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a8e994d0155901d5d0819803c671b5fc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual eSignalState</type>
      <name>getNextSignalState</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a8f260e182096aa6e810512b06046af35</anchor>
      <arglist>(eSignalState CurState) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>getNextSignalHandleTime</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a675e00e69e4b9627552bbd8cc2da4cd5</anchor>
      <arglist>(const airframe_ptr_t frame) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>processSignalHeader</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>abe90eb371a8c63e71b6e550c93994b75</anchor>
      <arglist>(airframe_ptr_t frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual DeciderResult *</type>
      <name>createResult</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>ac3ab3f2532249d7784907f0b3cb601a6</anchor>
      <arglist>(const airframe_ptr_t frame) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::pair&lt; bool, double &gt;</type>
      <name>decodePacket</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a746aaa18a8eb887d62ba77eaa4880189</anchor>
      <arglist>(const airframe_ptr_t frame, std::vector&lt; bool &gt; *receivedBits, const IEEE802154A::config &amp;cfg) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>attemptSync</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>aa1226a47780904d237702cf95059de53</anchor>
      <arglist>(const airframe_ptr_t frame)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static std::pair&lt; double, double &gt;</type>
      <name>integrateWindow</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>aab080bd1069c9e573ba68a5ea51fd97e</anchor>
      <arglist>(int symbol, simtime_t_cref now, simtime_t_cref burst, const AirFrameVector &amp;airFrameVector, const ConstMapping *const signalPower, const airframe_ptr_t frame, const IEEE802154A::config &amp;cfg)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>syncThreshold</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a02ba8c4f4a1492b5e7332acbb168a1bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>syncAlwaysSucceeds</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a02efd67a817853ec274209ae0f10fea6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>channelSensing</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a0d79510e7db251e80820263772666198</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>synced</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a57476e093cbf998d82eafd2df77f2d84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>alwaysFailOnDataInterference</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a4d684c8f8eabbff3b6b58715d264d8a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>UWBIRPacket</type>
      <name>packet</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a322f62e224da879b0a67b38f629e6d76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>receivedPulses</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a8145084e8d57ff15e23629064e23d278</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>syncThresholds</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a479acc9997a81e432aab171b3343ae3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PhyLayerUWBIR *</type>
      <name>uwbiface</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a1ec2196fbffb4ca888f04a98a4b4164a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>nbCancelReceptions</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>aa90bb4ac347cda368b0d23deaa4db785</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>nbFinishTrackingFrames</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a7bb87516be12602830523baa4cdaa838</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>DeciderUWBIRED</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>af4a8a4d958e6ea73f3215bfdbdc20f36</anchor>
      <arglist>(const DeciderUWBIRED &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>DeciderUWBIRED &amp;</type>
      <name>operator=</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a2eaeef3b2e8ea944f1178e0e8fe237f0</anchor>
      <arglist>(const DeciderUWBIRED &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>trace</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>af26b1910ad40768a2ce725cadca94968</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>stats</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>ae81f336197ccc9da69809f35359b77ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long</type>
      <name>nbFailedSyncs</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a957620335b5b6a78816c8fcc098a1302</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long</type>
      <name>nbSuccessfulSyncs</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>ae1f4df1b424ae5c47b2cb8374e77f505</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>nbSymbols</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>ae78637acd6f7ea1c496b54565ab20a95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>allThresholds</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a8f58be78ef63af1f7ba09d4dcfbed0c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>vsignal2</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>afbeb57100a5f2c4cfac6b826e90fed7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>pulseSnrs</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a5a57dca84639daf044bf9955db2c38c0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DeciderUWBIREDSync</name>
    <filename>a00081.html</filename>
    <base>DeciderUWBIRED</base>
    <member kind="function">
      <type></type>
      <name>DeciderUWBIREDSync</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>a34d3dda3c14aba6702cab5354c73adab</anchor>
      <arglist>(DeciderToPhyInterface *phy, double sensitivity, int myIndex, bool debug)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>initFromMap</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>a7b5fbb75266417f8bf5ac1d81fd86d32</anchor>
      <arglist>(const ParameterMap &amp;params)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>attemptSync</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>a287907b9979fe327ccba25aab845fab9</anchor>
      <arglist>(const airframe_ptr_t frame)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>evaluateEnergy</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>ae93d4679bc7c6a9acd3a077f67429a90</anchor>
      <arglist>(const airframe_ptr_t frame, const AirFrameVector &amp;syncVector) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>simtime_t</type>
      <name>tmin</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>a16413bd10803ea07f9c123b700112e05</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DeciderUWBIREDSyncOnAddress</name>
    <filename>a00082.html</filename>
    <base>DeciderUWBIRED</base>
    <member kind="function">
      <type></type>
      <name>DeciderUWBIREDSyncOnAddress</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>aa36b1e671cad3868a3db06b1e4976e00</anchor>
      <arglist>(DeciderToPhyInterface *phy, double sensitivity, int myIndex, bool debug)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>initFromMap</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a7c51e2dc6a5fbb0a73c4d25bef5c2a4c</anchor>
      <arglist>(const ParameterMap &amp;params)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>attemptSync</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a48b1d5edb4f0531c01a74f3853a28717</anchor>
      <arglist>(const airframe_ptr_t frame)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LAddress::L2Type</type>
      <name>syncAddress</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a97ce42249061ba95b3901e6979220680</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>DeciderUWBIREDSyncOnAddress</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a120f1c3c29b62597ea7457568ceeec0c</anchor>
      <arglist>(const DeciderUWBIREDSyncOnAddress &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>DeciderUWBIREDSyncOnAddress &amp;</type>
      <name>operator=</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a3f7ffb8de4d51aeeb1bfe33fb450d52b</anchor>
      <arglist>(const DeciderUWBIREDSyncOnAddress &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DelayedMapping</name>
    <filename>a00083.html</filename>
    <base>BaseDelayedMapping&lt; Mapping &gt;</base>
    <member kind="function">
      <type></type>
      <name>DelayedMapping</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a253e7a1fed320ca2531272c0fa4d529d</anchor>
      <arglist>(Mapping *mapping, simtime_t_cref delay)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValue</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a27c3282471353c1e6def96b4e1604c56</anchor>
      <arglist>(const Argument &amp;pos, Argument::mapped_type_cref value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Mapping *</type>
      <name>clone</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>ae298d25469c44c9cad54b33e8a787637</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MappingIterator *</type>
      <name>createIterator</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a52ea3c1399aaecb055d63c535925bc33</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MappingIterator *</type>
      <name>createIterator</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a4dcb7018c79d6db7f0dc884dcabbcec1</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DeviceEntry</name>
    <filename>a00084.html</filename>
    <member kind="function">
      <type></type>
      <name>DeviceEntry</name>
      <anchorfile>a00084.html</anchorfile>
      <anchor>a4d2a5848f5e37293c54a8b74fd11c12e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DeviceEntry</name>
      <anchorfile>a00084.html</anchorfile>
      <anchor>a88c979cbf6a4e8b9bdca4d31653c6720</anchor>
      <arglist>(const DeviceEntry &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>DeviceEntry &amp;</type>
      <name>operator=</name>
      <anchorfile>a00084.html</anchorfile>
      <anchor>a88908d05a465f7170aef905c92fc9ed9</anchor>
      <arglist>(const DeviceEntry &amp;copy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>a00084.html</anchorfile>
      <anchor>ae62ab46af997bca23e239092a946c797</anchor>
      <arglist>(DeviceEntry &amp;s)</arglist>
    </member>
    <member kind="variable">
      <type>opp_string</type>
      <name>name</name>
      <anchorfile>a00084.html</anchorfile>
      <anchor>a6c703e9faf3cb9d23f1d1f3e1873ac26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>draw</name>
      <anchorfile>a00084.html</anchorfile>
      <anchor>aadcb1dba37682677f0d224b98a57a794</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>currentActivity</name>
      <anchorfile>a00084.html</anchorfile>
      <anchor>adb655a65790a6490d77141e4ad2bf7d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numAccts</name>
      <anchorfile>a00084.html</anchorfile>
      <anchor>a9ee839aa662f60bea339e49fef4fb403</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double *</type>
      <name>accts</name>
      <anchorfile>a00084.html</anchorfile>
      <anchor>a61a487c73b3bf0d58219cccfe793311c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t *</type>
      <name>times</name>
      <anchorfile>a00084.html</anchorfile>
      <anchor>ab9c13beb4f5944f055a9522937e0ecf7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dimension</name>
    <filename>a00085.html</filename>
    <member kind="typedef">
      <type>std::map&lt; std::string, int &gt;</type>
      <name>DimensionIDMap</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>a98893d7be4182e964c9c3e495fed3cac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DimensionIDMap::key_type</type>
      <name>DimensionNameType</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>a110a42d6dac62cbbf05514781be20bd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DimensionIDMap::mapped_type</type>
      <name>DimensionIdType</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>ad9ba8fa6cca0539358c5351eec142132</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Dimension</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>aab6f22bcb151f1b29ece09e500643fc3</anchor>
      <arglist>(const DimensionNameType &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>aa28efdf18dbf57fdc444f2dd75f3da36</anchor>
      <arglist>(const Dimension &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>a3ecf516080e05e566b995ceec18681e4</anchor>
      <arglist>(const Dimension &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>a28bb1ac7d3b0ed4e8fd43c54203c552b</anchor>
      <arglist>(const Dimension &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>a7b87afee490115d91184cadb4dbd19fb</anchor>
      <arglist>(const Dimension &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>a63668e024e4a1ba8ac2d819bdf01de23</anchor>
      <arglist>(const Dimension &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>a17b7c615400bc79a9e7fcc40f17914dc</anchor>
      <arglist>(const Dimension &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>DimensionNameType</type>
      <name>getName</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>a722a82180c4e8ea5bf2a4a34898a841d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DimensionIdType</type>
      <name>getID</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>a920a9f94db7163fa08ae0f00956d95e7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Dimension &amp;</type>
      <name>time_static</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>a0ebe0eeec14af70b3f75f675c3eb7a7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Dimension &amp;</type>
      <name>frequency_static</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>aad8d4dbdfadd58664a90f34ce4d8154e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Dimension</type>
      <name>time</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>a16cb1f186dd3f48d33a4aebe948001d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Dimension</type>
      <name>frequency</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>ad4360e7d88c881d06ee61033ad99d66f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; DimensionIdType, DimensionNameType &gt;</type>
      <name>DimensionNameMap</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>a8bac5d3aa88306fbd0192d13b80ed668</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static DimensionIDMap &amp;</type>
      <name>dimensionIDs</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>ada939a13a34a9c28edff67670caf873d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static DimensionNameMap &amp;</type>
      <name>dimensionNames</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>a5dd35619b73de635a0a57aca248af68a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static DimensionIdType &amp;</type>
      <name>nextFreeID</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>a7b9273f9c3c429aa1cc924964645936e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static int</type>
      <name>getDimensionID</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>a33426bf3820f16042adcb24948592877</anchor>
      <arglist>(const DimensionNameType &amp;name)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DimensionIdType</type>
      <name>id</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>a4d051377fa3482bdb1f6463eaded749e</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>aa6723258d45f8e2d57a861db96d05a43</anchor>
      <arglist>(std::ostream &amp;out, const Dimension &amp;d)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DimensionSet</name>
    <filename>a00086.html</filename>
    <member kind="typedef">
      <type>_Base::value_type</type>
      <name>value_type</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>ae2bcab70efad90cb4c5641025c6878e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>_Base::iterator</type>
      <name>iterator</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a336dbb4070afc6bcf67d0edc4b17d53a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>_Base::reverse_iterator</type>
      <name>reverse_iterator</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>adec6c887a5e08f247e0d2bc17897e94f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>_Base::reverse_iterator</type>
      <name>const_reverse_iterator</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a693d9aef927a8d1f16bd2b1604431f59</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>_Base::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>aac4df0c72a63059712a47fcb34786c6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>_Base::size_type</type>
      <name>size_type</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a43ee55508c9110c830b9e44b0f9f14df</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>_Base::const_reference</type>
      <name>const_reference</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a543e261b1f565957d57bcd015960f0c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DimensionSet</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a09645917a6984ef63aea0f3428fb97e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DimensionSet</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a9b2336c05b14145a0519bbe3fdc33f05</anchor>
      <arglist>(const DimensionSet &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>DimensionSet &amp;</type>
      <name>operator=</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a800e56f0c05af864c372df7e70daea8f</anchor>
      <arglist>(DimensionSet const &amp;copy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>ac1230bce09abeef30d87519bf03b3167</anchor>
      <arglist>(DimensionSet &amp;s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DimensionSet</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a743d9c2b59961b111abb268aa4258b06</anchor>
      <arglist>(const DimensionSet::value_type &amp;d)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DimensionSet</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a3a857486e570401c8a748f90a9a63f8f</anchor>
      <arglist>(const DimensionSet::value_type &amp;d1, const DimensionSet::value_type &amp;d2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DimensionSet</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a8891447188b7e386f82e536546756157</anchor>
      <arglist>(const DimensionSet::value_type &amp;d1, const DimensionSet::value_type &amp;d2, const DimensionSet::value_type &amp;d3)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSubSet</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>aae6d8ce3a87e3e1571b97c92f11363fb</anchor>
      <arglist>(const DimensionSet &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRealSubSet</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>af3c9b9a85688a4f1ef8caa3b21bf7423</anchor>
      <arglist>(const DimensionSet &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addDimension</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a397190b81dbfde450e4fe1e47633fb39</anchor>
      <arglist>(const DimensionSet::value_type &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasDimension</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a015cb6fa6c77b26b8c7b1e65827b8342</anchor>
      <arglist>(const DimensionSet::value_type &amp;d) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>af391aba2c6f2238073c0b215d6c7311c</anchor>
      <arglist>(const DimensionSet &amp;o) const </arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>af0bf2443edb92082740528ee9aff9cd0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a23fb2454ce8d875fc54b163db229537a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a76d7d38cfeec4f800c99631412a682c4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a3d60b9e3d50b92a4efe0058588e02833</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>af5d91e5851ec6d304bb4c01ac069a177</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>reverse_iterator</type>
      <name>rend</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>ad1d643560b5cc2a0bb734da0d01a9524</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>ae31b8f4e30c30967240b3f7536280f12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>rend</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a139a9f01830f2fad782633d5aba12931</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>find</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a1a7416c75853c1e3b5d4ad849adc812d</anchor>
      <arglist>(const value_type &amp;__x) const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a0bf532a8e4cbf151337d24b7246790a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a692159c06427648fbd09f0cd879b3ec7</anchor>
      <arglist>(_InputIterator __first, _InputIterator __last)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>insert</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>ab4302bf6cfb3dc417c7a3323efc908e0</anchor>
      <arglist>(const_iterator __position, const value_type &amp;__x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a41c765e5e5c1ff02d36855bdd0d3601c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const DimensionSet</type>
      <name>timeDomain</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>abf3b99a319deca6efc123ec52d77d867</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const DimensionSet</type>
      <name>timeFreqDomain</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>ac3f34a560d6c4ad5dc8d72dc69359b77</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::set&lt; Dimension &gt;</type>
      <name>_Base</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a9c28a6397d409fcc074e0b0ed0bb2ef9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>_Base</type>
      <name>Storage</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a633c146864075e9e18a377704f82a0e8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DrawAmount</name>
    <filename>a00087.html</filename>
    <member kind="enumeration">
      <name>PowerType</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>ae388439d3e21c30f465e2563199bbec4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ENERGY</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>ae388439d3e21c30f465e2563199bbec4ad8fe7930899c36833e603cd89446d86f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DrawAmount</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>a29f037ed6bda2e8aad742a9fb9cfec07</anchor>
      <arglist>(int type=CURRENT, double value=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getType</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>a8cf70f5a3603f1c6e2936cfa4acdc1b9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getValue</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>ac3d6a9f36fb6f7d3141d4d28f64cf701</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setType</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>a7fffdcf0b57e6b1609f16351e9d4dad0</anchor>
      <arglist>(int t)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValue</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>a8e411a80838eea09c6b38bc232e902ff</anchor>
      <arglist>(double v)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>type</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>ad7d65a7c37b7f2b4b48de40fd4e6bc0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>value</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>a5e5e81c528b00da622e79a04d603d4c4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DroppedPacket</name>
    <filename>a00088.html</filename>
    <member kind="enumeration">
      <name>Reasons</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>ab4363b0bc030628c5aa0ba5150c33a18</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Reasons</type>
      <name>getReason</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>a74520ac37959735cc61e2caad927a29a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setReason</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>aef3c55476a292fea6434cc1c4c27f822</anchor>
      <arglist>(Reasons r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DroppedPacket</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>ab5e09de25bdb4209cda0d1d08c869f41</anchor>
      <arglist>(Reasons r=NONE)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>info</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>a49f48746910f596d0d893cb9a1893067</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Reasons</type>
      <name>reason</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>a1179d21809689cae82b37fa8fda5b86b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DummyRoute</name>
    <filename>a00089.html</filename>
    <base>BaseNetwLayer</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>abdee96cebdcaeef041d21f4dd8d90b9d</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>a0325921784a8180a35f51ec5cb1ece32</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUpperMsg</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>afd462238bd49ed699157a22acc4b4d15</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerMsg</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>a33f1e68f09911942c05a83bb913c9f30</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>a605fd4a2cdab0ea03e85da319fe5195a</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerControl</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>afd79fff68c38e01a4c52c13c06c65a9a</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUpperControl</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>abf11af5edec306f70e20231ad6280283</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual netwpkt_ptr_t</type>
      <name>encapsMsg</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>a20ab170f205c2834e998b7bbf91043c0</anchor>
      <arglist>(cPacket *appPkt)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual cPacket *</type>
      <name>decapsMsg</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>a04dfae1582e817482ed118d1325f082d</anchor>
      <arglist>(netwpkt_ptr_t msg)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>stats</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>aea50195938376b0ecb4a516206d3ee34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>trace</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>a1ee9a47507fb8d271f78c2573bda771c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>networkID</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>ae713377eb6d39ea996474b063976c42b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FilledUpMapping</name>
    <filename>a00090.html</filename>
    <base>MultiDimMapping&lt; Linear &gt;</base>
    <member kind="typedef">
      <type>std::set&lt; argument_value_t &gt;</type>
      <name>KeySet</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>a58651c85d6c379da4e22810a0f7f18ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; Dimension, KeySet &gt;</type>
      <name>KeyMap</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>a6b714062e32fe2c679b17c0ca7ee2c3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FilledUpMapping</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>aa090d76ebccf9be3283594989b528ba7</anchor>
      <arglist>(const ConstMapping *source, const DimensionSet &amp;dims, const KeyMap &amp;rkeys)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>appendValue</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>a115d30d5ca3f2f0acb43beb86a498332</anchor>
      <arglist>(const Argument &amp;pos, argument_value_cref_t value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MappingIterator *</type>
      <name>createIterator</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>a13d1a4a5fbf6e7a1915b010d63ffc4d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MappingIterator *</type>
      <name>createIterator</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>ac05ee0f09361957877cde397b66b028b</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>fillRefIfNecessary</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>aa6a4087b7ecb1be68dade630c328ccc6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FilledUpMapping</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>a50e5f9b1fe7975287f2c18020a0a8353</anchor>
      <arglist>(const DimensionSet &amp;myDims, Dimension myDim, const KeyMap &amp;rkeys)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Mapping *</type>
      <name>createSubSignal</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>a46a248189b439d4a682b8fb78e9c0fbd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Mapping *</type>
      <name>fillRef</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>a2771812d5f5398944fd9ac80e3d5f9b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const KeyMap &amp;</type>
      <name>keys</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>aa7dcdf39affa7efc2db8e67e4ca595eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>FilledUpMapping</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>a54f96ad9437c6f8c1d8d31ef8256ebed</anchor>
      <arglist>(const FilledUpMapping &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>FilledUpMapping &amp;</type>
      <name>operator=</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>a884ef5a4d3461d99363028ebd5663e89</anchor>
      <arglist>(const FilledUpMapping &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FilledUpMappingIterator</name>
    <filename>a00091.html</filename>
    <base>MultiDimMappingIterator&lt; Linear &gt;</base>
    <member kind="function">
      <type></type>
      <name>FilledUpMappingIterator</name>
      <anchorfile>a00091.html</anchorfile>
      <anchor>afde5d08a387ba90e46518a7e8c87fec3</anchor>
      <arglist>(FilledUpMapping &amp;mapping)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FilledUpMappingIterator</name>
      <anchorfile>a00091.html</anchorfile>
      <anchor>a007146e1e1a7612a1f10cc5d20b1a03c</anchor>
      <arglist>(FilledUpMapping &amp;mapping, const Argument &amp;pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValue</name>
      <anchorfile>a00091.html</anchorfile>
      <anchor>aaf027c28adcc2465cbb5b911eaec7a8f</anchor>
      <arglist>(argument_value_cref_t)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FilteredMappingIterator</name>
    <filename>a00092.html</filename>
    <base>BaseFilteredIterator&lt; MappingIterator &gt;</base>
    <member kind="function">
      <type></type>
      <name>FilteredMappingIterator</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>aa239f06958c35671f5f407224758b61c</anchor>
      <arglist>(MappingIterator *orig)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValue</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>ac13e829a51e0065ab435f51af0e0eb9e</anchor>
      <arglist>(argument_value_cref_t value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FindModule</name>
    <filename>a00093.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static T</type>
      <name>findSubModule</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a661c335281d62d8df4affc46cc4fff9f</anchor>
      <arglist>(const cModule *const top)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T</type>
      <name>findGlobalModule</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a36e4632a6c8c7dbdc177639957a8e62a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cModule *</type>
      <name>findHost</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>af74cf61bdeba8f88de8936dc32fc19ae</anchor>
      <arglist>(cModule *const m)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cModule *</type>
      <name>findNetwork</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>adcb8dec0c1c7e6ea49877517a1da1d7f</anchor>
      <arglist>(cModule *const m)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const cModule *</type>
      <name>findHost</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>ab43269ef27c3b79c880a0c490197d556</anchor>
      <arglist>(const cModule *const m)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const cModule *</type>
      <name>findNetwork</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a8395c1ba92ff155edd95bb470e2ff232</anchor>
      <arglist>(const cModule *const m)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Flood</name>
    <filename>a00094.html</filename>
    <base>BaseNetwLayer</base>
    <class kind="class">Flood::Bcast</class>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>ab47e1d524db55d57edc7f86db5d92735</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>acf27b1fb0d68b08a1ea752f2ff08b0a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::list&lt; Bcast &gt;</type>
      <name>cBroadcastList</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>aa86c6dbba4ab62a707dcd62cb83ada23</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUpperMsg</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>a37fea31a3b2493ee86f1b3efa7dd885a</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerMsg</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>ac8c12c3b58ff0f5092b2326f694a509e</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>ac684a409e61e05e4058e9846ad021ca9</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>notBroadcasted</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>ad1cd56d510b11f5ff37daba9d762ebb6</anchor>
      <arglist>(netwpkt_ptr_t)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual netwpkt_ptr_t</type>
      <name>encapsMsg</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>a4576a635c66d17c2a4f05cc6ee524791</anchor>
      <arglist>(cPacket *)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned long</type>
      <name>seqNum</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>a5fbbab943e750dc83ed4cb6450b83ea7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>defaultTtl</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>ade22f0280705a8bc6ffbcddeb53a13e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>plainFlooding</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>a475a6974782a10907352b83c18b63a21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cBroadcastList</type>
      <name>bcMsgs</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>aa791a274b5cca9a70f8a484d0b4d9f25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>bcMaxEntries</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>a8573f479f7cebbcf51efc90d5068b4a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>bcDelTime</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>a0ebe4588526fe16bede5b8fb75506265</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>nbDataPacketsReceived</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>aa261dbd0a1c54f07da4e8fa13a07b821</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>nbDataPacketsSent</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>afe0eabe3bfd53e1195e3876f8b18b520</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>nbDataPacketsForwarded</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>aceac6b52cb227c09f3f3d8d2b7e12f55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>nbHops</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>ae102cca4d79c56b99bc641688465ffc4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Flood::Bcast</name>
    <filename>a00034.html</filename>
    <member kind="function">
      <type></type>
      <name>Bcast</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>ad02a3281028f935a1559b6ae4fb6bc39</anchor>
      <arglist>(unsigned long n=0, const LAddress::L3Type &amp;s=LAddress::L3NULL, simtime_t_cref d=SIMTIME_ZERO)</arglist>
    </member>
    <member kind="variable">
      <type>unsigned long</type>
      <name>seqNum</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>a96f36f39f4d3f85ebb617db7deb33b92</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LAddress::L3Type</type>
      <name>srcAddr</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>a35d6cab749305d9f583505cd9aa64c0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>delTime</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>a3777e8e9d65f5282a1c5c23cb57bf968</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FWMath</name>
    <filename>a00095.html</filename>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>mod</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a2867eea5a97b7685de513a989046f699</anchor>
      <arglist>(double dividend, double divisor)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>div</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a76f6d077fea756cc254c9405d0b51708</anchor>
      <arglist>(double dividend, double divisor)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>modulo</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>adfee479fcdbaba84bd4cfa57cdacf97e</anchor>
      <arglist>(double a, double n)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>close</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a38d2500887b49de2a2b5f8610f7ba6d1</anchor>
      <arglist>(double one, double two)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>stepfunction</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a4d2b3271455f9f914bd85c0e22064c09</anchor>
      <arglist>(double i)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>sign</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>aa9f55c74f3cb5eb99d5ff3d00ca3d281</anchor>
      <arglist>(double i)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>round</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>ad5b2d4a46bf7af77e9cc0070b6a82c18</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>floorToZero</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>adb95c6d5b092b752dba10eddac28055d</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>max</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a7fd5acab90d26f509178dbda7935adcf</anchor>
      <arglist>(double a, double b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>dBm2mW</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>af308407856d9835b103f2421e373ee28</anchor>
      <arglist>(double dBm)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>mW2dBm</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>af1390153a78142efb6af6225034f954f</anchor>
      <arglist>(double mW)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GaussMarkovMobility</name>
    <filename>a00096.html</filename>
    <base>LineSegmentsMobilityBase</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>ab11b6af164abb0784b0e637bec8c81ee</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>preventBorderHugging</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>a8e5665e4586ec5bb00efb9529a02a9d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>move</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>a1f8f319a35f38b3578e22151c380de67</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setTargetPosition</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>a9e8712b223c9cc98176582090f2ba968</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>speed</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>a62f92539a070470c639dd19d924d813c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>angle</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>a5470f0f21060707a7eca6201c7063022</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>alpha</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>a19deafb24e3008e6437ebba5e21052af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>margin</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>ae4fe973990edf540c8e5ae67d91a55c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>speedMean</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>aefdbed2ae460d87753adee6de30c14bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>angleMean</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>a8a70e76ecd5256e38d4f417974cf35fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>variance</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>a99f5802fd08cca90fc7f46672065c05e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>HostState</name>
    <filename>a00098.html</filename>
    <member kind="enumeration">
      <name>States</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a5002302e0f07bbd982c6e5d65eaa9c3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FAILED</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a5002302e0f07bbd982c6e5d65eaa9c3ca1a8705dd49a3297fc8512a1ac63b78e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BROKEN</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a5002302e0f07bbd982c6e5d65eaa9c3caad59622a148c4a5f0db2fd6c9fc8640d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SLEEP</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a5002302e0f07bbd982c6e5d65eaa9c3ca7270c313de38886faaab80c7dd9b9864</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OFF</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a5002302e0f07bbd982c6e5d65eaa9c3ca7c7320a0c872c90c3a26adfa4eb48412</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HostState</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a9826824b5332180e2bedd17929b8f64d</anchor>
      <arglist>(States state=ACTIVE)</arglist>
    </member>
    <member kind="function">
      <type>States</type>
      <name>get</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a3167de707748fd5280fce231d6cbcf90</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a403e773f87d00a6c66f3f017441de752</anchor>
      <arglist>(States s)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>info</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a3b7466f384edafc0214e39265e27fef2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>States</type>
      <name>state</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a891b154c7213fb04e5f3d42fdc22b0d3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IEEE802154A</name>
    <filename>a00099.html</filename>
    <class kind="struct">IEEE802154A::config</class>
    <member kind="typedef">
      <type>std::pair&lt; Signal *, std::vector&lt; bool &gt; * &gt;</type>
      <name>signalAndData</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>a4776264586c2b468325f3bf2e67de93d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setConfig</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>abe58ad30f0604ffa5a236cdb20d502f4</anchor>
      <arglist>(config newCfg)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static config</type>
      <name>getConfig</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>aa6b660f4b282eb2f5473c5395baf40e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setPSDULength</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>abef05542a0109f7233e0fb8f407f0b7d</anchor>
      <arglist>(int _psduLength)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static signalAndData</type>
      <name>generateIEEE802154AUWBSignal</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>abe3ea8a45ffb69dd7bebcdb5a2ed20b1</anchor>
      <arglist>(simtime_t_cref signalStart, bool allZeros=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static simtime_t</type>
      <name>getMaxFrameDuration</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>a93aeba207e5c6c775d21385ff3266b2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static simtime_t</type>
      <name>getPhyMaxFrameDuration</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>aca8198e90ad41c598c2bfa03d39ff130</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static simtime_t</type>
      <name>getThdr</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>a5ec8b55f5933a04be1c1eb8a2acb7cdd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getHoppingPos</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>ae52f08617a07fca9f629e5b5475c5041</anchor>
      <arglist>(int sym)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>mandatory_bitrate</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>a8c84b3445fe73278870a24330004e0e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const_simtime_t</type>
      <name>mandatory_symbol</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>aa8d1a0b27a1b2ccc525ead952f31e0e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const_simtime_t</type>
      <name>mandatory_timeShift</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>a005f42d18095aaaf846f3e03ecee2309</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const_simtime_t</type>
      <name>mandatory_pulse</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>ab29d6f969fd0446306f9bca3d0f2bf66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const_simtime_t</type>
      <name>mandatory_burst</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>af3cec63cea77a050a1a2684bad6914cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>mandatory_pulses_per_burst</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>a5ff4c70e28d60089caaa6fecfd5b5a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>mandatory_centerFreq</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>a2c140f7b73792a8634cfd64f1145d531</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const_simtime_t</type>
      <name>mandatory_preambleLength</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>affd046f553e39d7b550e45a337cb3f4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>maxPulse</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>ab7d6e3933f81151296996c211053a5bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const short</type>
      <name>C31</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>aafa430cd399089cb93a9214cdf175e9f</anchor>
      <arglist>[8][31]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const short</type>
      <name>Ci</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>a45a526f907f119bddf52e8a731c68285</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const short</type>
      <name>shortSFD</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>a42bd683ab710f0e2e278344c1faa9b99</anchor>
      <arglist>[8]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const_simtime_t</type>
      <name>MaxFrameDuration</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>ae43300c03e88510c8823a448e8722087</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>maxS</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>a1f7eab31625d5428a92dcf8cb65261e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static short</type>
      <name>s_array</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>a5515cbb1d91c2e6444a4bdc16e182711</anchor>
      <arglist>[maxS]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>last_s</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>aa5239bac7b0cd660a7cfeb4232fd7d07</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static double</type>
      <name>signalStart</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>a5294b1aff682ba9cf349632f590e1d8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>NSync</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>ad50f579cfe38ba679b1087ea9d3cce53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const short</type>
      <name>CLength</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>aae1e48e3b33a1f7fbd0911eb96ee1c01</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const short</type>
      <name>spreadingdL</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>a939ab58daadc8dfad4ce9a6c8732934f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const_simtime_t</type>
      <name>Tpsym</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>a43bcd01c6ca4f2ed72f35ed4dd16fbc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const short</type>
      <name>RSSymbolLength</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>a825ce96a86c8a93cdc4fc0446d1d0911</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const short</type>
      <name>RSMaxSymbolErrors</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>a12e3b9012f5d8a46f061263302cd22e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>MaxPSDULength</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>a13b879798f5bed79e9839e8888b1037b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const_simtime_t</type>
      <name>tFirstSyncPulseMax</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>afd394e4b3807e9fe040354275a62949d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>Nhdr</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>a8a7cbb692f5cec52b18a466519081219</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>psduLength</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>af62d4c051b3f38b270b13ecfb5a8b0f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static config</type>
      <name>cfg</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>ae12425e0e3b047029bcae392263407e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const config</type>
      <name>cfg_mandatory_16M</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>a047d68fd52c32ac8b3ccc98acc9dd84f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const config</type>
      <name>cfg_mandatory_4M</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>a1fbb9aac99cb34e664e1ddd64446261d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>generateSyncPreamble</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>ad4af2fd6839252a0f199debf1e394be2</anchor>
      <arglist>(Mapping *mapping, Argument *arg)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>generateSFD</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>a5cc307c086e13a1f08a1689197ef31fb</anchor>
      <arglist>(Mapping *mapping, Argument *arg)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>generatePhyHeader</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>ac9834196cbd323372efe2ffdecfe8aaa</anchor>
      <arglist>(Mapping *mapping, Argument *arg)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>generateBurst</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>a59c533846a6dadc7d070c59acca0ad84</anchor>
      <arglist>(Mapping *mapping, Argument *arg, simtime_t_cref burstStart, short polarity)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>generatePulse</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>a46dfdd62a929b8258f92408f4ce9c7b4</anchor>
      <arglist>(Mapping *mapping, Argument *arg, short polarity, double peak=IEEE802154A::maxPulse, simtime_t_cref chip=IEEE802154A::mandatory_pulse)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>setBitRate</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>a9eaca8d8e13a324012750f94c89e0494</anchor>
      <arglist>(Signal *s)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static int</type>
      <name>s</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>ad7bbc9f70b841fc24c15f3928d0f709b</anchor>
      <arglist>(int n)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IEEE802154A::config</name>
    <filename>a00051.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>channel</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a057f28e0971141968da9f1cefaaaaf36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UWBPRF</type>
      <name>prf</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a4ae28e87603cc9741554f64e75cd9188</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Ranging</type>
      <name>ranging</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a08ab91459a028cd142786c03fd8e06f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UWBPreambleSymbolRepetitions</type>
      <name>NSync</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a85f520bc534dc0d7e20cb05f405fd8a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>CLength</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>ac1e23cb2607c958f178c5a726d4f4472</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>spreadingdL</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a64c39a1a36dd4663e13f493204cad448</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Ncpb</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a787c9a6788f7555879c0478552e5bb76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>bitrate</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>aac9322cff8d3ca0327175d352d8b9c74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nbPulsesPerBurst</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a3aad534ce373b8f1ae4f1f39e9640568</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>sync_symbol_duration</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>af051fb551806fdf31daf8b2eb3964356</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>data_symbol_duration</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>aafbf384536a8e22bd12ffbdc7cf91b64</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>shift_duration</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>affcd04dd32a977361f344e59bfe37fc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>pulse_duration</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a0ee0ad63ab099372cd408d981993dca3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>burst_duration</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a7b9343455b057fecdc9ec1101894fbff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>preambleLength</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a0d271ef3fe6bbefe1f7109aa8c36343c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>centerFrequency</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a8b2b7a2770142b020308ade2a4440c7f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IInterfaceTable</name>
    <filename>a00100.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>getFullPath</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>a1047517c24c981f2069367ca576a9c81</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cModule *</type>
      <name>getHostModule</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>a2f0c6da3baff7416b8914d8a393bff7f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>addInterface</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>a7b54fe5e63bb7d4c76483b7fa27e506f</anchor>
      <arglist>(InterfaceEntry *entry)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>deleteInterface</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>a229a92e5d530127efb262e8fe7acfdf9</anchor>
      <arglist>(InterfaceEntry *entry)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNumInterfaces</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>a2b0ce46cd92da6f64fc363410dc71904</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual InterfaceEntry *</type>
      <name>getInterface</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>a19ce4ca3b47b52b8e2b67c25806c4b49</anchor>
      <arglist>(int pos)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual InterfaceEntry *</type>
      <name>getInterfaceById</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>a92764d620c345b7261de20e9ee5247d7</anchor>
      <arglist>(int id)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual InterfaceEntry *</type>
      <name>getInterfaceByNodeOutputGateId</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>a31ab0c95a4bf741f1f8aa03e1cf76986</anchor>
      <arglist>(int id)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual InterfaceEntry *</type>
      <name>getInterfaceByNodeInputGateId</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>a60257f3b30cedc18a80835d5be8305d9</anchor>
      <arglist>(int id)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual InterfaceEntry *</type>
      <name>getInterfaceByNetworkLayerGateIndex</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>a8d10b748bc5429c706fab120c719e335</anchor>
      <arglist>(int index)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual InterfaceEntry *</type>
      <name>getInterfaceByInterfaceModule</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>a54ae8859390945b1d565e6732f27f848</anchor>
      <arglist>(cModule *ifmod)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual InterfaceEntry *</type>
      <name>getInterfaceByName</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>a8ad86ee823d6200b4f558383b39af658</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual InterfaceEntry *</type>
      <name>getFirstLoopbackInterface</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>ad9b040947200941201b8c82d35c7abee</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual InterfaceEntry *</type>
      <name>getFirstMulticastInterface</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>a5d953f7e65da1885c6c85d0dfa890874</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>interfaceChanged</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>ad8ce8de50598e7ac988f4dc3a2ed976f</anchor>
      <arglist>(InterfaceEntry *entry, int category)=0</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>InterfaceEntry</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>a927bba568218c52cc2ec3574098d91c2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMobility</name>
    <filename>a00101.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual Coord</type>
      <name>getCurrentPosition</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>abbf2edff2f9570cada67952fc1eb886d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Coord</type>
      <name>getCurrentSpeed</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>afb4a58c38ef32d3f0e6e7ec37ff4fc1c</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>INotifiable</name>
    <filename>a00102.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>receiveChangeNotification</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>a26809ed59b2ff3e9379b1b4440227a8d</anchor>
      <arglist>(int category, const cObject *details)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IntensityModel</name>
    <filename>a00103.html</filename>
    <base>AnalogueModel</base>
    <member kind="function">
      <type>void</type>
      <name>filterSignal</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a8280f0e0f92d28db257f9d3cfeb8ced3</anchor>
      <arglist>(airframe_ptr_t frame, const Coord &amp;sendersPos, const Coord &amp;receiverPos)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>InterfaceEntry</name>
    <filename>a00104.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setInterfaceTable</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a533ed5c9d20dfcc39c2ce7d3355c35d0</anchor>
      <arglist>(IInterfaceTable *t)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setInterfaceId</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a7dd74863d391501ca83301e1f82111a6</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InterfaceEntry</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a22b0d4229dddc6743135dafb328f2cfd</anchor>
      <arglist>(cModule *interfaceModule)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a2bdadf6c4364f396229335b31c2c6274</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>detailedInfo</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a5f092ea2814641a8dae2b6865d542132</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getFullPath</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>aa901d7b144814d20396b1e6c2acedb48</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IInterfaceTable *</type>
      <name>getInterfaceTable</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a33a11be3f630c1c014de8899d1e7d328</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getInterfaceId</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>adc901fa42c37ce16b5c0785da81106ce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cModule *</type>
      <name>getInterfaceModule</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a11678b3031e69594c85940d8f0f86019</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNetworkLayerGateIndex</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a315657b6b5281241a69bed8e1171ef6f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNodeOutputGateId</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a28c151905c57d6d19ecb026367f93278</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNodeInputGateId</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>aec952d16865a101d35452733206ada9a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMTU</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>adbe3ede6fb4652fbfc4abbe2c924cc3b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDown</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a6bcecaaa87b5da264fd47e1500572dff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isBroadcast</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>aab3bcbc4bda7e33993c2fe3f97aaaf10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMulticast</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a275db86c899f3278865c47004500588f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPointToPoint</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a91ff5ecd3f8a0e38a09f40694b760a65</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLoopback</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a0ee93e88273f61390d1293dae55004d1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDatarate</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a54591c28cfc7a3ccbf8025ff4bb4f889</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const MACAddress &amp;</type>
      <name>getMacAddress</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>af8004a12e9aac171699ff1f7f08ee4c4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const InterfaceToken &amp;</type>
      <name>getInterfaceToken</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a1196c8e3f1a10a26778296af4c14a4bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setName</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>af9ca0c7af3a0f45e7d7102e6cc2b089e</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNetworkLayerGateIndex</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a345db5dd6e926e5abe485b6e751cdf70</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNodeOutputGateId</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a52ab396f1f1d41b94905cfc5d96e944a</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNodeInputGateId</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a9da2bee4914c0e598ed96075ab625851</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMtu</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>aaebcf5970e29877b0a4b68ddaaaf540f</anchor>
      <arglist>(int m)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDown</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>ae52fbe187fb5e61c02141ea66d1aaea0</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBroadcast</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a6f9c79da187d1d56c028b616f3be28fe</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMulticast</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a0b9fca7071b37185a18b6693c3502f69</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPointToPoint</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>af207b6ea20ecd9bedd4acfae50a3500f</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLoopback</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a305e66c0b05a5fa813db3b4f24e2b009</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDatarate</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a0c784bb130d1005066361255d282def0</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMACAddress</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>ac10c228cc65a2c799c798ca75de593dc</anchor>
      <arglist>(const MACAddress &amp;addr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setInterfaceToken</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a7fad57b268a57abe1de80d30299d4c45</anchor>
      <arglist>(const InterfaceToken &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>IPv4InterfaceData *</type>
      <name>ipv4Data</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a4f52f31546a140edf6979882492e1a0b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IPv6InterfaceData *</type>
      <name>ipv6Data</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a19083391271368e371346eb41ccc6c93</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>InterfaceProtocolData *</type>
      <name>getProtocol3Data</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a16ccd7e4344f5d90651d1e22dd7b743e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>InterfaceProtocolData *</type>
      <name>getProtocol4Data</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>aa5c369ea483f9ddfa6996eb2bdcef972</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIPv4Data</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a7b2e8a8e6ee3bab717b90a2068f550f1</anchor>
      <arglist>(IPv4InterfaceData *p)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIPv6Data</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a1a2550df394a766847d0ad89aa1a9349</anchor>
      <arglist>(IPv6InterfaceData *p)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setProtocol3Data</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>aecea8acf2ef4b0f4d23e3841c9ee9ae7</anchor>
      <arglist>(InterfaceProtocolData *p)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setProtocol4Data</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a19b4214a8d4beb029bebf11465caedef</anchor>
      <arglist>(InterfaceProtocolData *p)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setEstimateCostProcess</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a5050108619862ed5441b40233a1afc38</anchor>
      <arglist>(int, MacEstimateCostProcess *p)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MacEstimateCostProcess *</type>
      <name>getEstimateCostProcess</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>ae8b6b66c27a4e402b313df5392d0c27b</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>configChanged</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a6a27dc382d42ec003395be35cfa06f6e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>stateChanged</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a7725dc2b018b0abb88869bbcc6d6a122</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>changed</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a2d12bc7879a5de0b373ce2c7ec581a21</anchor>
      <arglist>(int category)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IInterfaceTable *</type>
      <name>ownerp</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a6289a92de460fb4428e7a74cd101d8f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cModule *</type>
      <name>interfaceModule</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a36b516a9941d4a7b5b871c7e2e9ee656</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>interfaceId</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>ada612a44cae21cc624e97917869b9de7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>nwLayerGateIndex</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a7e298a31165012a9bfdf6f6deb8b258f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>nodeOutputGateId</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a499654dd92449cd6ca9b60971d57b1da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>nodeInputGateId</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a0ca83d1b82869a65d7feb23b2f8434c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>mtu</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a20e755e0dda30412a913cee45ae1fa16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>down</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a2fbdce90dcbd45421e20e7611635119f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>broadcast</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a41eb1e90b71f2c4bbfe176275ded187b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>multicast</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>acdf3591512b266243b741abd8d53253d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>pointToPoint</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a1e7d91c0717974254d5013a64b237a4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>loopback</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a3fdb2607c57f9801282f8aacf4d9c4be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>datarate</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a79fe97f955e5976834fd2e79b7a450fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MACAddress</type>
      <name>macAddr</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a1b147c7d4618223d25a2965eb56bbc7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>InterfaceToken</type>
      <name>token</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>ac131fdac2f8d3891c54440420959e3f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPv4InterfaceData *</type>
      <name>ipv4data</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a36efe5a5310cc4ab8905c70deefeca83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IPv6InterfaceData *</type>
      <name>ipv6data</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a885d1c26c9feac85c72502e07e61814b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>InterfaceProtocolData *</type>
      <name>protocol3data</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>aaf92c0f281789b22731e956a08b64746</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>InterfaceProtocolData *</type>
      <name>protocol4data</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a782cab8a587cf1010acd9e352f8e2e1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; MacEstimateCostProcess * &gt;</type>
      <name>estimateCostProcessArray</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a062940a9af30956263c49a9bd9556cdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>InterfaceEntry</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a89450780d72b516c206102521f585c25</anchor>
      <arglist>(const InterfaceEntry &amp;obj)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>InterfaceEntry &amp;</type>
      <name>operator=</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a8fec34c1b8e153cf247aa70295f98755</anchor>
      <arglist>(const InterfaceEntry &amp;obj)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>InterfaceProtocolData</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a4828b5783f9df3cc0d1cad83fff4b3a7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>InterfaceProtocolData</name>
    <filename>a00105.html</filename>
    <member kind="function">
      <type>InterfaceEntry *</type>
      <name>getInterfaceEntry</name>
      <anchorfile>a00105.html</anchorfile>
      <anchor>abdbf6a78e60579afda4a33ee6dff9c2e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>changed</name>
      <anchorfile>a00105.html</anchorfile>
      <anchor>ab816750e6501a173b9142125eb2e5cba</anchor>
      <arglist>(int category)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>InterfaceEntry *</type>
      <name>ownerp</name>
      <anchorfile>a00105.html</anchorfile>
      <anchor>a612e477f2f733a5c4903572d7449913f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>InterfaceEntry</name>
      <anchorfile>a00105.html</anchorfile>
      <anchor>a927bba568218c52cc2ec3574098d91c2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>InterfaceTable</name>
    <filename>a00106.html</filename>
    <base>IInterfaceTable</base>
    <base protection="protected">INotifiable</base>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getFullPath</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>abde330e4adcc5a7495f89b8cd6154275</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveChangeNotification</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>a70303b94020a300c74222695a2cfa261</anchor>
      <arglist>(int category, const cObject *details)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cModule *</type>
      <name>getHostModule</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>a999f85862dc558747ce9d8e2393188bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addInterface</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>af43ca2b4f54392ce974effc35dcf72d1</anchor>
      <arglist>(InterfaceEntry *entry)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deleteInterface</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>a59bf4ac426a9fd86c5ce4cb2c9fcc16e</anchor>
      <arglist>(InterfaceEntry *entry)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumInterfaces</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>aa7bbc08564b199d7820f9fb5dafedead</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual InterfaceEntry *</type>
      <name>getInterface</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>a20068628e72377ed78735e6b008a0a9f</anchor>
      <arglist>(int pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual InterfaceEntry *</type>
      <name>getInterfaceById</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>a3acb58a75de2e7d443c6abd0e7bd2548</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual InterfaceEntry *</type>
      <name>getInterfaceByNodeOutputGateId</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>a281b09bc65fc43109563bff6d9e55995</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual InterfaceEntry *</type>
      <name>getInterfaceByNodeInputGateId</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>ad6eb1529b3d8ed007feea079e1f5d9cd</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual InterfaceEntry *</type>
      <name>getInterfaceByNetworkLayerGateIndex</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>abc0aa1cd6740d6808c09c3969969bd6f</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual InterfaceEntry *</type>
      <name>getInterfaceByInterfaceModule</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>a109c3bcfee676b91628bef4582839f50</anchor>
      <arglist>(cModule *ifmod)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual InterfaceEntry *</type>
      <name>getInterfaceByName</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>a3f953c2e608d84f14cfcaaf32ff6cbe1</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual InterfaceEntry *</type>
      <name>getFirstLoopbackInterface</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>a60849d96d27149120445ee5429462d91</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual InterfaceEntry *</type>
      <name>getFirstMulticastInterface</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>a14c696f299054ee4617612e3c7e721b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; InterfaceEntry * &gt;</type>
      <name>InterfaceVector</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>a3ffd914a1c868644a125750bf7bea75c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>updateDisplayString</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>a84ad7ffc48e1d42ca93284fe033823b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>updateLinkDisplayString</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>a541865f79aa57c4214cf1e1bd98b54bf</anchor>
      <arglist>(InterfaceEntry *entry)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>discoverConnectingGates</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>a86d43c8e68646df65f9a53478139bd3d</anchor>
      <arglist>(InterfaceEntry *entry)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>interfaceChanged</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>a56f4588cd3260e1ba58b9af6b812d6ae</anchor>
      <arglist>(InterfaceEntry *entry, int category)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>invalidateTmpInterfaceList</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>ad5da237cf1d0ab4de1ead24a6fa930f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>a9f964712f929db684d0c6e5febc658f2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>ab92373cbd67155557293fbccc2ac1466</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>a101a52971a1de7df6479a3412ec5940c</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NotificationBoard *</type>
      <name>nb</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>a4a813da979ea8934dd9d1bf7f82831b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>InterfaceVector</type>
      <name>idToInterface</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>a770ff6852b4d38adf4796786d9d46c6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>tmpNumInterfaces</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>a735aed31ccdb2616a012c3a36ae812a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>InterfaceEntry **</type>
      <name>tmpInterfaceList</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>a386b4b375178b5cbb5de18cdcb74042b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>InterfaceTableAccess</name>
    <filename>a00107.html</filename>
    <base>ModuleAccess&lt; IInterfaceTable &gt;</base>
  </compound>
  <compound kind="class">
    <name>InterfaceToken</name>
    <filename>a00108.html</filename>
    <member kind="function">
      <type></type>
      <name>InterfaceToken</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a6b1fc3ab7dc16086965a68804e94b6c4</anchor>
      <arglist>(uint32 low, uint32 normal, int len)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InterfaceToken</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a8bda27a885a24df72b3f86dcc17c3753</anchor>
      <arglist>(const InterfaceToken &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>InterfaceToken &amp;</type>
      <name>operator=</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>aae45bdd9bf834de1be2cca80e60ea150</anchor>
      <arglist>(const InterfaceToken &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>length</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>ac24d3ff83613e4a7721526553053c312</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>uint32</type>
      <name>low</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a1a2804e3d0693eb983c850e10f910f54</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>uint32</type>
      <name>normal</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>af90ce6bfecdaf8a2220c1d4394ce6e6b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a968e134423ef0b6498b2f4ebe5e60047</anchor>
      <arglist>(const InterfaceToken &amp;t)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint32</type>
      <name>_normal</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>ad7d009144b8efcefe17d6ad07fa7e9c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint32</type>
      <name>_low</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a821f753130406eee86bfe81fe641580e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>short</type>
      <name>_len</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a3fb86a477d90952847338c60fb168388</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>InterpolateableIterator</name>
    <filename>a00109.html</filename>
    <templarg></templarg>
    <base>ConstInterpolateableIterator&lt; TInterpolator, TInterpolator::iterator &gt;</base>
    <member kind="function">
      <type></type>
      <name>InterpolateableIterator</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>a293e156dd92c02e9795456cdf10da596</anchor>
      <arglist>(container_type &amp;cont, const interpolator_type &amp;intpl)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>ac9ff6164dadb0782ba712d238fc5fa86</anchor>
      <arglist>(mapped_cref_type value)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ConstInterpolateableIterator&lt; TInterpolator, typename TInterpolator::iterator &gt;</type>
      <name>base_class_type</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>ab07de05ce33b5f79338b2f5e218eeae5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>base_class_type::container_type</type>
      <name>container_type</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>a505921570c714a08939e703212d827e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>container_type::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>aa306fd3c4d8c41c1385214120dd89f56</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>container_type::iterator</type>
      <name>iterator</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>ac2ae0b3bac1aefdf810e89053f02c26f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>base_class_type::interpolator_type</type>
      <name>interpolator_type</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>ab277c7071b789b77db6c83bbfcfc73f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>base_class_type::key_type</type>
      <name>key_type</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>a12a29f9eab93da3e4f23625dc4960b5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>base_class_type::key_cref_type</type>
      <name>key_cref_type</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>add69459cec530aaa14cedf90d90716df</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>base_class_type::mapped_type</type>
      <name>mapped_type</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>a6653fb735749f37a30af97972ccd9a04</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>base_class_type::mapped_cref_type</type>
      <name>mapped_cref_type</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>af76b6af4717a8419ba2b81e890e47b6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>container_type::value_type</type>
      <name>pair_type</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>ad5fdac01d126b7b8ecad075787fab475</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>base_class_type::comparator_type</type>
      <name>comparator_type</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>a8b00771eedb6b1a9dffc453064834adc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>interpolator_type::interpolated</type>
      <name>interpolated</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>a28eb737c6b8db4dba638e6ad8246346b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>container_type &amp;</type>
      <name>cont</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>af9666580c89cb80eddb2f56dae42f4ba</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>InterpolateableMap</name>
    <filename>a00110.html</filename>
    <templarg>TInterpolator</templarg>
    <templarg>TContainer</templarg>
    <member kind="typedef">
      <type>TContainer</type>
      <name>container_type</name>
      <anchorfile>a00110.html</anchorfile>
      <anchor>a217448304edf64b46dd8a6450ee6ae0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TInterpolator</type>
      <name>interpolator_type</name>
      <anchorfile>a00110.html</anchorfile>
      <anchor>a4e2dca36f33ea59492d63df8a3b3e8a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>container_type</type>
      <name>base_class_type</name>
      <anchorfile>a00110.html</anchorfile>
      <anchor>a96883c206968b6fab765146d045232c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::key_type</type>
      <name>key_type</name>
      <anchorfile>a00110.html</anchorfile>
      <anchor>a38d70c0bfa85e67af22ae4562ca18279</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const key_type &amp;</type>
      <name>key_cref_type</name>
      <anchorfile>a00110.html</anchorfile>
      <anchor>ac22ce1e261decb81e3bdf3514739bcd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::mapped_type</type>
      <name>mapped_type</name>
      <anchorfile>a00110.html</anchorfile>
      <anchor>ab0e9881a19ace90b9c51c963cecaab6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::value_type</type>
      <name>pair_type</name>
      <anchorfile>a00110.html</anchorfile>
      <anchor>a7b31595ca7453acefd843882f7c26114</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const mapped_type &amp;</type>
      <name>mapped_cref_type</name>
      <anchorfile>a00110.html</anchorfile>
      <anchor>ac08e49dfa56e60af0723e27e97eb3543</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>interpolator_type::interpolated</type>
      <name>interpolated</name>
      <anchorfile>a00110.html</anchorfile>
      <anchor>a4c406f0681ae69646e492c3131786189</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>a00110.html</anchorfile>
      <anchor>af0d2068655034aa04a27d211e5371caa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::iterator</type>
      <name>iterator</name>
      <anchorfile>a00110.html</anchorfile>
      <anchor>a9bc116f88a742364c74978f5451dc3f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>InterpolateableIterator&lt; TInterpolator &gt;</type>
      <name>iterator_intpl</name>
      <anchorfile>a00110.html</anchorfile>
      <anchor>a8dc26216c7b857ed3d95c1c1ad71653a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstInterpolateableIterator&lt; TInterpolator &gt;</type>
      <name>const_iterator_intpl</name>
      <anchorfile>a00110.html</anchorfile>
      <anchor>a52de9937ce05597df151f9bf27673994</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InterpolateableMap</name>
      <anchorfile>a00110.html</anchorfile>
      <anchor>a5c76bbc893b2e8aa705f35e418a4ffb4</anchor>
      <arglist>(mapped_cref_type oorv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOutOfRangeVal</name>
      <anchorfile>a00110.html</anchorfile>
      <anchor>a766980ed7805b730b0f1903eeb14793f</anchor>
      <arglist>(mapped_cref_type oorv)</arglist>
    </member>
    <member kind="function">
      <type>interpolated</type>
      <name>getIntplValue</name>
      <anchorfile>a00110.html</anchorfile>
      <anchor>a1548366830c2159110c902750646e6f5</anchor>
      <arglist>(key_cref_type pos) const </arglist>
    </member>
    <member kind="function">
      <type>const_iterator_intpl</type>
      <name>findIntpl</name>
      <anchorfile>a00110.html</anchorfile>
      <anchor>aa643292fee63e1ffde54ba2315ac22ca</anchor>
      <arglist>(key_cref_type pos) const </arglist>
    </member>
    <member kind="function">
      <type>const_iterator_intpl</type>
      <name>beginIntpl</name>
      <anchorfile>a00110.html</anchorfile>
      <anchor>ab83c65fc629eb8c3319a2915577ba6e3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>iterator_intpl</type>
      <name>findIntpl</name>
      <anchorfile>a00110.html</anchorfile>
      <anchor>a9a6df4d973cec89c8f68b1c26c62ccdb</anchor>
      <arglist>(key_cref_type pos) __attribute__((noinline))</arglist>
    </member>
    <member kind="function">
      <type>iterator_intpl</type>
      <name>beginIntpl</name>
      <anchorfile>a00110.html</anchorfile>
      <anchor>a03130591ac495322129d1430f0243de4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>interpolator_type</type>
      <name>interpolate</name>
      <anchorfile>a00110.html</anchorfile>
      <anchor>aba1c44886e1f41cdd93da4f815faaeb8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Interpolated</name>
    <filename>a00111.html</filename>
    <templarg>V</templarg>
    <member kind="function">
      <type></type>
      <name>Interpolated</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>a207d72329531eebb671b8cea5ab97b70</anchor>
      <arglist>(value_cref_type v, bool isIntpl=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Interpolated</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>a5bc92404ea98f1d8c353a378410be2d9</anchor>
      <arglist>(const Interpolated&lt; value_type &gt; &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>value_ref_type</type>
      <name>operator*</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>a53c90a1d6e549581c19e53ef1f65440f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>value_ptr_type</type>
      <name>operator-&gt;</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>afb3e2c2374f4711a181d1139e4ab4266</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>aa79ee9b9410d2c1477bf8cc296a4a418</anchor>
      <arglist>(const Interpolated&lt; value_type &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>a50f7e4a2eb744d4cc2248d04d213541c</anchor>
      <arglist>(const Interpolated&lt; value_type &gt; &amp;other) const </arglist>
    </member>
    <member kind="variable">
      <type>const bool</type>
      <name>isInterpolated</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>a6b2dcc90823cd33ba7e61f68521bc8c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>V</type>
      <name>value_type</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>a5ec4d0c5b3342f331ea4b1dd2bc43e01</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>const value_type &amp;</type>
      <name>value_cref_type</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>a756b43519b8caf161667b2f95fddddc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>value_type &amp;</type>
      <name>value_ref_type</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>ae30aa0fd552a7f6a8e85daaccec05635</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>value_type *</type>
      <name>value_ptr_type</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>af784a6d2f1a39319ca4606a38fa0c0d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>value_type</type>
      <name>value</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>a767a013b8c29f231984ac735b4b59955</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Interpolated&lt; Mapping * &gt;</name>
    <filename>a00112.html</filename>
    <member kind="function">
      <type></type>
      <name>Interpolated</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ae6dbef7dabca0ce3f6f3110b28b48c8e</anchor>
      <arglist>(const LinearIntplMapping &amp;m)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Interpolated</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a95f58fb7ed93ec9a752d2d85581796a1</anchor>
      <arglist>(value_type v, bool isIntpl=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Interpolated</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aefb556e3f085b774951f2afc22d9279f</anchor>
      <arglist>(const _Self &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>const _Self &amp;</type>
      <name>operator=</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a2810500c1b795c29a1af2741024853a7</anchor>
      <arglist>(const _Self &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>value_ref_type</type>
      <name>operator*</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a2e84fa1860da47f333628f4cab75c376</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>value_ptr_type</type>
      <name>operator-&gt;</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a4e9ca385dff76dca305c1d17c6a77f85</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a2616d18d714a3b3ccc5797411d0f06de</anchor>
      <arglist>(const _Self &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>adc94213dd6549deee2a8c5b8b41a0403</anchor>
      <arglist>(const _Self &amp;other) const </arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isInterpolated</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a5f5b0e3a8adb3c2ec8b4178476334cdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Mapping *</type>
      <name>value_type</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>abfe0e5f0e7bda34ffb30a8bc0a73afa4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>const value_type &amp;</type>
      <name>value_cref_type</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a105b8f3df84e235b9d97c061d8cf2807</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>value_type &amp;</type>
      <name>value_ref_type</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ac6fe46e95755e3b9d07e443a4c8d0f5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>value_type *</type>
      <name>value_ptr_type</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ae69d4f775ded2f2a35789c55875da7c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Interpolated&lt; value_type &gt;</type>
      <name>_Self</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a6e461fadd0cf5dc69cf4d38e14528c6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LinearIntplMapping</type>
      <name>mapping</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a41f35d1266c83a26a22d6d0b411ec34f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>value_type</type>
      <name>value</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a35663ec8d3ab796e7ad7b20a2526bebd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isPointer</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a34000edebc6bbcca908e4cf61f0256d1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>InterpolatorBase</name>
    <filename>a00113.html</filename>
    <templarg>_ContainerType</templarg>
    <member kind="typedef">
      <type>_ContainerType</type>
      <name>storage_type</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>a5425b9d0d46fc00e73bfbfd5dac2235b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>storage_type</type>
      <name>container_type</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>a08ed542e8cf2d5d5db6a57853d99b395</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>storage_type::key_type</type>
      <name>key_type</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>a77ef89f853cd60547a36139edcc08e74</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const key_type &amp;</type>
      <name>key_cref_type</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>adc214ec8fb530ba3366e27ed0562afe2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>storage_type::mapped_type</type>
      <name>mapped_type</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>a86d79e0651ad28e573d9e459431d1d15</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const mapped_type &amp;</type>
      <name>mapped_cref_type</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>aacd78d74d033b98dab7e6e4a4ff37827</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>storage_type::value_type</type>
      <name>pair_type</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>a2a4373ff4faec82f586e83ef61e49ca7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>storage_type::iterator</type>
      <name>iterator</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>afebb8b6a1cee5e65401bcae5fb664bc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>storage_type::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>a728b368da1a67c20b07538eb2a2841ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PairLess&lt; pair_type, key_type &gt;</type>
      <name>comparator_type</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>a0d624c60eda67b0801122c3803a9fc55</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Interpolated&lt; mapped_type &gt;</type>
      <name>interpolated</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>a809a32fb20618d965208bd82424bb853</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InterpolatorBase</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>ac60b7bfe1d54bb98e6bd9fc86046f8a7</anchor>
      <arglist>(mapped_cref_type oorv)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>continueAtOutOfRange</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>a418f7310b70491f3151af9c629de1731</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>interpolated</type>
      <name>operator()</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>af2aaa8a601ff4b04f34578b6e3d9d793</anchor>
      <arglist>(const const_iterator &amp;first, const const_iterator &amp;last, key_cref_type pos) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isStepping</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>ad595dcb21de2a3342353a6d537a817e7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual interpolated</type>
      <name>operator()</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>ad20a467fabf3bf4173251d6f3c6a7deb</anchor>
      <arglist>(const const_iterator &amp;first, const const_iterator &amp;last, key_cref_type pos, const_iterator upperBound) const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOutOfRangeVal</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>a8cf11628ee68fe8a058021afeb63ac75</anchor>
      <arglist>(mapped_cref_type oorv)</arglist>
    </member>
    <member kind="function">
      <type>mapped_cref_type</type>
      <name>getOutOfRangeVal</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>a1f80f85cc052c18230de63753ef0455c</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable">
      <type>comparator_type</type>
      <name>comp</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>a833e51f2e6ce34330574ea3850b906db</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>interpolated</type>
      <name>asInterpolated</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>ae79c26e2532175da7eaf9b8183c7cfe9</anchor>
      <arglist>(mapped_cref_type rVal, bool bIsOutOfRange, bool bIsInterpolated=true) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>continueOutOfRange</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>ae1e39c73d7d763baea464c1eec0a8b5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>interpolated</type>
      <name>outOfRangeVal</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>a33d2db2305227e4b7fe5e2ec7e800b80</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>JakesFading</name>
    <filename>a00114.html</filename>
    <base>AnalogueModel</base>
    <member kind="function">
      <type></type>
      <name>JakesFading</name>
      <anchorfile>a00114.html</anchorfile>
      <anchor>a5a41471badf18809757c3385eee4fc96</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>initFromMap</name>
      <anchorfile>a00114.html</anchorfile>
      <anchor>a5195d855a7219f5c3c4a953997b37084</anchor>
      <arglist>(const ParameterMap &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>filterSignal</name>
      <anchorfile>a00114.html</anchorfile>
      <anchor>a9674a1930ca4ca810b79665f20968a62</anchor>
      <arglist>(airframe_ptr_t, const Coord &amp;, const Coord &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>fadingPaths</name>
      <anchorfile>a00114.html</anchorfile>
      <anchor>ad28b3b2fd11307bf33869c5bbdd27a95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double *</type>
      <name>angleOfArrival</name>
      <anchorfile>a00114.html</anchorfile>
      <anchor>a7f9a358fb5cdfd19e6d1e7c97627ad4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t *</type>
      <name>delay</name>
      <anchorfile>a00114.html</anchorfile>
      <anchor>a2f0c52cb4f441a2abba9aec17194fb66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>carrierFrequency</name>
      <anchorfile>a00114.html</anchorfile>
      <anchor>a8c91a22de8e520176877f7421d033ae7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Argument</type>
      <name>interval</name>
      <anchorfile>a00114.html</anchorfile>
      <anchor>aa15d56a2dadede1a0432103d60d6d927</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>JakesFading</name>
      <anchorfile>a00114.html</anchorfile>
      <anchor>a7dc4b4b3a51c8e00b4c8cf5223d51547</anchor>
      <arglist>(const JakesFading &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>JakesFading &amp;</type>
      <name>operator=</name>
      <anchorfile>a00114.html</anchorfile>
      <anchor>a71d2fb721f941e0f98fc31c3e609dbd4</anchor>
      <arglist>(const JakesFading &amp;)</arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>JakesFadingMapping</name>
      <anchorfile>a00114.html</anchorfile>
      <anchor>a512ebf4ce5a76e1580f7058c9fd49d90</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>JakesFadingMapping</name>
    <filename>a00115.html</filename>
    <base>SimpleConstMapping</base>
    <member kind="function">
      <type></type>
      <name>JakesFadingMapping</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>a5feea6585c074e1dab16486600db7a25</anchor>
      <arglist>(JakesFading *model, double relSpeed, const Argument &amp;start, const Argument &amp;interval, const Argument &amp;end)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JakesFadingMapping</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>aab1ea80168059a8f31e2c82629794d1e</anchor>
      <arglist>(const JakesFadingMapping &amp;o)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getValue</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>a23e8978d7aab4509f846ac6a8044de19</anchor>
      <arglist>(const Argument &amp;pos) const </arglist>
    </member>
    <member kind="function">
      <type>ConstMapping *</type>
      <name>constClone</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>ab8c347fa961711d3fd2c86b425cddc53</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>JakesFading *</type>
      <name>model</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>afe3bf29047cfa0f35c20926441261738</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>relSpeed</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>a02aab24700471b25a801010842d54cea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static DimensionSet</type>
      <name>dimensions</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>a52281acdf3981141a525adb9e18792e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>JakesFadingMapping &amp;</type>
      <name>operator=</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>a0e3e3c6d08f5fa391c738fd773708c47</anchor>
      <arglist>(const JakesFadingMapping &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LAddress</name>
    <filename>a00117.html</filename>
    <member kind="typedef">
      <type>long</type>
      <name>L2Type</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>aea56b60dcb5ae8c2bde465271daf7210</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>long</type>
      <name>L3Type</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>ad85cd9e8d9e7e9cd5d02dd740c4a12a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isL2Broadcast</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>a3890f1c7314c5695e32252468e6bd5a5</anchor>
      <arglist>(const L2Type &amp;pSrcAddr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isL3Broadcast</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>a97a5c1c1f73f4255cabc4e292c4ad503</anchor>
      <arglist>(const L3Type &amp;pSrcAddr)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const L2Type</type>
      <name>L2BROADCAST</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>a9f975ad0433f1fb8a01164f266a41f62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const L2Type</type>
      <name>L2NULL</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>a6db1e8dbd0d23dec49ce7b59f5c15976</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const L3Type</type>
      <name>L3BROADCAST</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>a11d63e8d897e072ed94da77028d38f60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const L3Type</type>
      <name>L3NULL</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>a629f951ff7bc5f42e945bbc5573c4a0f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Linear</name>
    <filename>a00118.html</filename>
    <templarg>_ContainerType</templarg>
    <base>InterpolatorBase</base>
    <member kind="typedef">
      <type>base_class_type::storage_type</type>
      <name>storage_type</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>ae4aff7c07b3e286d4231b3528e20f534</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::container_type</type>
      <name>container_type</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>a9b58190e85080e5f0625129ac36d625d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::key_type</type>
      <name>key_type</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>a015cf391305098dc6b77a24d650901c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::key_cref_type</type>
      <name>key_cref_type</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>a36d310d8c19c1213acd89410f44eb452</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::mapped_type</type>
      <name>mapped_type</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>ad160f7737fb0fb36c93371fdd1dabafc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::mapped_cref_type</type>
      <name>mapped_cref_type</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>a751115e8a051cbc3a73402ddd21dc646</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::pair_type</type>
      <name>pair_type</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>a8e8da73cf46884662fd5e34aefb768f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::iterator</type>
      <name>iterator</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>a1d942a4028e62e8244e4fe0444083088</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>a7b8513e26af82a2c8828da7142885a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::comparator_type</type>
      <name>comparator_type</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>acd86c11e235767ca73e44c429be39f67</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::interpolated</type>
      <name>interpolated</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>af09c69fdb1436d1e6287ead51b4eec6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Linear</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>a5d56885bbe8346505f27dcf8a244fbdf</anchor>
      <arglist>(mapped_cref_type oorv)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual interpolated</type>
      <name>operator()</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>a1927a59614f2880683c9ee3795ab59fd</anchor>
      <arglist>(const const_iterator &amp;first, const const_iterator &amp;last, key_cref_type pos, const_iterator upperBound) const </arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>InterpolatorBase&lt; _ContainerType &gt;</type>
      <name>base_class_type</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>a0945731f864d171dbf23386f301b9345</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static mapped_type</type>
      <name>linearInterpolationFactor</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>a6bc0698641121198130b488f54692c3f</anchor>
      <arglist>(key_cref_type t, key_cref_type t0, key_cref_type t1)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static mapped_type</type>
      <name>linearInterpolation</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>a427fcfc748f399f9ff8a17fb794ce82f</anchor>
      <arglist>(key_cref_type t, key_cref_type t0, key_cref_type t1, mapped_cref_type v0, mapped_cref_type v1)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Linear&lt; std::map&lt; Argument::mapped_type, Mapping * &gt; &gt;</name>
    <filename>a00119.html</filename>
    <base>InterpolatorBase&lt; std::map&lt; Argument::mapped_type, Mapping * &gt; &gt;</base>
    <member kind="typedef">
      <type>base_class_type::storage_type</type>
      <name>storage_type</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a4040145fe6161ede2994bd6762a1d533</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::container_type</type>
      <name>container_type</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>ac7116a5748d75ea3105be24501b9ec84</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::key_type</type>
      <name>key_type</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>aa50b0bf0efe24b268bd2d1338f3d1ac6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::key_cref_type</type>
      <name>key_cref_type</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>ab59de965f056c3e07cf77dceadd2ea55</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::mapped_type</type>
      <name>mapped_type</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a35b6316a117349e57e2b9d66851d2f85</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::mapped_cref_type</type>
      <name>mapped_cref_type</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a95f8cc4fc9eac2410529e020c445c495</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::pair_type</type>
      <name>pair_type</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>ad633b9d04356417275b775ea432dbc21</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::iterator</type>
      <name>iterator</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a3c815e58c3878a834078d9dd9a13b4f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a1d23ddc7054d05e1318a3f29f1c7ed02</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::comparator_type</type>
      <name>comparator_type</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>aff04706e49346c00d4fe1148eda956d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::interpolated</type>
      <name>interpolated</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a12116f0bfeffd29c01086e2fdf9ef36f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Linear</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a003c98781f6a5cb06766457bd2b2900e</anchor>
      <arglist>(mapped_cref_type oorv)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Linear</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>acfa0dc198816e5fc447edcca0b871bcb</anchor>
      <arglist>(const _Self &amp;o)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual interpolated</type>
      <name>operator()</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>ae9b11d23c7aa15f1f4f182caa81ce74b</anchor>
      <arglist>(const const_iterator &amp;first, const const_iterator &amp;last, key_cref_type pos, const_iterator upperBound) const </arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>InterpolatorBase&lt; std::map&lt; Argument::mapped_type, Mapping * &gt; &gt;</type>
      <name>base_class_type</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a31035d6e59ff98439fc3470be035f74c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Linear&lt; std::map&lt; Argument::mapped_type, Mapping * &gt; &gt;</type>
      <name>_Self</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>ac907b0558ebfa37d69b495b499839996</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static ConstMapping::argument_value_t</type>
      <name>linearInterpolationFactor</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>aab6548d5edb2e331e905f569d0e6cf0a</anchor>
      <arglist>(key_cref_type t, key_cref_type t0, key_cref_type t1)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LinearIntplMapping</name>
    <filename>a00120.html</filename>
    <base>Mapping</base>
    <member kind="function">
      <type></type>
      <name>LinearIntplMapping</name>
      <anchorfile>a00120.html</anchorfile>
      <anchor>a2d2d40994606ca63257931dfacdd6d91</anchor>
      <arglist>(const LinearIntplMapping &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>LinearIntplMapping &amp;</type>
      <name>operator=</name>
      <anchorfile>a00120.html</anchorfile>
      <anchor>a2375273490f558b53fb91741c7e9ec53</anchor>
      <arglist>(const LinearIntplMapping &amp;copy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>a00120.html</anchorfile>
      <anchor>a1b40ba5e6134a8d6eb7c4160188e9491</anchor>
      <arglist>(LinearIntplMapping &amp;s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearIntplMapping</name>
      <anchorfile>a00120.html</anchorfile>
      <anchor>a6cd4807affa51b25bf4dbad38b0ccc35</anchor>
      <arglist>(const ConstMapping *const left=NULL, const ConstMapping *const right=NULL, argument_value_cref_t f=Argument::MappedZero)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Mapping *</type>
      <name>clone</name>
      <anchorfile>a00120.html</anchorfile>
      <anchor>adeef3fecfcb6b2551ee205e6e1e69166</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual argument_value_t</type>
      <name>getValue</name>
      <anchorfile>a00120.html</anchorfile>
      <anchor>a8711b30cf4ab9148864caa503240adb4</anchor>
      <arglist>(const Argument &amp;pos) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MappingIterator *</type>
      <name>createIterator</name>
      <anchorfile>a00120.html</anchorfile>
      <anchor>a3a3735ea665eb5d05d8f8d5fc29f408d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MappingIterator *</type>
      <name>createIterator</name>
      <anchorfile>a00120.html</anchorfile>
      <anchor>ad0da987f0b7bd22db5a18ca2558533a4</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValue</name>
      <anchorfile>a00120.html</anchorfile>
      <anchor>a8da77310505c9367e0b687f5e9934555</anchor>
      <arglist>(const Argument &amp;, argument_value_cref_t)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ConstMapping *</type>
      <name>left</name>
      <anchorfile>a00120.html</anchorfile>
      <anchor>afafb880ac49c9f688a51b880cd421786</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ConstMapping *</type>
      <name>right</name>
      <anchorfile>a00120.html</anchorfile>
      <anchor>a4a77750e0d7b50c0c18b0b55f4d0baff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>argument_value_t</type>
      <name>factor</name>
      <anchorfile>a00120.html</anchorfile>
      <anchor>a77ebd0c5378c9b518e317578c1b4a936</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LinearIntplMappingIterator</name>
    <filename>a00121.html</filename>
    <base>MappingIterator</base>
    <member kind="function">
      <type></type>
      <name>LinearIntplMappingIterator</name>
      <anchorfile>a00121.html</anchorfile>
      <anchor>ae9431327ab0c4c20b29950cef7af45fc</anchor>
      <arglist>(ConstMappingIterator *leftIt, ConstMappingIterator *rightIt, argument_value_cref_t f)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LinearIntplMappingIterator</name>
      <anchorfile>a00121.html</anchorfile>
      <anchor>ae6640d047e2f8fbf1990d07f901d5dd0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasNext</name>
      <anchorfile>a00121.html</anchorfile>
      <anchor>afd257e5e5a70bf27869aac0ce2de9114</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>inRange</name>
      <anchorfile>a00121.html</anchorfile>
      <anchor>a43bdceb0dade66a9d763a1a7f9e34119</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>jumpToBegin</name>
      <anchorfile>a00121.html</anchorfile>
      <anchor>ac53a581da221a4467b11d731c6363ac9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>next</name>
      <anchorfile>a00121.html</anchorfile>
      <anchor>a3e091971d2bb7c505071812fce9e4376</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValue</name>
      <anchorfile>a00121.html</anchorfile>
      <anchor>a977903efca8bb9cc6c103fbb1d19f44f</anchor>
      <arglist>(argument_value_cref_t)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>jumpTo</name>
      <anchorfile>a00121.html</anchorfile>
      <anchor>a4815486cedcd67fad5fe08d86867f527</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>iterateTo</name>
      <anchorfile>a00121.html</anchorfile>
      <anchor>aba27952eacf852f6098aa05bc7bc3c8d</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual argument_value_t</type>
      <name>getValue</name>
      <anchorfile>a00121.html</anchorfile>
      <anchor>a431ef331baaeb739d6b7255ccca98fe2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Argument &amp;</type>
      <name>getPosition</name>
      <anchorfile>a00121.html</anchorfile>
      <anchor>ab8aba8a0341ee7e0731da138486fae36</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Argument &amp;</type>
      <name>getNextPosition</name>
      <anchorfile>a00121.html</anchorfile>
      <anchor>af0420a645633bd90a0f7775f2c6f527b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ConstMappingIterator *</type>
      <name>leftIt</name>
      <anchorfile>a00121.html</anchorfile>
      <anchor>a45afec325d2566593b51e75ca04b3d38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ConstMappingIterator *</type>
      <name>rightIt</name>
      <anchorfile>a00121.html</anchorfile>
      <anchor>a39075af633fbfe901e92bde9d2db2fa8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>argument_value_t</type>
      <name>factor</name>
      <anchorfile>a00121.html</anchorfile>
      <anchor>a79eddacf96dbc6279bee80b3c915132f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>LinearIntplMappingIterator</name>
      <anchorfile>a00121.html</anchorfile>
      <anchor>a0e1a7663fb7ef518ff1bf9ada2b332a4</anchor>
      <arglist>(const LinearIntplMappingIterator &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>LinearIntplMappingIterator &amp;</type>
      <name>operator=</name>
      <anchorfile>a00121.html</anchorfile>
      <anchor>a132ba8e77f92f4537495abcfd2553b0a</anchor>
      <arglist>(const LinearIntplMappingIterator &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LinearMobility</name>
    <filename>a00122.html</filename>
    <base>MovingMobilityBase</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00122.html</anchorfile>
      <anchor>a90721c1e167c816383c1f9a13ceb81cc</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>move</name>
      <anchorfile>a00122.html</anchorfile>
      <anchor>a144bed62ee46f5204c47fd84658e45d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>speed</name>
      <anchorfile>a00122.html</anchorfile>
      <anchor>a3125832e7a9d193f3795097d1a0f3ed7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>angle</name>
      <anchorfile>a00122.html</anchorfile>
      <anchor>aecacb8d29b3fd3f4cf85722abc9a3491</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>acceleration</name>
      <anchorfile>a00122.html</anchorfile>
      <anchor>aadef59efc17d450a0fa214321b84f90e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LinearNodeDistributionMobility</name>
    <filename>a00123.html</filename>
    <base>StationaryMobility</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>a0c7740d41d6a78d864ce6772af4fa664</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initializePosition</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>ae337e493a5e47702e04e97635cfe097e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>a56d4a8b917fc0b54d9ae6b3b3ea2fe13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>separation</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>a5e099e9f96401c94ca5982968cb41903</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>initialX</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>a1f6fca9eb646ac6ec546d85324af56dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>initialY</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>ad1144c778ef2cfcf0e93dade3ed1bb84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>orientation</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>acc28f9d315cc01f2b6414efc89ff0603</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LineSegmentsMobilityBase</name>
    <filename>a00124.html</filename>
    <base>MovingMobilityBase</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>a93df492d182199a12256c150f61da90b</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>move</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>af16aa2d19ba0c40366542d48a0605dcc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>setTargetPosition</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>ae9b65139861752e826e50eb23cd5a470</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>targetPosition</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>acf4b064a5f64a5bc493e497c1cf134ac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LMacLayer</name>
    <filename>a00126.html</filename>
    <base>BaseMacLayer</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LMacLayer</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>ae1dd0f3eaa94d6860542146339b10e42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a2100ca7de5c5eedb3e7f0e11ca9fca14</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>ab932e34db67404a0633a2b90e01f4d0f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerMsg</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a0a7619fa37aadbcc587c735cc5cbcf99</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUpperMsg</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a7de5ee6f865e3ae8e7a9841291d36a37</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a2397193676d296cc6757b31eef203bb3</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerControl</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a28c3d64e3643d3b72d153036797fffa0</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual macpkt_ptr_t</type>
      <name>encapsMsg</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a85b92d5d2292228cb408f4e72fca7caf</anchor>
      <arglist>(cPacket *)</arglist>
    </member>
    <member kind="enumeration">
      <name>States</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a201a85e1ae744df103db6773739690ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::list&lt; LMacPkt * &gt;</type>
      <name>MacQueue</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>aaa9c0584a77cf47d352e0b2d0c3ed7ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>findNewSlot</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a16e8e67123131834e7a3b4371c518203</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>attachSignal</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a14db63191f60dc3f3b906ce02eec6628</anchor>
      <arglist>(macpkt_ptr_t macPkt)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>SETUP_PHASE</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a6c97a461db5cd91f55d3d924b2a184dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector *</type>
      <name>slotChange</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>aae582a227411bd299295dec277ab7ad0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>States</type>
      <name>macState</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a48ad85f4aaba675b8f5287ad2bdd6007</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MiximRadio::RadioState</type>
      <name>radioState</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a87f91fbb028f4b50115f3831f135da99</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>slotDuration</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>aadcf84520c3dec4d76236cac8fdff135</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>controlDuration</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a3bcd0ad076a7868e7d8ae0e591d46fec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>mySlot</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a86d7beca6b3521cb80b44cd8c239b48d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numSlots</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a5182c67d55642bb0789bed7222a9e36c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>currSlot</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>aee8d9b764a36dd71fc189cbf6ef56d6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LAddress::L2Type</type>
      <name>occSlotsDirect</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a26e2b33eae9cef9a2b578173deba9a05</anchor>
      <arglist>[64]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LAddress::L2Type</type>
      <name>occSlotsAway</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a28d9565b4b0a059ce0826e2610afb912</anchor>
      <arglist>[64]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>reservedMobileSlots</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>aa5508d9b952be702c8a4d33d63dc517c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MacQueue</type>
      <name>macQueue</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a4d4d0764f3a0b35fce09f71fa334ede5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned</type>
      <name>queueLength</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>aa13209c2a38ad4cb43f4c73a3283e55c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>wakeup</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a5f29d36a7b775d2e5759171385408099</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>timeout</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>ab145d55474f361269726b49274c60ebb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>sendData</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a3e185546d0082216505c25f6d5d589ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>initChecker</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a1f8dff57ffe7b1168b88b113fe0fa5ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>checkChannel</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a9af231c98754f8d593aed11808e46614</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>start_lmac</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a53ddfdcb1ddd6f9eac3b4f614fc89d4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>send_control</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>aad1a5ee678f294b134ee56f0b96a4fa1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>bitrate</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>ab797f8cfd8e9b42c7ca72ed33c4af8d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DroppedPacket</type>
      <name>droppedPacket</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a5631de1b0bad61ff8c6366040cc4681c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>nicId</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a64482bc131ae8b5598fbf97db66f4552</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>txPower</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>abe6c59398a7e27aa3e421e65690ed6e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const LAddress::L2Type</type>
      <name>LMAC_NO_RECEIVER</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a04b4749559221c7d8f886e01ecc123e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const LAddress::L2Type</type>
      <name>LMAC_FREE_SLOT</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a83dd6174b208019b6422349c1ded0e87</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>LMacLayer</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>ad94b652c104d0d286c3035d0febdb61f</anchor>
      <arglist>(const LMacLayer &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>LMacLayer &amp;</type>
      <name>operator=</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>abdc0b711b4cc157a0da08ccfbbd4060c</anchor>
      <arglist>(const LMacLayer &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LogNormalShadowing</name>
    <filename>a00127.html</filename>
    <base>AnalogueModel</base>
    <member kind="function">
      <type></type>
      <name>LogNormalShadowing</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>a3b0de39b3e1ba72bcf4db51269031af9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>initFromMap</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>adb196b00d9f95a77c25945aca31d8565</anchor>
      <arglist>(const ParameterMap &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>filterSignal</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>ac7fd9376f5521851bd3888d99dc451c2</anchor>
      <arglist>(airframe_ptr_t, const Coord &amp;, const Coord &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>randomLogNormalGain</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>ab81e4e559d16d59321fe0dced4a45806</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>mean</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>aee67e375c4b7d3c77626db7cade7dc98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>stdDev</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>aca2682f5148bf872b64cb1dd6495829b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>interval</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>a7b8e51fa4f9b3e1369cc9f882eef22ee</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Mac80211</name>
    <filename>a00128.html</filename>
    <base>BaseMacLayer</base>
    <class kind="struct">Mac80211::NeighborEntry</class>
    <member kind="enumeration">
      <name>Mac80211MessageKinds</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>ae423db101e8431b0cbd67c347076c44a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>ab81dae24d79c2ef010301e2c219966c1</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a2f3c51473a890e1c3e3afb5dc1b75252</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="enumeration">
      <name>timerType</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a381307739876ed0d015352b95bd93186</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>State</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a7ff0b8b49d1a93feae6f808caf5fe447</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::list&lt; Mac80211Pkt * &gt;</type>
      <name>MacPktList</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a565ab82077f95d80ec44a4a4fed08ab9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::list&lt; NeighborEntry &gt;</type>
      <name>NeighborList</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a072f068412a3577d8d11ca98c52a9c48</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a990af33f857669759da0cbeebd1c2431</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUpperMsg</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>af7e230f8713536482417699f2f6bee71</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerMsg</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>ac8bfb04590aab2434bd8d17ee4e213d9</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerControl</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a41f1a7b86f420e1f840c14badf2b0890</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleEndContentionTimer</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a0a87fa1791117ef1dd1841ba217e4245</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleMsgNotForMe</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a0377ddefba33b8d50c7bf4045354d7bb</anchor>
      <arglist>(cMessage *af, simtime_t_cref duration)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleMsgForMe</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>aa0b767642d86d3b66f1d3258065fe5ae</anchor>
      <arglist>(Mac80211Pkt *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleBroadcastMsg</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>adfcf8b7a5e1db233a1bd717cecaf49bd</anchor>
      <arglist>(Mac80211Pkt *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleEndTransmission</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>afe4300147d9ea5e4d3e3d8c98ff20436</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleEndSifsTimer</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a7d36a55827a7ea91b2539c86d79349af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleTimeoutTimer</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>ab5fcba8c7a3878ac59195a483ba35a12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleNavTimer</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a23a142d65d7a0dcba4a60c0f509ab5b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleRTSframe</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a98ad0d3935d620b33302e5230b395685</anchor>
      <arglist>(Mac80211Pkt *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleDATAframe</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>ab0844f9dbcece750c9a58ca9f0a73fe1</anchor>
      <arglist>(Mac80211Pkt *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleACKframe</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a50cb85360462eb7d256ec8a0b493ca44</anchor>
      <arglist>(Mac80211Pkt *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleCTSframe</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>ae1e17af7dddc261d7947d48a1f4d0e21</anchor>
      <arglist>(Mac80211Pkt *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>dataTransmissionFailed</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>aa70252cee19dfda74662f06075ee52bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>rtsTransmissionFailed</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>ad44649781514babc1a180bf5c82be983</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendDATAframe</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a7a4ff22b4b999827a898794923115880</anchor>
      <arglist>(Mac80211Pkt *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendACKframe</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a1c404a5176db493c2fefb71537783607</anchor>
      <arglist>(Mac80211Pkt *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendCTSframe</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a1fd59a589e53facb68c13be84521a49e</anchor>
      <arglist>(Mac80211Pkt *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendRTSframe</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a3104750758ab171b20ffcfeae0079a78</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendBROADCASTframe</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a26b30d048980b56d79c04e859bfce009</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual macpkt_ptr_t</type>
      <name>encapsMsg</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a23738e3ef2aa14da9dbdcb3d0abbf4e2</anchor>
      <arglist>(cPacket *netw)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual cPacket *</type>
      <name>decapsMsg</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a9c6a33b29ff6e1500947fd6ca221b13e</anchor>
      <arglist>(macpkt_ptr_t frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>beginNewCycle</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>ab3030c86acac78401f877a61cefcdad6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>simtime_t</type>
      <name>backoff</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>ade2c913df312fd4fc46106c1134889b8</anchor>
      <arglist>(bool rtscts=true)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>testMaxAttempts</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a72e78257babff863ca8749b2bb1a97f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>simtime_t</type>
      <name>timeOut</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a424851e88bb229fcc3c59cfea80a9079</anchor>
      <arglist>(Mac80211MessageKinds type, double br)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>simtime_t</type>
      <name>packetDuration</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a6732e4a776e78432bf5dd9dd26de2f7d</anchor>
      <arglist>(double bits, double br)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const char *</type>
      <name>stateName</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>ade8a90e665191333e610b60bad4a32a1</anchor>
      <arglist>(State state)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setState</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a9fc6eb078e53740d354f8ea7b9d94713</anchor>
      <arglist>(State state)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>rtsCts</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>aa316943080d714ffc3c0bf54ea8aeb08</anchor>
      <arglist>(Mac80211Pkt *m)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>suspendContention</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a9ae0815a0e01c4d4fd13a87393f837a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>retrieveBitrate</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a7905be98b60b2a709dfbcd7e16bc761e</anchor>
      <arglist>(const LAddress::L2Type &amp;destAddress)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addNeighbor</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a8dd543a1a0b89f98af6d39d28dbd9e74</anchor>
      <arglist>(Mac80211Pkt *af)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>NeighborList::iterator</type>
      <name>findNeighbor</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>aaf9d15b3d9055b2f56d4eddce7cc9850</anchor>
      <arglist>(const LAddress::L2Type &amp;address)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>NeighborList::iterator</type>
      <name>findOldestNeighbor</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a967bb2466f35274cc945db0d9e044eeb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>senseChannelWhileIdle</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a59cb9e6071f33bc460a2f3a662c4bc59</anchor>
      <arglist>(simtime_t_cref duration)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Signal *</type>
      <name>createSignal</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a3a62f334346a15619853a8c6c87367aa</anchor>
      <arglist>(simtime_t_cref start, simtime_t_cref length, double power, double bitrate)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>timeout</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a2d31f97b0662b8e37f090c3b996cec82</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>nav</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a35efb0198d0085a341aba515bec9146f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ChannelSenseRequest *</type>
      <name>contention</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a7bd4f3adc205b150f9fa406fa582f0b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ChannelSenseRequest *</type>
      <name>endSifs</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>ace80836b6fcb1681f6b2d49466f87fb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>chSenseStart</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a8104daf3041394b73fe545427cbc02d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>State</type>
      <name>state</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a56fa75f3eb056ae29b1a4b8da0035d8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>defaultBitrate</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a226566e4a56cfed2928acc87ff3af90a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>txPower</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a592eee2a24a6fcadd6fdf912a101719f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>centerFreq</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a67eba657efe23f5e5c21904f4744261d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>bitrate</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a126c9db5a54bafa6ad74eb3ee24bd936</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>autoBitrate</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a979883a8da4b308de4a8e79b5bbbe2e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; double &gt;</type>
      <name>snrThresholds</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a1cd38454a518f922ba57f68d22e2f31e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned</type>
      <name>queueLength</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>ae8892c105c3f0fb2b6f28634bb099f31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>nextIsBroadcast</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a5d8e9b53c8d6cb0116feed506d843e18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MacPktList</type>
      <name>fromUpperLayer</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a969e8e3a592dffccea28596c61b2af50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned</type>
      <name>longRetryCounter</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a11fb608b3564e2d2cd41b463b1a8cc90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned</type>
      <name>shortRetryCounter</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a9bbc3d71eddb62c4e12dcd500a58b0bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>remainingBackoff</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a58484d1a6f2031548d433d18438042e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>currentIFS</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a4a9d1c8d45c46f18afa0f07f5b6572f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>rtsCtsThreshold</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a6ad4dd93415c98c969df05f53d739cfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>delta</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>ab9f0ea820748af6d640569fc76f39659</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned</type>
      <name>neighborhoodCacheSize</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>ae62ff2c9617e5782f6f7231e36d1574d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>neighborhoodCacheMaxAge</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>aede2e9e4e32ef871e3a59c51564123de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NeighborList</type>
      <name>neighbors</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a4caf1f3c2c004851555c9c691b82edf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>switching</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a9f9f566e85a76f63e63b5907bf9ad48a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>fsc</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a026837b7167d230bbe79a1e0630c7578</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>Mac80211</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>ae2d989af4eab21c27e527f80192a27ba</anchor>
      <arglist>(const Mac80211 &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Mac80211 &amp;</type>
      <name>operator=</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>aab98ee4e3ed888adc56f387a3cdc9138</anchor>
      <arglist>(const Mac80211 &amp;)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Mac80211::NeighborEntry</name>
    <filename>a00154.html</filename>
    <member kind="variable">
      <type>LAddress::L2Type</type>
      <name>address</name>
      <anchorfile>a00154.html</anchorfile>
      <anchor>af7a33b9ab7e87d051c3ea834e0e3cd0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>fsc</name>
      <anchorfile>a00154.html</anchorfile>
      <anchor>ab53e5872c7cbaabb51ee6dcce7c962bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>age</name>
      <anchorfile>a00154.html</anchorfile>
      <anchor>a2755c030554626d73819ade87a5685e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>bitrate</name>
      <anchorfile>a00154.html</anchorfile>
      <anchor>ac39eee7ff1fa6da1e81b65d2d30f8954</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Mac80211MultiChannel</name>
    <filename>a00129.html</filename>
    <base>Mac80211</base>
    <member kind="function">
      <type>void</type>
      <name>switchChannel</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>ac67b9dae263f63f29d7be1d4337e3a9c</anchor>
      <arglist>(int channel)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getChannel</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>abe1654a1a6dfdad14fc96559cf6265bd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>aa7351afc794f983e34dbc86d63cb3dea</anchor>
      <arglist>(int stage)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MACAddress</name>
    <filename>a00130.html</filename>
    <member kind="function">
      <type></type>
      <name>MACAddress</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>a155b01d9d9c04fbe13ea9b821519b571</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MACAddress</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>acd5a34c4730c3ce448d9d727bb693827</anchor>
      <arglist>(uint64 bits)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MACAddress</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>a46d88d3231c166f8f6305e181e62a02e</anchor>
      <arglist>(const char *hexstr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MACAddress</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>a9ab1361f2773c6840f8fc96f73000b20</anchor>
      <arglist>(const MACAddress &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>MACAddress &amp;</type>
      <name>operator=</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>a81e0e779bcc372284a137c141eb14f3d</anchor>
      <arglist>(const MACAddress &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getAddressSize</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>a5f94a6533e6b7854c43c0a562622156a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned char</type>
      <name>getAddressByte</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>ac6db3e8b6dd37f0a93d89367fefb9d27</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAddressByte</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>a58b9995961b675dc92e06e769c01565c</anchor>
      <arglist>(unsigned int k, unsigned char addrbyte)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tryParse</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>a4e4d6d6314b17e0b7c76356db6b7e794</anchor>
      <arglist>(const char *hexstr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAddress</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>a8098d36b9f4a40ef61e1a3cb62cb27dd</anchor>
      <arglist>(const char *hexstr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getAddressBytes</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>aecea3ba50c9d01ec71c7bde14c71a9e4</anchor>
      <arglist>(unsigned char *addrbytes) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getAddressBytes</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>a926e0823c90abbeb2f137999f6ed9851</anchor>
      <arglist>(char *addrbytes) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAddressBytes</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>a6804ca5591fc6eeb256cc487805a0927</anchor>
      <arglist>(unsigned char *addrbytes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAddressBytes</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>acaa8ac5836c4aff98bb7ef6b7c3b047a</anchor>
      <arglist>(char *addrbytes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBroadcast</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>a38c4ea471051c76e593f2c6b0340b1fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isBroadcast</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>aa65a288ef8fe0e08e66912ffda5e3706</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMulticast</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>aec80ce7ee8f529716e4b9354e93ca3c0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUnspecified</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>ae41af013d782b46483e7d0c84f0ed107</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>str</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>a5eed6450abcdd795b2a3d59828a29802</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>getInt</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>a79f00509111e457048de0d6f5ae7aede</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>a2d1669ce517436105cd75faed677a303</anchor>
      <arglist>(const MACAddress &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>af52a8fbbad1c1d4fa4c4c4689911698d</anchor>
      <arglist>(const MACAddress &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>a931bca85d72f853c0a5bda55edd85365</anchor>
      <arglist>(const MACAddress &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compareTo</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>a606bb3ec3982d81913c464c18f34db6f</anchor>
      <arglist>(const MACAddress &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>InterfaceToken</type>
      <name>formInterfaceIdentifier</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>af646c7d6a3dbe4a94465fd3ec144f08f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>a65248517f7a54605e822d16f1b2622ef</anchor>
      <arglist>(const MACAddress &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>a22b682545ec7ed5bad76b80405bb9d41</anchor>
      <arglist>(const MACAddress &amp;other) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MACAddress</type>
      <name>generateAutoAddress</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>a020d8e71aa50506e2b29a15833fedfd9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const MACAddress</type>
      <name>UNSPECIFIED_ADDRESS</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>a9083fdb636ab09f77e7af806f2d471b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const MACAddress</type>
      <name>BROADCAST_ADDRESS</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>a64288e3935e32fec17884c040cf2d2e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const MACAddress</type>
      <name>MULTICAST_PAUSE_ADDRESS</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>ad7361315e8e61b3e5e1494c55cc4721f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint64</type>
      <name>address</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>a0c29ad39890488e0f7bc4ee20624e04e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static unsigned int</type>
      <name>autoAddressCtr</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>a061dad67b44a20a397f0ea3b23666747</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MacEstimateCostProcess</name>
    <filename>a00131.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getCost</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>a5c60c59e7dd7bbbcf434de4de63ff62e</anchor>
      <arglist>(int, MACAddress &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getNumCost</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>a4c6c2493729c01c668036f6b5643a41b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNumNeighbors</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>a4865baf83c05cd311e1691ffccf7e676</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNeighbors</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>a8845f223b3666ceaee285b7a2b554c0b</anchor>
      <arglist>(MACAddress[])=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MacToNetwControlInfo</name>
    <filename>a00132.html</filename>
    <member kind="function">
      <type></type>
      <name>MacToNetwControlInfo</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>a64db17e5d3c98005d3116db08853960d</anchor>
      <arglist>(const LAddress::L2Type &amp;lastHop, double ber=0, double rssi=0)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getBitErrorRate</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>affe2b8ca5fb613155ffa6818dd5338ae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBitErrorRate</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>ac893214f0521cb356739841c63f1c498</anchor>
      <arglist>(double ber)</arglist>
    </member>
    <member kind="function">
      <type>const LAddress::L2Type &amp;</type>
      <name>getLastHopMac</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>a308453ed9a395b5150618bca3294d0b9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLastHopMac</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>a789cde71306e4d00c552c502a09e9a12</anchor>
      <arglist>(const LAddress::L2Type &amp;lastHop)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getRSSI</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>ac7eaf00a314034039ed8dc283518332b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRSSI</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>ac912ee19746ecde01512876568c95839</anchor>
      <arglist>(double _rssi)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cObject *</type>
      <name>setControlInfo</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>a08ffc5756ab41f2c5ba4e7fa1f64b924</anchor>
      <arglist>(cMessage *const pMsg, const LAddress::L2Type &amp;pSrcAddr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const LAddress::L2Type &amp;</type>
      <name>getAddress</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>a94a1bdc4327f5fdefd1b6b8112d21dc4</anchor>
      <arglist>(cMessage *const pMsg)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const LAddress::L2Type &amp;</type>
      <name>getAddressFromControlInfo</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>a3749066e121d0e912e6aeb92dd8a480c</anchor>
      <arglist>(cObject *const pCtrlInfo)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>bitErrorRate</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>a0be178839f0e97e8695e5915e84b6dd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LAddress::L2Type</type>
      <name>lastHopMac</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>a69d09f2d4b0f7603b5cfa0bd8efafe61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>rssi</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>a5cfb3c928d4706098e74ac8e1dc95b7e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MacToPhyControlInfo</name>
    <filename>a00133.html</filename>
    <member kind="function">
      <type></type>
      <name>MacToPhyControlInfo</name>
      <anchorfile>a00133.html</anchorfile>
      <anchor>acde623038e9b9a2b756e48cb5b393d8a</anchor>
      <arglist>(Signal *signal=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MacToPhyControlInfo</name>
      <anchorfile>a00133.html</anchorfile>
      <anchor>ad4a56f10fab531b0076aadb0904175b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSignal</name>
      <anchorfile>a00133.html</anchorfile>
      <anchor>a37b1b75e5bc8026af8d3de5bb3b318ab</anchor>
      <arglist>(Signal *s)</arglist>
    </member>
    <member kind="function">
      <type>Signal *</type>
      <name>retrieveSignal</name>
      <anchorfile>a00133.html</anchorfile>
      <anchor>a5e04d8d4088109ccccb7c3fcdae526a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cObject *</type>
      <name>setControlInfo</name>
      <anchorfile>a00133.html</anchorfile>
      <anchor>a5b1c091d57ea342922940df4d66491df</anchor>
      <arglist>(cMessage *const pMsg, Signal *const pSignal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Signal *</type>
      <name>getSignal</name>
      <anchorfile>a00133.html</anchorfile>
      <anchor>a77773ff7342a9bd5932f7e8764e7b222</anchor>
      <arglist>(cMessage *const pMsg)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Signal *</type>
      <name>getSignalFromControlInfo</name>
      <anchorfile>a00133.html</anchorfile>
      <anchor>a5c74f62a53ff9b71ba39192f02b28cf7</anchor>
      <arglist>(cObject *const pCtrlInfo)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MacToPhyControlInfo</name>
      <anchorfile>a00133.html</anchorfile>
      <anchor>a54180de46bca6176817d2872b9aa6c26</anchor>
      <arglist>(const MacToPhyControlInfo &amp;o)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>MacToPhyControlInfo &amp;</type>
      <name>operator=</name>
      <anchorfile>a00133.html</anchorfile>
      <anchor>a1407d34f41332ffe67f0de0a1398606f</anchor>
      <arglist>(const MacToPhyControlInfo &amp;o)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Signal *</type>
      <name>signal</name>
      <anchorfile>a00133.html</anchorfile>
      <anchor>a05a564d743e50aa370ee796ee932c8a6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MacToPhyInterface</name>
    <filename>a00134.html</filename>
    <member kind="enumeration">
      <name>BasePhyMessageKinds</name>
      <anchorfile>a00134.html</anchorfile>
      <anchor>a36bc50a86bf1cc0f9efd374613d61a52</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TX_OVER</name>
      <anchorfile>a00134.html</anchorfile>
      <anchor>a36bc50a86bf1cc0f9efd374613d61a52ab00e54021af4a33a84ac61a7543c7528</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RADIO_SWITCHING_OVER</name>
      <anchorfile>a00134.html</anchorfile>
      <anchor>a36bc50a86bf1cc0f9efd374613d61a52a876c7366bd2bcb675b41e60007831d06</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHANNEL_SENSE_REQUEST</name>
      <anchorfile>a00134.html</anchorfile>
      <anchor>a36bc50a86bf1cc0f9efd374613d61a52aa6ff58f5815b155504d37339ee5c7222</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AIR_FRAME</name>
      <anchorfile>a00134.html</anchorfile>
      <anchor>a36bc50a86bf1cc0f9efd374613d61a52a96eafe94b4f472727793a10013af7671</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LAST_BASE_PHY_KIND</name>
      <anchorfile>a00134.html</anchorfile>
      <anchor>a36bc50a86bf1cc0f9efd374613d61a52a25b918f3c2f7bd926610b544bc78497a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getRadioState</name>
      <anchorfile>a00134.html</anchorfile>
      <anchor>a00dd43576b4da205117d53bd3baadc71</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual simtime_t</type>
      <name>setRadioState</name>
      <anchorfile>a00134.html</anchorfile>
      <anchor>ad25abbad9aa16bdbf24bf1dd582b1c6f</anchor>
      <arglist>(int rs)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ChannelState</type>
      <name>getChannelState</name>
      <anchorfile>a00134.html</anchorfile>
      <anchor>affa30a25b96ffe387b22c68ca35f77a5</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual long</type>
      <name>getPhyHeaderLength</name>
      <anchorfile>a00134.html</anchorfile>
      <anchor>a700bd4a7b79a58b2c5713f976ba7e4b7</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setCurrentRadioChannel</name>
      <anchorfile>a00134.html</anchorfile>
      <anchor>a2e770727361fe1774b88d5667b89417e</anchor>
      <arglist>(int newRadioChannel)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getCurrentRadioChannel</name>
      <anchorfile>a00134.html</anchorfile>
      <anchor>a6271dfe09bf5cef8c8afb96de00182ab</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNbRadioChannels</name>
      <anchorfile>a00134.html</anchorfile>
      <anchor>a8df74a8d059d506f966ca52e72643814</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MacToUWBIRPhyControlInfo</name>
    <filename>a00135.html</filename>
    <base>MacToPhyControlInfo</base>
    <member kind="function">
      <type></type>
      <name>MacToUWBIRPhyControlInfo</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>a69accfd1326a7276561a8fb10b73c998</anchor>
      <arglist>(Signal *signal=0, const IEEE802154A::config &amp;cfg=IEEE802154A::cfg_mandatory_16M)</arglist>
    </member>
    <member kind="function">
      <type>const IEEE802154A::config &amp;</type>
      <name>getConfig</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>ac66a3e0c04412f2f8753f6a77d97981e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cObject *</type>
      <name>setControlInfo</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>ac8d6c911d43d20157843abb105d84764</anchor>
      <arglist>(cMessage *const pMsg, Signal *const pSignal, const IEEE802154A::config &amp;pConfig=IEEE802154A::cfg_mandatory_16M)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Signal *</type>
      <name>getSignalFromControlInfo</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>aa989c47bc332dfd13d2af6ba6f2e9555</anchor>
      <arglist>(cObject *const pCtrlInfo)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const IEEE802154A::config &amp;</type>
      <name>getConfigFromControlInfo</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>a227d8c2e990f594fe6b9828d40011572</anchor>
      <arglist>(cObject *const pCtrlInfo)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IEEE802154A::config</type>
      <name>cfg</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>a7c3a12d58859d94b06e713201ec7e95e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Mapping</name>
    <filename>a00136.html</filename>
    <base>ConstMapping</base>
    <member kind="enumeration">
      <name>InterpolationMethod</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>aa713c0cd84f74727888bef5b9e8b0643</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STEPS</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>aa713c0cd84f74727888bef5b9e8b0643a14b1d21bd98ca6e7e77dca120dd5eb0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NEAREST</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>aa713c0cd84f74727888bef5b9e8b0643afc951c0875bda3e7b8f6a9f7d4e90d01</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINEAR</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>aa713c0cd84f74727888bef5b9e8b0643ac8a952576b8d13258ba0f3c0f1584f9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Mapping &amp;</type>
      <name>operator=</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>a973f72ed384d6cead14f23d20bafee93</anchor>
      <arglist>(const Mapping &amp;copy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>a4aaa0e0cce7a366dee7b5be53595a74f</anchor>
      <arglist>(Mapping &amp;s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Mapping</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>ab21dd4d22496e6b5dc34b8b6a55553b1</anchor>
      <arglist>(const DimensionSet &amp;dims)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Mapping</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>a4d721f5e319fdcf56b4285d1368795d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Mapping</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>ad5c7bc87eacd0314404aa2e6dbe091ba</anchor>
      <arglist>(const Mapping &amp;o)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setValue</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>ab8906dfac661d5c6a0a35cf1744f06ed</anchor>
      <arglist>(const Argument &amp;pos, argument_value_cref_t value)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>appendValue</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>a2a63bc33cabcddf8c0f5938afd2e3328</anchor>
      <arglist>(const Argument &amp;pos, argument_value_cref_t value)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual MappingIterator *</type>
      <name>createIterator</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>ab78335a7a119893d1e04495f7f587ca3</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual MappingIterator *</type>
      <name>createIterator</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>a8723ba0f78d2f259f1f150c9db346cb2</anchor>
      <arglist>(const Argument &amp;pos)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstMappingIterator *</type>
      <name>createConstIterator</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>acdf62aed4b8a469e63c036e75567c2e3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstMappingIterator *</type>
      <name>createConstIterator</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>aa659ff5ecd1020261cbd39d136ea1f57</anchor>
      <arglist>(const Argument &amp;pos) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Mapping *</type>
      <name>clone</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>a95f064bd4bc5a22aef1cf0e4a6052ec7</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstMapping *</type>
      <name>constClone</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>afcd49c5a61e13dfa6041531540a252be</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MappingIterator</name>
    <filename>a00137.html</filename>
    <base>ConstMappingIterator</base>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setValue</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>a68c80b10de257d7cfd68f49bfd6a2cbe</anchor>
      <arglist>(argument_value_cref_t value)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MappingUtils</name>
    <filename>a00138.html</filename>
    <member kind="typedef">
      <type>std::list&lt; const ConstMapping * &gt;</type>
      <name>MappingBuffer</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>ad235ea24201e93c2b28a1c65c2f4fa6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Mapping *</type>
      <name>createMapping</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>a0c61c76ba04339162563339b23bf42e9</anchor>
      <arglist>(const DimensionSet &amp;domain=DimensionSet(Dimension::time), Mapping::InterpolationMethod intpl=Mapping::LINEAR)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Mapping *</type>
      <name>createMapping</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>acca15c41da58e61619e67d1ec1538a9e</anchor>
      <arglist>(Mapping::argument_value_cref_t outOfRangeValue, const DimensionSet &amp;domain=DimensionSet(Dimension::time), Mapping::InterpolationMethod intpl=Mapping::LINEAR)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Mapping *</type>
      <name>applyElementWiseOperator</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>a45c56f1ea72b2f8b278d1016ac6228df</anchor>
      <arglist>(const ConstMapping &amp;f1, const ConstMapping &amp;f2, const Argument &amp;intvlStart, const Argument &amp;intvlEnd, Operator op)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Mapping *</type>
      <name>applyElementWiseOperator</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>a2864c33a93f9ce23403d0c84ca9a19e2</anchor>
      <arglist>(const ConstMapping &amp;f1, const ConstMapping &amp;f2, Operator op, Mapping::argument_value_cref_t outOfRangeVal=Argument::MappedZero, bool contOutOfRange=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Mapping *</type>
      <name>multiply</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>a11550dc6dc55beb5a14def9ffb501a40</anchor>
      <arglist>(const ConstMapping &amp;f1, const ConstMapping &amp;f2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Mapping *</type>
      <name>add</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>a0d8bf65254d099c87948c1c300986696</anchor>
      <arglist>(const ConstMapping &amp;f1, const ConstMapping &amp;f2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Mapping *</type>
      <name>subtract</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>a37d38fd0a9593e6f055ac8d90758965e</anchor>
      <arglist>(const ConstMapping &amp;f1, const ConstMapping &amp;f2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Mapping *</type>
      <name>divide</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>ad5ccda215590380a9798e4dd51ede69c</anchor>
      <arglist>(const ConstMapping &amp;f1, const ConstMapping &amp;f2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Mapping *</type>
      <name>multiply</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>aab8b49872f55a0162ee1c25f0f4af5b1</anchor>
      <arglist>(const ConstMapping &amp;f1, const ConstMapping &amp;f2, Mapping::argument_value_cref_t outOfRangeVal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Mapping *</type>
      <name>add</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>a372c8f56f2e7f5dc0ce06daf4e0db128</anchor>
      <arglist>(const ConstMapping &amp;f1, const ConstMapping &amp;f2, Mapping::argument_value_cref_t outOfRangeVal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Mapping *</type>
      <name>subtract</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>a217539e608efcc8ccf7766c9b9733a17</anchor>
      <arglist>(const ConstMapping &amp;f1, const ConstMapping &amp;f2, Mapping::argument_value_cref_t outOfRangeVal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Mapping *</type>
      <name>divide</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>a2cf2fb8da23ea9c12f9946559fe954c8</anchor>
      <arglist>(const ConstMapping &amp;f1, const ConstMapping &amp;f2, Mapping::argument_value_cref_t outOfRangeVal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Argument::mapped_type</type>
      <name>findMax</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>afbe1a1e1d2becd66d2c0d5a8ac42b478</anchor>
      <arglist>(const ConstMapping &amp;m, Argument::mapped_type_cref cRetNotFound=cMaxNotFound)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Argument::mapped_type</type>
      <name>findMax</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>ac9d1a808dbca5da873af58f1da4cbcf4</anchor>
      <arglist>(const ConstMapping &amp;m, const Argument &amp;min, const Argument &amp;max, Argument::mapped_type_cref cRetNotFound=cMaxNotFound)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Argument::mapped_type</type>
      <name>findMin</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>a5d9c4e3dcaddccfa65f21212d0fee2cf</anchor>
      <arglist>(const ConstMapping &amp;m, Argument::mapped_type_cref cRetNotFound=cMinNotFound)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Argument::mapped_type</type>
      <name>findMin</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>adb9e9ced268b9a5d1d4f6d34738654aa</anchor>
      <arglist>(const ConstMapping &amp;m, const Argument &amp;min, const Argument &amp;max, Argument::mapped_type_cref cRetNotFound=cMinNotFound)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>addDiscontinuity</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>af1b74160ce464f825e0715f1fc656f5f</anchor>
      <arglist>(Mapping *m, const Argument &amp;pos, Argument::mapped_type_cref value, simtime_t_cref limitTime, Argument::mapped_type_cref limitValue)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static simtime_t</type>
      <name>pre</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>a2cf7c04c0adea7f6e9fe49101b0197c3</anchor>
      <arglist>(simtime_t_cref t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static simtime_t</type>
      <name>post</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>a31183e79401391df3e2d250846ae8d0e</anchor>
      <arglist>(simtime_t_cref t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static simtime_t</type>
      <name>incNextPosition</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>a28683c5c7dcc795157020a36043a1de3</anchor>
      <arglist>(simtime_t_cref t)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Argument::mapped_type</type>
      <name>cMinNotFound</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>a3db893e8948a5af5fe947fb0740d86ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Argument::mapped_type</type>
      <name>cMaxNotFound</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>a2a3f154e68d94b4b5a5ed580bb3e756f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static const ConstMapping *</type>
      <name>createCompatibleMapping</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>a54b5597499f282d0f2c9dd18894698f9</anchor>
      <arglist>(const ConstMapping &amp;src, const ConstMapping &amp;dst)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static bool</type>
      <name>iterateToNext</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>a6a768601098bcb0d998be2c742126433</anchor>
      <arglist>(ConstMappingIterator *it1, ConstMappingIterator *it2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MassMobility</name>
    <filename>a00139.html</filename>
    <base>LineSegmentsMobilityBase</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>a54edb0941c1fe0e902ef0b3723d73687</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>move</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>ac3c5feac17ea67c81db48f49c5c67505</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setTargetPosition</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>a8992eab0d8f53b6261b0edd5b4d79655</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cPar *</type>
      <name>changeIntervalParameter</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>a8b25e9f336d6a2cd4e446e03626f8a97</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cPar *</type>
      <name>changeAngleByParameter</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>ae6e8fffc42a44f4c148dfb7eb68c0c04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cPar *</type>
      <name>speedParameter</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>aa2e9a4091c2f3a3ef3135992ba813b00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>angle</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>af2e185fae6e25647a581cd29adb3b273</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MiximBatteryAccess</name>
    <filename>a00140.html</filename>
    <base>BaseModule</base>
    <member kind="function">
      <type></type>
      <name>MiximBatteryAccess</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>a1e3f54678959626e25fbbb9a4eca38c5</anchor>
      <arglist>(unsigned stacksize)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>registerWithBattery</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>a18d72d9f422e37b173dad102b1e6b8a8</anchor>
      <arglist>(const std::string &amp;name, int numAccounts)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>draw</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>a3b26c010451c9d339aa342a4efa3b3d6</anchor>
      <arglist>(DrawAmount &amp;amount, int account)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>drawCurrent</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>a523efb31254a730e699983b50dbee44d</anchor>
      <arglist>(double amount, int account)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>drawEnergy</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>adad54ef2df7fd5bd9b2836a732cef743</anchor>
      <arglist>(double amount, int account)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BaseBattery *</type>
      <name>battery</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>a76df8da8908d86b082817b03de36fcde</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>deviceID</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>ac8cd6166e3b0bd6e02b4113d360a41bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>MiximBatteryAccess</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>a9ba775d0bfe35ffa3640c3d68eea3364</anchor>
      <arglist>(const MiximBatteryAccess &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>MiximBatteryAccess &amp;</type>
      <name>operator=</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>adb5cb04f46aa5bcf4b4b1f12d357e050</anchor>
      <arglist>(const MiximBatteryAccess &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MiximRadio</name>
    <filename>a00141.html</filename>
    <member kind="enumeration">
      <name>RadioState</name>
      <anchorfile>a00141.html</anchorfile>
      <anchor>a5d69aacb1cf6a57827f07224219fccb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RX</name>
      <anchorfile>a00141.html</anchorfile>
      <anchor>a5d69aacb1cf6a57827f07224219fccb7a2c1aea88fe8363141c138da817461953</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TX</name>
      <anchorfile>a00141.html</anchorfile>
      <anchor>a5d69aacb1cf6a57827f07224219fccb7a4f6c3dfae0f5fccb76b1d42f6ccc785d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SLEEP</name>
      <anchorfile>a00141.html</anchorfile>
      <anchor>a5d69aacb1cf6a57827f07224219fccb7afd684ca0a1c84f153dec831272ccde42</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SWITCHING</name>
      <anchorfile>a00141.html</anchorfile>
      <anchor>a5d69aacb1cf6a57827f07224219fccb7adb16d903144a4b227138692871b6edde</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NUM_RADIO_STATES</name>
      <anchorfile>a00141.html</anchorfile>
      <anchor>a5d69aacb1cf6a57827f07224219fccb7ac1eb11ffe24036a5e7c1a07035db2bba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MiximRadio</name>
      <anchorfile>a00141.html</anchorfile>
      <anchor>adc703b5fd595855042bf384d09fdcc07</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>switchTo</name>
      <anchorfile>a00141.html</anchorfile>
      <anchor>a1502d8706569eb031bde5c1c29f5bedb</anchor>
      <arglist>(int newState, simtime_t_cref now)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSwitchTime</name>
      <anchorfile>a00141.html</anchorfile>
      <anchor>a11843592ab0d8526823ce0478d9eb19a</anchor>
      <arglist>(int from, int to, simtime_t_cref time)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getCurrentState</name>
      <anchorfile>a00141.html</anchorfile>
      <anchor>a234ab13c02b2b3ca369f9b18aace0e44</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>endSwitch</name>
      <anchorfile>a00141.html</anchorfile>
      <anchor>ae9820653aa09c297148210c1de27a2e1</anchor>
      <arglist>(simtime_t_cref now)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RadioStateAnalogueModel *</type>
      <name>getAnalogueModel</name>
      <anchorfile>a00141.html</anchorfile>
      <anchor>a6adb7b66381adb5e7914e79c94fda6fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>cleanAnalogueModelUntil</name>
      <anchorfile>a00141.html</anchorfile>
      <anchor>ab7612ad466891148d016c34cb6c639dd</anchor>
      <arglist>(simtime_t_cref t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTrackingModeTo</name>
      <anchorfile>a00141.html</anchorfile>
      <anchor>ababfbdc6756083fa034c65cc474289b6</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCurrentChannel</name>
      <anchorfile>a00141.html</anchorfile>
      <anchor>ad98b2835fa230f9d042329c37aee89ef</anchor>
      <arglist>(int newChannel)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCurrentChannel</name>
      <anchorfile>a00141.html</anchorfile>
      <anchor>a6b1bfd335fd212c52c65eeb6a36b0851</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNbChannels</name>
      <anchorfile>a00141.html</anchorfile>
      <anchor>ae0550827a03c3a0a5dd10c8957e5e014</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MiximRadio *</type>
      <name>createNewRadio</name>
      <anchorfile>a00141.html</anchorfile>
      <anchor>af9b90cb1028bad49bbcc2076ff96ec3b</anchor>
      <arglist>(bool recordStats=false, int initialState=RX, Argument::mapped_type_cref minAtt=Argument::MappedOne, Argument::mapped_type_cref maxAtt=Argument::MappedZero, int currentChannel=0, int nbChannels=1)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MiximRadio</name>
      <anchorfile>a00141.html</anchorfile>
      <anchor>a08447789a4be7232d6353f9aa9737cc8</anchor>
      <arglist>(int numRadioStates, bool recordStats, int initialState=RX, Argument::mapped_type_cref minAtt=Argument::MappedOne, Argument::mapped_type_cref maxAtt=Argument::MappedZero, int currentChannel=0, int nbChannels=1)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>makeRSAMEntry</name>
      <anchorfile>a00141.html</anchorfile>
      <anchor>aef828c78b65e04eb308929880d2ac8f7</anchor>
      <arglist>(simtime_t_cref time, int state)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Argument::mapped_type_cref</type>
      <name>mapStateToAtt</name>
      <anchorfile>a00141.html</anchorfile>
      <anchor>a8fb94b6085e7ee54877407a111755fc1</anchor>
      <arglist>(int state)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>radioStates</name>
      <anchorfile>a00141.html</anchorfile>
      <anchor>a4f8c9dfcdfbc489750bef92bb96738a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>radioChannels</name>
      <anchorfile>a00141.html</anchorfile>
      <anchor>a7582bf7ba1ae0ef65727f577f125eb15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>state</name>
      <anchorfile>a00141.html</anchorfile>
      <anchor>aa735fae8f7e81f7b3a56b651401c79d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>nextState</name>
      <anchorfile>a00141.html</anchorfile>
      <anchor>ae774d34df7824189236e45fd71b32f29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const int</type>
      <name>numRadioStates</name>
      <anchorfile>a00141.html</anchorfile>
      <anchor>ab8dcd5c21a53188f161572a123058ae4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t **</type>
      <name>swTimes</name>
      <anchorfile>a00141.html</anchorfile>
      <anchor>add7d1a73e066b8c7e2bfd823fa3c80fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Argument::mapped_type</type>
      <name>minAtt</name>
      <anchorfile>a00141.html</anchorfile>
      <anchor>a891a34f0c4280d790bd6d97db8270977</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Argument::mapped_type</type>
      <name>maxAtt</name>
      <anchorfile>a00141.html</anchorfile>
      <anchor>a26aaf48126840634a094e8223d121259</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RadioStateAnalogueModel</type>
      <name>rsam</name>
      <anchorfile>a00141.html</anchorfile>
      <anchor>aca63047443fe045ae60a3fc13ef54b26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>currentChannel</name>
      <anchorfile>a00141.html</anchorfile>
      <anchor>a077c78d3f30dc9932974a50911f18d66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>nbChannels</name>
      <anchorfile>a00141.html</anchorfile>
      <anchor>a0b6d4eefb5e646ea73c1efe80d732391</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>MiximRadio</name>
      <anchorfile>a00141.html</anchorfile>
      <anchor>a4a8c6205ab4d9cb0215b0f092dae2f3c</anchor>
      <arglist>(const MiximRadio &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>MiximRadio &amp;</type>
      <name>operator=</name>
      <anchorfile>a00141.html</anchorfile>
      <anchor>a8644fdd75f0c6da3e6f28f29e3490099</anchor>
      <arglist>(const MiximRadio &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MoBANCoordinator</name>
    <filename>a00142.html</filename>
    <base>LineSegmentsMobilityBase</base>
    <class kind="struct">MoBANCoordinator::pattern</class>
    <member kind="enumeration">
      <name>posture_sel_type</name>
      <anchorfile>a00142.html</anchorfile>
      <anchor>a891080762617c76085a1c4cd618fbb93</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>struct MoBANCoordinator::pattern</type>
      <name>Pattern</name>
      <anchorfile>a00142.html</anchorfile>
      <anchor>aba7c0480967381f3cb5c09b05029abe7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00142.html</anchorfile>
      <anchor>a9e116be526a0d4f1f4482728f32c237c</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initializePosition</name>
      <anchorfile>a00142.html</anchorfile>
      <anchor>ae4a1b3a24c63d32ff44a92d58633ce06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setTargetPosition</name>
      <anchorfile>a00142.html</anchorfile>
      <anchor>a9f2559857f8062a663d8672187a18a1a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual cModule *</type>
      <name>findVisualRepresentation</name>
      <anchorfile>a00142.html</anchorfile>
      <anchor>a8c01318d39ee0023d3b952edff5864a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>a00142.html</anchorfile>
      <anchor>a3746b224f6ff4655f5618c5c48bb6c48</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>selectPosture</name>
      <anchorfile>a00142.html</anchorfile>
      <anchor>ab622d4b167d9d5dbc7529969a6688597</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Coord</type>
      <name>selectDestination</name>
      <anchorfile>a00142.html</anchorfile>
      <anchor>adebee0a447b7e85d444054fa3a4ee013</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>selectSpeed</name>
      <anchorfile>a00142.html</anchorfile>
      <anchor>a6d83b8c03d91b0fee3e335b214f51b4c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>simtime_t</type>
      <name>selectDuration</name>
      <anchorfile>a00142.html</anchorfile>
      <anchor>ab4f9d86a51c84b083817db1fcbe9dbab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isInsideWorld</name>
      <anchorfile>a00142.html</anchorfile>
      <anchor>aa9e9424cb4572715a8f5b042aa4155d0</anchor>
      <arglist>(Coord)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>readPostureSpecificationFile</name>
      <anchorfile>a00142.html</anchorfile>
      <anchor>aab85ba2010884afd66f619718e1194d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>readConfigurationFile</name>
      <anchorfile>a00142.html</anchorfile>
      <anchor>a138ebd67882d6cf1154126f47d35d49c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>readMobilityPatternFile</name>
      <anchorfile>a00142.html</anchorfile>
      <anchor>a31810405333b184c9db891fa9bd8a12a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>publishToNodes</name>
      <anchorfile>a00142.html</anchorfile>
      <anchor>a7e5b78357b30b23f2f8285dcde5c6dd9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>collectLocalModules</name>
      <anchorfile>a00142.html</anchorfile>
      <anchor>a67d84600268cd3325298fd0f3afc964f</anchor>
      <arglist>(cModule *module)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; MoBANLocal * &gt;</type>
      <name>localModules</name>
      <anchorfile>a00142.html</anchorfile>
      <anchor>a357c9f724ee27d0c33a1543e650b9e48</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>speed</name>
      <anchorfile>a00142.html</anchorfile>
      <anchor>afdfb553fa2576a3e72a6111b12f14a97</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FILE *</type>
      <name>logfile</name>
      <anchorfile>a00142.html</anchorfile>
      <anchor>abb700aed062784b7cb21eec3e146c80d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>numPostures</name>
      <anchorfile>a00142.html</anchorfile>
      <anchor>a3880f0e3e0e489b1edd2692a441b903f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Posture * &gt;</type>
      <name>postureList</name>
      <anchorfile>a00142.html</anchorfile>
      <anchor>afbb28bcb93bda1faadc7030d86be43b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Posture *</type>
      <name>currentPosture</name>
      <anchorfile>a00142.html</anchorfile>
      <anchor>a19a97a40859c36012f3a63a7c9ef9b46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>minDuration</name>
      <anchorfile>a00142.html</anchorfile>
      <anchor>aac48e46d43458a8f960cc33e84ac85e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>maxDuration</name>
      <anchorfile>a00142.html</anchorfile>
      <anchor>a02c4e8d23a6b0b2e1a1d94abe1974b9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>useMobilityPattern</name>
      <anchorfile>a00142.html</anchorfile>
      <anchor>a6f67cb3412735ec31734d8a345688e5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Pattern *</type>
      <name>mobilityPattern</name>
      <anchorfile>a00142.html</anchorfile>
      <anchor>ae19a9a2dce220a75c4757381b5f348a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>patternLength</name>
      <anchorfile>a00142.html</anchorfile>
      <anchor>a00cbcb40ee4039ffd5723ffa4334d88f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>currentPattern</name>
      <anchorfile>a00142.html</anchorfile>
      <anchor>aeff87bd9af8cb9aa14eada4b73ec4fbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double **</type>
      <name>markovMatrix</name>
      <anchorfile>a00142.html</anchorfile>
      <anchor>a406987de5c4e38c461e0857583c115b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>posture_sel_type</type>
      <name>postureSelStrategy</name>
      <anchorfile>a00142.html</anchorfile>
      <anchor>a626ad8d08de1e3d7fad2c8032f199933</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PostureTransition *</type>
      <name>transitions</name>
      <anchorfile>a00142.html</anchorfile>
      <anchor>a51f9fc44b5168e7ef6e58fd221bf3f0a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>MoBANCoordinator::pattern</name>
    <filename>a00171.html</filename>
    <member kind="variable">
      <type>unsigned int</type>
      <name>postureID</name>
      <anchorfile>a00171.html</anchorfile>
      <anchor>a59e286ef1ae546090710cfcd2c432c9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Coord</type>
      <name>targetPos</name>
      <anchorfile>a00171.html</anchorfile>
      <anchor>a68ade906cd2a8e99513cd8f34e41e06a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>speed</name>
      <anchorfile>a00171.html</anchorfile>
      <anchor>a6956bfc4ee8b53dcc0d13e9a46f4bf96</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>duration</name>
      <anchorfile>a00171.html</anchorfile>
      <anchor>ac46502075e05cb35bf6e62d3bc508969</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MoBANLocal</name>
    <filename>a00143.html</filename>
    <base>LineSegmentsMobilityBase</base>
    <member kind="function" virtualness="virtual">
      <type>virtual Coord</type>
      <name>getCurrentPosition</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a9148fd6e18f5265af270b1216438d699</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Coord</type>
      <name>getCurrentSpeed</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a7cbbd068df6b5cb5ca7b610cfc2a89a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCoordinator</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>affd820423e296cde74eaf99a774b77d5</anchor>
      <arglist>(MoBANCoordinator *coordinator)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMoBANParameters</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a3f9692b956f5685832ef4ce88acd0aaf</anchor>
      <arglist>(Coord referencePoint, double radius, double speed)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a2838f6184efad9d12ec25e6d46494aea</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initializePosition</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a93e6176d211370793fbc484843de19cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setTargetPosition</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a7a181399edf633b6598fad60cf2fbce7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>updateVisualRepresentation</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>abe9bd0c64b94704767ce8396f86383fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MoBANCoordinator *</type>
      <name>coordinator</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a27d8b3ee6c3e979dc41598a9f6884987</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>referencePosition</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a4392ee7a05242ea5317675c1ed149796</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>radius</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ad7c99333da43a55b3c6655a06fc9a325</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>speed</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a4b7f222408bca8188bb9a362d4eeff9f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MobilityAccess</name>
    <filename>a00144.html</filename>
    <base>ModuleAccess&lt; IMobility &gt;</base>
  </compound>
  <compound kind="class">
    <name>MobilityBase</name>
    <filename>a00145.html</filename>
    <base>BasicModule</base>
    <base>IMobility</base>
    <member kind="enumeration">
      <name>BorderPolicy</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>aa67dcad3ed1e7fe0164b84131aea2b18</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REFLECT</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>aa67dcad3ed1e7fe0164b84131aea2b18add05fd1c0ea65bba1c8e25fe7742acca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WRAP</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>aa67dcad3ed1e7fe0164b84131aea2b18a4dd7d01ab62c958cb7b3cb27f78a490a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PLACERANDOMLY</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>aa67dcad3ed1e7fe0164b84131aea2b18a7fe0cd1ed529388e665b7e898596c236</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RAISEERROR</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>aa67dcad3ed1e7fe0164b84131aea2b18a0e070e3cd7ad937cb82bc15dbe81e918</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>ac86018a375bf83f14dc36bf222bfd5bd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a4c79fdde6758f5cb3b879d8a712911c9</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initializePosition</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>ae4fcd350112d303b0d58f39e56b07c6b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a8088f9febe7400b52438d17a53dceb72</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>handleSelfMessage</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a42e16e37a9670e4faa781e30540094cb</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>updateVisualRepresentation</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>acf7fd78c52300a9e1738e91282df3f45</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>emitMobilityStateChangedSignal</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>ad8425adf03e698223618ddfcaaadef14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Coord</type>
      <name>getRandomPosition</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a07eac3b0d197edaa3e9509e80ae21af1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual cModule *</type>
      <name>findVisualRepresentation</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a39ea0e8ddefc5b5b30ae969f3a2d8b43</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>isOutside</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a70e7b8c7610a007a4b40c769d7599f70</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>reflectIfOutside</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>ad987f8c910a37c23f29b1800044c9851</anchor>
      <arglist>(Coord &amp;targetPosition, Coord &amp;speed, double &amp;angle)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>wrapIfOutside</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a7d1173c29234a0c8fb120fd3c6471901</anchor>
      <arglist>(Coord &amp;targetPosition)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>placeRandomlyIfOutside</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a1591745daa837f50c64ef1e485f05ea2</anchor>
      <arglist>(Coord &amp;targetPosition)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>raiseErrorIfOutside</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>ae3fb0f9bd82fb86a59d34da6c8c42582</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleIfOutside</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a2583560e5b7b4dcc26b93eadfe17056e</anchor>
      <arglist>(BorderPolicy policy, Coord &amp;targetPosition, Coord &amp;speed, double &amp;angle)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cModule *</type>
      <name>visualRepresentation</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a3df52e779977d443eae7e5edee8fc7b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>constraintAreaMin</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a5b75464ca5724b99186e8577f8345ed8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>constraintAreaMax</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a321a70920d0e44b3deaf5c161331da18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>lastPosition</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a82ae637969433a492154b26039b84038</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static simsignal_t</type>
      <name>mobilityStateChangedSignal</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a10491208fc1f207870d49401de1ae52c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ModuleAccess</name>
    <filename>a00146.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>ModuleAccess</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a2ec686357c8696244d7bd8d5d87d69d6</anchor>
      <arglist>(const char *n)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual T *</type>
      <name>get</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a44956ddb52973612afbba0eeecf8bb66</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual T *</type>
      <name>get</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>ace246e3fc19a2e5b31540982b978e3cd</anchor>
      <arglist>(cModule *from)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual T *</type>
      <name>getIfExists</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>af36748c789196a55ab1c11c28d741b03</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual T *</type>
      <name>getIfExists</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a54202a63c71ffc60076a66235552a727</anchor>
      <arglist>(cModule *from)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const char *</type>
      <name>name</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a17b8b02185c8ddda92256fa9f5f6087a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T *</type>
      <name>p</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a3799a269aae8d8adb4d4f1dc2f431a25</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MovingMobilityBase</name>
    <filename>a00147.html</filename>
    <base>MobilityBase</base>
    <member kind="function" virtualness="virtual">
      <type>virtual Coord</type>
      <name>getCurrentPosition</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>afaf91f3d0f1f7866d2e0928360d77a1b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Coord</type>
      <name>getCurrentSpeed</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>a8335090d6aa06c8f5c1ec2330bfe39de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>a86cf9ed4e4d9cf256d8f4ef1a1c34288</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>a42b5578a418c86489c79cb765f1ffd4f</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleSelfMessage</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>a9ed9ae1fa1243a9d82e0f52007fe6d54</anchor>
      <arglist>(cMessage *message)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>scheduleUpdate</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>a94a118dd8f1d68588faf880aaf66ac5c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>moveAndUpdate</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>a586e0325da671e63adfc9f3b5321d559</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>move</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>a9d3b4a926b2dd8fa59de6600522ae19d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>moveTimer</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>a7cc4d6a4ccc8b0b5b52a3ae04763fb68</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>updateInterval</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>aa33003dc3ef24ff2f08ab10f713025be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>stationary</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>a6c780988c5edd64fc81a7a4d342b8118</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>lastSpeed</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>ab1188feab18688c3d31483ac667bbd5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>lastUpdate</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>a60d88e6d9264df81f40eabb644e5c402</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>nextChange</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>a5c6e51e3ac03c935482057ce7726eb3d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MultiDimMapping</name>
    <filename>a00148.html</filename>
    <templarg>Interpolator</templarg>
    <base>Mapping</base>
    <member kind="function">
      <type></type>
      <name>MultiDimMapping</name>
      <anchorfile>a00148.html</anchorfile>
      <anchor>ae6bc0b889d690c6f0993d0f03a0b159b</anchor>
      <arglist>(const DimensionSet &amp;myDims)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultiDimMapping</name>
      <anchorfile>a00148.html</anchorfile>
      <anchor>a684348697ba51462eccf00c92f99ea64</anchor>
      <arglist>(const DimensionSet &amp;myDims, argument_value_cref_t oorv)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultiDimMapping</name>
      <anchorfile>a00148.html</anchorfile>
      <anchor>a21647d49bf4759d7e1eac552fa518b43</anchor>
      <arglist>(const MultiDimMapping&lt; Interpolator &gt; &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>const MultiDimMapping &amp;</type>
      <name>operator=</name>
      <anchorfile>a00148.html</anchorfile>
      <anchor>adf3d7e794c6e10795a4fa18d6e3b67d0</anchor>
      <arglist>(const MultiDimMapping&lt; Interpolator &gt; &amp;o)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Mapping *</type>
      <name>clone</name>
      <anchorfile>a00148.html</anchorfile>
      <anchor>aa9694225933d71570d8575dbbad1e55f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MultiDimMapping</name>
      <anchorfile>a00148.html</anchorfile>
      <anchor>af3aab4125df7b412bc7096779593f473</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual argument_value_t</type>
      <name>getValue</name>
      <anchorfile>a00148.html</anchorfile>
      <anchor>a524f27f6b8f01dc973dbe54f0f9c5ed2</anchor>
      <arglist>(const Argument &amp;pos) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValue</name>
      <anchorfile>a00148.html</anchorfile>
      <anchor>a7b50181a1d5e38902c6468bc739f6aa7</anchor>
      <arglist>(const Argument &amp;pos, argument_value_cref_t value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MappingIterator *</type>
      <name>createIterator</name>
      <anchorfile>a00148.html</anchorfile>
      <anchor>a903bef6518f96f54537beed48002b5fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MappingIterator *</type>
      <name>createIterator</name>
      <anchorfile>a00148.html</anchorfile>
      <anchor>a2aa6a9a6b64954e20c6ee15f4bfb9925</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>Dimension</type>
      <name>getDimension</name>
      <anchorfile>a00148.html</anchorfile>
      <anchor>a85e1d7321d200c9505d25419dcfc4783</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>InterpolateableMap&lt; Interpolator&lt; std::map&lt; argument_value_t, Mapping * &gt; &gt; &gt;</type>
      <name>interpolator_map_type</name>
      <anchorfile>a00148.html</anchorfile>
      <anchor>a681c187c017568b30ab1f955205642ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>interpolator_map_type::interpolator_type</type>
      <name>interpolator_type</name>
      <anchorfile>a00148.html</anchorfile>
      <anchor>a2f7fa4bf02e759ad62d0f546add33ecd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>interpolator_map_type::mapped_type</type>
      <name>mapped_type</name>
      <anchorfile>a00148.html</anchorfile>
      <anchor>ac667e856842caea12a716fe6e4468b23</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>interpolator_map_type::mapped_cref_type</type>
      <name>mapped_cref_type</name>
      <anchorfile>a00148.html</anchorfile>
      <anchor>a6b0c6123bcf332b028075bbb947bd51f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>interpolator_map_type::iterator_intpl</type>
      <name>iterator</name>
      <anchorfile>a00148.html</anchorfile>
      <anchor>aa4958aa116b6ce5b1b93cc1b2c1431a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>interpolator_map_type::const_iterator_intpl</type>
      <name>const_iterator</name>
      <anchorfile>a00148.html</anchorfile>
      <anchor>a93d02248ea48308e7ce69761186aa7b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MultiDimMapping</name>
      <anchorfile>a00148.html</anchorfile>
      <anchor>a9d4b17004ec39759f5876865a27a4f04</anchor>
      <arglist>(const DimensionSet &amp;myDims, Dimension myDim)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MultiDimMapping</name>
      <anchorfile>a00148.html</anchorfile>
      <anchor>aee38eb77b429791423a13e020a3b15fd</anchor>
      <arglist>(const DimensionSet &amp;myDims, Dimension myDim, ConstantSimpleConstMapping *oorm, ConstMappingWrapper *wrappedoorm)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MultiDimMapping</name>
      <anchorfile>a00148.html</anchorfile>
      <anchor>a3ac6685b718a771032556e192752c528</anchor>
      <arglist>(const MultiDimMapping&lt; Interpolator &gt; &amp;o, ConstantSimpleConstMapping *oorm, ConstMappingWrapper *wrappedoorm)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>mapped_type</type>
      <name>createSubSignal</name>
      <anchorfile>a00148.html</anchorfile>
      <anchor>a1fbdfd6bd7d903fdd388556ead454461</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>copySubMappings</name>
      <anchorfile>a00148.html</anchorfile>
      <anchor>a97c8020122e2d6e275596d77d3025623</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ConstantSimpleConstMapping *</type>
      <name>outOfRangeMapping</name>
      <anchorfile>a00148.html</anchorfile>
      <anchor>a50d98bf7c2b8070242694fda40ca49ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ConstMappingWrapper *</type>
      <name>wrappedOORMapping</name>
      <anchorfile>a00148.html</anchorfile>
      <anchor>ac0623ee0b39d257c2283d4ab6ca9fcf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>interpolator_map_type</type>
      <name>entries</name>
      <anchorfile>a00148.html</anchorfile>
      <anchor>a3109620ad45efea2104ebc7fa80662f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Dimension</type>
      <name>myDimension</name>
      <anchorfile>a00148.html</anchorfile>
      <anchor>ae9678ee0ab7315c97b0748f793acaaac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isMaster</name>
      <anchorfile>a00148.html</anchorfile>
      <anchor>a45aeec7eead2c432c971ca02fcdb0c13</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>MultiDimMappingIterator&lt; Interpolator &gt;</name>
      <anchorfile>a00148.html</anchorfile>
      <anchor>a6314bc1334b489fad95fbc1affbdb57f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MultiDimMappingIterator</name>
    <filename>a00149.html</filename>
    <templarg>Interpolator</templarg>
    <base>MappingIterator</base>
    <member kind="function">
      <type></type>
      <name>MultiDimMappingIterator</name>
      <anchorfile>a00149.html</anchorfile>
      <anchor>a916ccca90ebffc95897f6c13bda9dd67</anchor>
      <arglist>(MultiDimMapping&lt; Interpolator &gt; &amp;pMapping)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultiDimMappingIterator</name>
      <anchorfile>a00149.html</anchorfile>
      <anchor>ad5d0da6708731305fdec6fe8086c1b65</anchor>
      <arglist>(MultiDimMapping&lt; Interpolator &gt; &amp;pMapping, const Argument &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultiDimMappingIterator</name>
      <anchorfile>a00149.html</anchorfile>
      <anchor>a59ffe4d01d04a566e31dd5ed2c000507</anchor>
      <arglist>(const MultiDimMappingIterator &amp;o)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MultiDimMappingIterator</name>
      <anchorfile>a00149.html</anchorfile>
      <anchor>aa90d2e657fa6b0e773eec7c2fa713c4c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>jumpTo</name>
      <anchorfile>a00149.html</anchorfile>
      <anchor>a71f35cd0d6fabecb65019466018c51ca</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>iterateTo</name>
      <anchorfile>a00149.html</anchorfile>
      <anchor>a3a3b5ddc5aa1636772b9a89c085acdfc</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>next</name>
      <anchorfile>a00149.html</anchorfile>
      <anchor>a8928195a1fe4bb3af81d3ffe2391827e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>inRange</name>
      <anchorfile>a00149.html</anchorfile>
      <anchor>ae4f87a308ad4648d289f1f66d8da772a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Argument &amp;</type>
      <name>getPosition</name>
      <anchorfile>a00149.html</anchorfile>
      <anchor>a89318443b1c2944e453df221ebdd2d3e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Argument &amp;</type>
      <name>getNextPosition</name>
      <anchorfile>a00149.html</anchorfile>
      <anchor>a6b780009865b8643c7587c2833ee2fb1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual argument_value_t</type>
      <name>getValue</name>
      <anchorfile>a00149.html</anchorfile>
      <anchor>a3a28409c944c35a15d0353abd689273d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>jumpToBegin</name>
      <anchorfile>a00149.html</anchorfile>
      <anchor>ab41125ce8959de6fafb3347a7691ca52</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasNext</name>
      <anchorfile>a00149.html</anchorfile>
      <anchor>a99bbed82612268040bb8f5162871fb48</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValue</name>
      <anchorfile>a00149.html</anchorfile>
      <anchor>af1b499c6d24b81cee68e09ad224087c9</anchor>
      <arglist>(argument_value_cref_t value)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>InterpolateableMap&lt; Interpolator&lt; std::map&lt; argument_value_t, Mapping * &gt; &gt; &gt;</type>
      <name>interpolator_map_type</name>
      <anchorfile>a00149.html</anchorfile>
      <anchor>a1b55be43fd47c1879a3761d88a389cd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>interpolator_map_type::interpolated</type>
      <name>interpolated</name>
      <anchorfile>a00149.html</anchorfile>
      <anchor>ab54b5dafe1ca46dc46aaa15e734330ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>interpolator_map_type::iterator_intpl</type>
      <name>iterator</name>
      <anchorfile>a00149.html</anchorfile>
      <anchor>add0146735b031a0bad279b4652b6b4b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>interpolator_map_type::const_iterator_intpl</type>
      <name>const_iterator</name>
      <anchorfile>a00149.html</anchorfile>
      <anchor>a926bab0adcc3f7fd731e4e0c6a391881</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateSubIterator</name>
      <anchorfile>a00149.html</anchorfile>
      <anchor>a48c928d79af27bc468eb50cc24d15a38</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateSubIterator</name>
      <anchorfile>a00149.html</anchorfile>
      <anchor>a37918121567f5a283b209113b2d4983a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateNextPosition</name>
      <anchorfile>a00149.html</anchorfile>
      <anchor>a1eb04551f2a3ae22f0eae4844f14ac97</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const MultiDimMapping&lt; Interpolator &gt; &amp;</type>
      <name>mapping</name>
      <anchorfile>a00149.html</anchorfile>
      <anchor>a77251b9d1da4418ccb2903fc94c7fcd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>iterator</type>
      <name>valueIt</name>
      <anchorfile>a00149.html</anchorfile>
      <anchor>a01dc79b6fe25cb048651ae8870e3d347</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>interpolated</type>
      <name>subMapping</name>
      <anchorfile>a00149.html</anchorfile>
      <anchor>aceffeb12d2e2bc67226d32ee4206fa40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MappingIterator *</type>
      <name>subIterator</name>
      <anchorfile>a00149.html</anchorfile>
      <anchor>ac2c7a223c07841c72d0ff860b0513e06</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Argument</type>
      <name>position</name>
      <anchorfile>a00149.html</anchorfile>
      <anchor>afa4ac8d36d24e411a3edce590b3c21a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Argument</type>
      <name>nextPosition</name>
      <anchorfile>a00149.html</anchorfile>
      <anchor>ae3c745c1fea3a1bcd5694b5e1a692297</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>MultiDimMappingIterator &amp;</type>
      <name>operator=</name>
      <anchorfile>a00149.html</anchorfile>
      <anchor>a5055b9a32550926693011c818111dcc4</anchor>
      <arglist>(const MultiDimMappingIterator &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Nearest</name>
    <filename>a00153.html</filename>
    <templarg></templarg>
    <base>InterpolatorBase</base>
    <member kind="typedef">
      <type>base_class_type::storage_type</type>
      <name>storage_type</name>
      <anchorfile>a00153.html</anchorfile>
      <anchor>a9739a423107cd104922bb74e2d385f93</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::container_type</type>
      <name>container_type</name>
      <anchorfile>a00153.html</anchorfile>
      <anchor>af99ff5ca2d3827ae2be76eab3266fc04</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::key_type</type>
      <name>key_type</name>
      <anchorfile>a00153.html</anchorfile>
      <anchor>a079c6e4fa3a064c59abe1f1e5bebd41d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::key_cref_type</type>
      <name>key_cref_type</name>
      <anchorfile>a00153.html</anchorfile>
      <anchor>a02dec03a3e49f970334f391a8f8811e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::mapped_type</type>
      <name>mapped_type</name>
      <anchorfile>a00153.html</anchorfile>
      <anchor>aeae2c2c12934d612d4d26339f298db31</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::mapped_cref_type</type>
      <name>mapped_cref_type</name>
      <anchorfile>a00153.html</anchorfile>
      <anchor>ad06e5aaeb684694d3ad67da420282895</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::pair_type</type>
      <name>pair_type</name>
      <anchorfile>a00153.html</anchorfile>
      <anchor>a002a2b67afd3e41c4cf614ce17fb4a2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::iterator</type>
      <name>iterator</name>
      <anchorfile>a00153.html</anchorfile>
      <anchor>a58deee496d9901fb9c862d2e145053fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>a00153.html</anchorfile>
      <anchor>acba3659c2c6c8ba7ee3c364ae2ed6c1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::comparator_type</type>
      <name>comparator_type</name>
      <anchorfile>a00153.html</anchorfile>
      <anchor>a92aa015cd152a9ade4654926edb4d019</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::interpolated</type>
      <name>interpolated</name>
      <anchorfile>a00153.html</anchorfile>
      <anchor>a00f85b45b973057c33a65465bd880739</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Nearest</name>
      <anchorfile>a00153.html</anchorfile>
      <anchor>a0dc55fc986dc4e6168470e46f366fbec</anchor>
      <arglist>(mapped_cref_type oorv)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual interpolated</type>
      <name>operator()</name>
      <anchorfile>a00153.html</anchorfile>
      <anchor>a97a548579fe73c473c843a883629efa6</anchor>
      <arglist>(const const_iterator &amp;first, const const_iterator &amp;last, key_cref_type pos, const_iterator upperBound) const </arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>InterpolatorBase&lt; _ContainerType &gt;</type>
      <name>base_class_type</name>
      <anchorfile>a00153.html</anchorfile>
      <anchor>a66bbd6c5c5d772f74ccdf02804780953</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NetwControlInfo</name>
    <filename>a00155.html</filename>
    <member kind="function">
      <type></type>
      <name>NetwControlInfo</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a362fd0f2bbdb4cd8b3b511c176a0d37f</anchor>
      <arglist>(const LAddress::L3Type &amp;addr=LAddress::L3NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NetwControlInfo</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a8bcbd2cb7ac307be9c2e021f0456e01d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const LAddress::L3Type &amp;</type>
      <name>getNetwAddr</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a35494d527ef6bf7acad34d08633a237d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNetwAddr</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a9e22374ff923fbcf1fc57d2cf13ee6a4</anchor>
      <arglist>(const LAddress::L3Type &amp;addr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cObject *</type>
      <name>setControlInfo</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a8e95c523ae2e3136ab34313da7384dea</anchor>
      <arglist>(cMessage *const pMsg, const LAddress::L3Type &amp;pAddr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const LAddress::L3Type &amp;</type>
      <name>getAddressFromControlInfo</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a75c4c6c2073fcd17b73583b7243e8d21</anchor>
      <arglist>(cObject *const pCtrlInfo)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LAddress::L3Type</type>
      <name>netwAddr</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>ad0f1dfb07eb4f0af53540c92a94b1626</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NetworkStackTrafficGen</name>
    <filename>a00156.html</filename>
    <base>BaseLayer</base>
    <member kind="typedef">
      <type>NetwPkt</type>
      <name>netwpkt_t</name>
      <anchorfile>a00156.html</anchorfile>
      <anchor>a481aa8f5da7d2ccffd94b157d429f81f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>netwpkt_t *</type>
      <name>netwpkt_ptr_t</name>
      <anchorfile>a00156.html</anchorfile>
      <anchor>a6155db2897149e3c2d676c214070c5f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00156.html</anchorfile>
      <anchor>a4ad89047bebb99eaad2fd239cbc9e601</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>a00156.html</anchorfile>
      <anchor>a90fe5f22fbfc1034211df98c5aa21082</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>a00156.html</anchorfile>
      <anchor>a97ba33f74bab38ce8045370fac87ab94</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerMsg</name>
      <anchorfile>a00156.html</anchorfile>
      <anchor>a356ac886997e349785bdea455d87a920</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerControl</name>
      <anchorfile>a00156.html</anchorfile>
      <anchor>aa7bae7e5b9e0df082742eef9580692b5</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUpperMsg</name>
      <anchorfile>a00156.html</anchorfile>
      <anchor>aa27138585461e46f30446c79fd273cd5</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUpperControl</name>
      <anchorfile>a00156.html</anchorfile>
      <anchor>a2a2b6aa131cdf2f822fb80b39d6a420f</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendBroadcast</name>
      <anchorfile>a00156.html</anchorfile>
      <anchor>adc1d59fcef6f3bc66765feb3c642a1bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>packetLength</name>
      <anchorfile>a00156.html</anchorfile>
      <anchor>a2d848488d29fe904d9ad7a60be91ef6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>packetTime</name>
      <anchorfile>a00156.html</anchorfile>
      <anchor>a884092af7b24be0c92e56778dd82be92</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>pppt</name>
      <anchorfile>a00156.html</anchorfile>
      <anchor>ac802504365d5fadc96645c138b215e4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>burstSize</name>
      <anchorfile>a00156.html</anchorfile>
      <anchor>a79fd1c7e19a3d441e5aef561d593a7ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>remainingBurst</name>
      <anchorfile>a00156.html</anchorfile>
      <anchor>a3bfb93461641c3485510051650586128</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LAddress::L3Type</type>
      <name>destination</name>
      <anchorfile>a00156.html</anchorfile>
      <anchor>abbce5c7ea80eb9bd6b6e7002aa58c6af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>nbPacketDropped</name>
      <anchorfile>a00156.html</anchorfile>
      <anchor>aede442614cce7fc393ad88ca2feb3de2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArpInterface *</type>
      <name>arp</name>
      <anchorfile>a00156.html</anchorfile>
      <anchor>af883aa2c26bdc3d69a6ccbf13494bf90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LAddress::L3Type</type>
      <name>myNetwAddr</name>
      <anchorfile>a00156.html</anchorfile>
      <anchor>a7aecae02b9301daab90ea0e113a1357f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>delayTimer</name>
      <anchorfile>a00156.html</anchorfile>
      <anchor>a9e84ee1b316106ff7d64e5aefb3d38da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BaseWorldUtility *</type>
      <name>world</name>
      <anchorfile>a00156.html</anchorfile>
      <anchor>ae00f01ae82d87db04d710ce6467c402b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>NetworkStackTrafficGen</name>
      <anchorfile>a00156.html</anchorfile>
      <anchor>a37ba2e065c40183dd82dda83fe20879e</anchor>
      <arglist>(const NetworkStackTrafficGen &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>NetworkStackTrafficGen &amp;</type>
      <name>operator=</name>
      <anchorfile>a00156.html</anchorfile>
      <anchor>a00cc017cce8e55146355be3bd275322e</anchor>
      <arglist>(const NetworkStackTrafficGen &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NetwToMacControlInfo</name>
    <filename>a00157.html</filename>
    <member kind="function">
      <type></type>
      <name>NetwToMacControlInfo</name>
      <anchorfile>a00157.html</anchorfile>
      <anchor>a0168cc7c80b267f832f7395b31f64f4e</anchor>
      <arglist>(const LAddress::L2Type &amp;addr=LAddress::L2NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NetwToMacControlInfo</name>
      <anchorfile>a00157.html</anchorfile>
      <anchor>a8408a34b9eb11023c61673c5e6cb84ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const LAddress::L2Type &amp;</type>
      <name>getNextHopMac</name>
      <anchorfile>a00157.html</anchorfile>
      <anchor>af99bf29fa34adcb49a6f53f8c94d43fd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const LAddress::L2Type &amp;</type>
      <name>getDest</name>
      <anchorfile>a00157.html</anchorfile>
      <anchor>a19518c8f5ccf35d44a2813a922e214ef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNextHopMac</name>
      <anchorfile>a00157.html</anchorfile>
      <anchor>ad3884a518785e93c963552dea18e5909</anchor>
      <arglist>(const LAddress::L2Type &amp;addr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDest</name>
      <anchorfile>a00157.html</anchorfile>
      <anchor>ad9984137a14e4f79e8c3d764a52eaaa0</anchor>
      <arglist>(const LAddress::L2Type &amp;addr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cObject *</type>
      <name>setControlInfo</name>
      <anchorfile>a00157.html</anchorfile>
      <anchor>a9556c1d066423e39247217d7a7f2a456</anchor>
      <arglist>(cMessage *const pMsg, const LAddress::L2Type &amp;pDestAddr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const LAddress::L2Type &amp;</type>
      <name>getDestFromControlInfo</name>
      <anchorfile>a00157.html</anchorfile>
      <anchor>add42e098a1af72c3fbc8be746d04b27f</anchor>
      <arglist>(const cObject *const pCtrlInfo)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LAddress::L2Type</type>
      <name>nextHopMac</name>
      <anchorfile>a00157.html</anchorfile>
      <anchor>aa7e33f761452ceb1451769d7c59da91a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NextSmaller</name>
    <filename>a00158.html</filename>
    <templarg></templarg>
    <base>InterpolatorBase</base>
    <member kind="typedef">
      <type>base_class_type::storage_type</type>
      <name>storage_type</name>
      <anchorfile>a00158.html</anchorfile>
      <anchor>a8c5692345e6644703fe7269de2dab1f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::container_type</type>
      <name>container_type</name>
      <anchorfile>a00158.html</anchorfile>
      <anchor>a41d8e27717f519902cf3fd846a2c7b6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::key_type</type>
      <name>key_type</name>
      <anchorfile>a00158.html</anchorfile>
      <anchor>ac905a5f3ac8d2ad7e86a3d6e68c86564</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::key_cref_type</type>
      <name>key_cref_type</name>
      <anchorfile>a00158.html</anchorfile>
      <anchor>aa2541c173414345b17d45e90f23f1b85</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::mapped_type</type>
      <name>mapped_type</name>
      <anchorfile>a00158.html</anchorfile>
      <anchor>a51d29aa5d6ba9527e78f6d2ebc9b1fbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::mapped_cref_type</type>
      <name>mapped_cref_type</name>
      <anchorfile>a00158.html</anchorfile>
      <anchor>ac9bc4d5af5a87581a9dfd82587b0a402</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::pair_type</type>
      <name>pair_type</name>
      <anchorfile>a00158.html</anchorfile>
      <anchor>a060d2af8ab5e5574b1ba41483798c561</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::iterator</type>
      <name>iterator</name>
      <anchorfile>a00158.html</anchorfile>
      <anchor>a53795d841ed9efed5b6c86562f5408be</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>a00158.html</anchorfile>
      <anchor>a55f6473c02dbec1fa65572b395e713c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::comparator_type</type>
      <name>comparator_type</name>
      <anchorfile>a00158.html</anchorfile>
      <anchor>a27bd4c4217c213db7950cde753d6a3c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_class_type::interpolated</type>
      <name>interpolated</name>
      <anchorfile>a00158.html</anchorfile>
      <anchor>adb043b816c9b3bc8caaf97d8e1936129</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NextSmaller</name>
      <anchorfile>a00158.html</anchorfile>
      <anchor>a87a70bc7144eec945007d4017a4105c6</anchor>
      <arglist>(mapped_cref_type oorv)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual interpolated</type>
      <name>operator()</name>
      <anchorfile>a00158.html</anchorfile>
      <anchor>a3dae081c993095eaedbdb40af0b3a749</anchor>
      <arglist>(const const_iterator &amp;first, const const_iterator &amp;last, key_cref_type pos, const_iterator upperBound) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isStepping</name>
      <anchorfile>a00158.html</anchorfile>
      <anchor>ac240448bfa4fd4a033d5d393a5332e38</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>InterpolatorBase&lt; _ContainerType &gt;</type>
      <name>base_class_type</name>
      <anchorfile>a00158.html</anchorfile>
      <anchor>aac2ca2e53a30e482d97621fc9b62ddbb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NicEntry</name>
    <filename>a00159.html</filename>
    <class kind="class">NicEntry::NicEntryComparator</class>
    <member kind="typedef">
      <type>int</type>
      <name>t_nicid</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>ae9ce6e70f7231c299aac66e4cde88671</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>t_nicid</type>
      <name>t_nicid_cref</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a23992af0bc9cf72b7e98e7be48ef86fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const NicEntry *, cGate *, NicEntryComparator &gt;</type>
      <name>GateList</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a209882de7781ff52db0ae559c1654e08</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NicEntry</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a59345a3d9d2a9c6b85ff968e87cf7552</anchor>
      <arglist>(bool debug)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NicEntry</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a8c54007b13436458db987accc5dab3f9</anchor>
      <arglist>(const NicEntry &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a14b6ab9495fb7b43112b826c20c903ba</anchor>
      <arglist>(NicEntry &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>NicEntry &amp;</type>
      <name>operator=</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a2cc95c1b527c1d329a8966f4033199cf</anchor>
      <arglist>(const NicEntry &amp;o)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NicEntry</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>afd3d4871304939e9dcbfda49b3ca4585</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>connectTo</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a32a71bf1823d8ca0d51fd1cbb67072fe</anchor>
      <arglist>(NicEntry *)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>disconnectFrom</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a0cce4edbe3eb6036ded986482de3de48</anchor>
      <arglist>(NicEntry *)=0</arglist>
    </member>
    <member kind="function">
      <type>const GateList &amp;</type>
      <name>getGateList</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a4d455ea8504c06c9288f8a474c85e65d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConnected</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a32f9544fbf045d921b0fb7f1c6f51f9a</anchor>
      <arglist>(const NicEntry *other)</arglist>
    </member>
    <member kind="function">
      <type>const cGate *</type>
      <name>getOutGateTo</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a9438df597dbc6f81c5c2407abb791f0b</anchor>
      <arglist>(const NicEntry *to) const </arglist>
    </member>
    <member kind="variable">
      <type>t_nicid</type>
      <name>nicId</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a35ef2f3ace25220bf226c52b444d1109</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cModule *</type>
      <name>nicPtr</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>af7819e950101d5062b713eb4c182e34f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>hostId</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>af474d9b383b959daecdecce577edcee9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Coord</type>
      <name>pos</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a2c78b2c598d5fa3d44080f682adb8d83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ConnectionManagerAccess *</type>
      <name>chAccess</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a684948749e06f0956cd1ef9fffdedd75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>coreDebug</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>af0a6ff3792dac4c0a956b1a16392cf18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GateList</type>
      <name>outConns</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a66b957327e66c042028f7b38e4bd0b46</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NicEntry::NicEntryComparator</name>
    <filename>a00160.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>a00160.html</anchorfile>
      <anchor>a47c8b8f85f6d1b71cc9fd5c039e0fa5f</anchor>
      <arglist>(const NicEntry *nic1, const NicEntry *nic2) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NicEntryDebug</name>
    <filename>a00161.html</filename>
    <base>NicEntry</base>
    <member kind="function">
      <type></type>
      <name>NicEntryDebug</name>
      <anchorfile>a00161.html</anchorfile>
      <anchor>a8a318f2611c8fcf9a495525a910f40b6</anchor>
      <arglist>(bool debug)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NicEntryDebug</name>
      <anchorfile>a00161.html</anchorfile>
      <anchor>a23514a51dfbdba46bf20b2f005a34214</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>connectTo</name>
      <anchorfile>a00161.html</anchorfile>
      <anchor>af97ebc8c81c1f7d8094344d2f7fb6a17</anchor>
      <arglist>(NicEntry *other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>disconnectFrom</name>
      <anchorfile>a00161.html</anchorfile>
      <anchor>a837ccd605ce3df345fcf3f5787673fac</anchor>
      <arglist>(NicEntry *other)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; cGate * &gt;</type>
      <name>GateStack</name>
      <anchorfile>a00161.html</anchorfile>
      <anchor>acb03289d82cdd4035567f3fbc8117105</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>cGate *</type>
      <name>requestInGate</name>
      <anchorfile>a00161.html</anchorfile>
      <anchor>aa028678e801ba669ad47a6588b2ad90a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>cGate *</type>
      <name>requestOutGate</name>
      <anchorfile>a00161.html</anchorfile>
      <anchor>ad601c375fa2fd737f88b3a475a06ff45</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>collectGates</name>
      <anchorfile>a00161.html</anchorfile>
      <anchor>ae4c6e480d8b2f3fc4199a7a8314ab2df</anchor>
      <arglist>(const char *pattern, GateStack &amp;gates)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>collectFreeGates</name>
      <anchorfile>a00161.html</anchorfile>
      <anchor>aac3b943e56b211541596a73f6437608a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>inCnt</name>
      <anchorfile>a00161.html</anchorfile>
      <anchor>ac676487d56ac68916121ce8e52465205</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>outCnt</name>
      <anchorfile>a00161.html</anchorfile>
      <anchor>af1bf7c23c872e6838f8111cf58e4839e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>checkFreeGates</name>
      <anchorfile>a00161.html</anchorfile>
      <anchor>a2aa0dd90daecf5469bc9c8b53b21579c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GateStack</type>
      <name>freeInGates</name>
      <anchorfile>a00161.html</anchorfile>
      <anchor>ae2e64139016744d1c8a59c4d9f6b009f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GateStack</type>
      <name>freeOutGates</name>
      <anchorfile>a00161.html</anchorfile>
      <anchor>a0564884c56d1bcda68b8797a5bd60af0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NicEntryDirect</name>
    <filename>a00162.html</filename>
    <base>NicEntry</base>
    <member kind="function">
      <type></type>
      <name>NicEntryDirect</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>a264c9a96612b45f99eb5a1de1dd2b7fb</anchor>
      <arglist>(bool debug)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NicEntryDirect</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>a21eb6f7a68d1dc62b30934651b569ba6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>connectTo</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>a56d5f3eb121f931265299294660d70e9</anchor>
      <arglist>(NicEntry *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>disconnectFrom</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>a4629b3bf3dc1836590016164bd245149</anchor>
      <arglist>(NicEntry *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NoNextIteratorException</name>
    <filename>a00163.html</filename>
  </compound>
  <compound kind="class">
    <name>NotificationBoard</name>
    <filename>a00164.html</filename>
    <member kind="typedef">
      <type>std::vector&lt; INotifiable * &gt;</type>
      <name>NotifiableVector</name>
      <anchorfile>a00164.html</anchorfile>
      <anchor>aaf7daab1d6f01c2993bc3676e1220281</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; int, NotifiableVector &gt;</type>
      <name>ClientMap</name>
      <anchorfile>a00164.html</anchorfile>
      <anchor>a04c2b90ab6db51c359ace8d11caf4041</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>subscribe</name>
      <anchorfile>a00164.html</anchorfile>
      <anchor>aeb02a282e6c807c1cb064a28e8409ff2</anchor>
      <arglist>(INotifiable *client, int category)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unsubscribe</name>
      <anchorfile>a00164.html</anchorfile>
      <anchor>a618069a9c5e40e5adc663def23325035</anchor>
      <arglist>(INotifiable *client, int category)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasSubscribers</name>
      <anchorfile>a00164.html</anchorfile>
      <anchor>a668821c8867857ed47a4adaaa99248f8</anchor>
      <arglist>(int category)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>fireChangeNotification</name>
      <anchorfile>a00164.html</anchorfile>
      <anchor>a903a21cc32b9b3c8589765b86a767f8e</anchor>
      <arglist>(int category, const cObject *details=NULL)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00164.html</anchorfile>
      <anchor>a3f958d3beda02f0a0ad5672bbed4f953</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>a00164.html</anchorfile>
      <anchor>a95125026311c1ebea679364a6eb6d4a3</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ClientMap</type>
      <name>clientMap</name>
      <anchorfile>a00164.html</anchorfile>
      <anchor>acb59aab805c7544f4a9800a2498cc828</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00164.html</anchorfile>
      <anchor>a4dc63b8b48b2e35f9fa899c3525310f6</anchor>
      <arglist>(std::ostream &amp;, const NotifiableVector &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NotificationBoardAccess</name>
    <filename>a00165.html</filename>
    <base>ModuleAccess&lt; NotificationBoard &gt;</base>
  </compound>
  <compound kind="class">
    <name>Ns2MotionFile</name>
    <filename>a00166.html</filename>
    <member kind="typedef">
      <type>std::vector&lt; double &gt;</type>
      <name>Line</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a4050f65c27e81d204da0ab2ffe5dadf5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>initial</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>aed0fa1bcea21b4a7a608da37fc26052d</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; Line &gt;</type>
      <name>LineList</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>ad17bd4cf0fc89a6c514178ca443623d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LineList</type>
      <name>lines</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a1e3cf78defb1047c483e3f512a5dcb3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>Ns2MotionMobility</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>adc8a70ffb221e7b8b1b03317d5fd013c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ns2MotionMobility</name>
    <filename>a00167.html</filename>
    <base>LineSegmentsMobilityBase</base>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>parseFile</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>a4dcd7bd41ddc2e940b819a0f6ac5958f</anchor>
      <arglist>(const char *filename)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>a17b0114ff0352fbbb0ef592feb874c74</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initializePosition</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>acc1eeda84f7a657ef2b2d69d493fdef1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setTargetPosition</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>aeacfe0bd2e3ecd3d056fc68bdcdc9ecf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>move</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>abf629f4b68228314604addd5fc911297</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>vecpos</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>a2ab85dbad3d367c27ba008b5ef1cac80</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Ns2MotionFile *</type>
      <name>ns2File</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>af195e1b467c67ffe1750dfbe9d2eb0b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>nodeId</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>aff89ada75b024015c21f757ce4cae643</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>scrollX</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>a272f83f3d1d240b4aa590081aae610ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>scrollY</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>a377df1beb5a1598914a9e5f4e698824b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Packet</name>
    <filename>a00168.html</filename>
    <member kind="function">
      <type></type>
      <name>Packet</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a04f70d419727498eaa1ea1765669729c</anchor>
      <arglist>(long bitLength, long rcvd=0, long sent=0)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getNbPacketsReceived</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>aa9a757930db7acb04bdf3e894af22a42</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getNbBitsReceived</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a4383b86f4ea19b009daf453c405b6a8b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getNbPacketsReceivedNoRS</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a7723f296d13b4e81714830ab1b29bd53</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getNbPacketsSent</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a883ac7b105b7982c9a05a9e508cd5a96</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getNbBitsSent</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>ad0a325d78b3d7fdec46400465c4313e7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNbPacketsReceived</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>aff62053b8b1ca2cb6675357cca237dcf</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNbPacketsReceivedNoRS</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a38d9b51ed06fc2523cf9f61b7d086b52</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNbPacketsSent</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a924b95edc7db36553a30060619744e2f</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBitLength</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>ac9a159a175c4cb4402f4c9876c1e7746</anchor>
      <arglist>(long bitLength)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>getBitLength</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a6ecb8c2179097a35d353b0ca07f8aa14</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHost</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>ae534c58c584a1c041578e9fa1fe50b78</anchor>
      <arglist>(const LAddress::L3Type &amp;h)</arglist>
    </member>
    <member kind="function">
      <type>const LAddress::L3Type &amp;</type>
      <name>getHost</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a3b8881c0e04d26bef60df946d64690ba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSent</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>aa1998c3505551a4a60196656e32e0b6c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPacketSent</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a6177c52d2da19fe8d0000ffe85babcf0</anchor>
      <arglist>(bool isSent)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>info</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a5c7de72a3b15448b37a63633903fb370</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>nbPacketsReceived</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a9b4ea2f302db59eb0ac0dd2a3f2048d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>nbPacketsReceivedNoRS</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a9fc28c2358463af644f6a60a1d4ee186</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>nbPacketsSent</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>af5fd55700467c7225c18f6548bdfbc8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>packetBitLength</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>aa4dd6ec7fbc2d968a43c076e9bd06167</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>sent</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a15e1758fc289da0e75ca50764ecb7adc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LAddress::L3Type</type>
      <name>host</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>ae8345d93e7f7e4ca99e12661c7e30625</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PairLess</name>
    <filename>a00169.html</filename>
    <templarg>Pair</templarg>
    <templarg>Key</templarg>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>a00169.html</anchorfile>
      <anchor>a6b33ccdc9efb6d9c56d78a881002fc49</anchor>
      <arglist>(const Pair &amp;p, const Key &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>a00169.html</anchorfile>
      <anchor>a1471222ba1517ac3ea7a1a25a07891b9</anchor>
      <arglist>(const Key &amp;v, const Pair &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>a00169.html</anchorfile>
      <anchor>a57c0f285d2b3a63be1d78ca33e0a7ff7</anchor>
      <arglist>(const Pair &amp;left, const Pair &amp;right) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PassedMessage</name>
    <filename>a00170.html</filename>
    <member kind="function">
      <type></type>
      <name>PassedMessage</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>a2b9941914d8f9f9703d5ce572c4322ad</anchor>
      <arglist>(const PassedMessage &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>PassedMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>a98696222e7afdd2417c0da0c316777a6</anchor>
      <arglist>(PassedMessage const &amp;copy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>a8da3d43078216dde43ad6e76f689a981</anchor>
      <arglist>(PassedMessage &amp;s)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>gateToString</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>a0f73ac5c7a0ae569ed1fa432a7a58048</anchor>
      <arglist>(gates_t g)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>fromModule</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>a6c340595cb29a4e8a4c55ea0503dffad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>gates_t</type>
      <name>gateType</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>a41f11b3139f3552cf2de3bb648c1ff55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>direction_t</type>
      <name>direction</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>af55219a6ed1e656af091cb7583467f5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>kind</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>ab4e2bf6d2317196af7e9c98ed2c406a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>name</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>a8a4eb44ad1e43205d1881fec0c00a6d7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PERModel</name>
    <filename>a00172.html</filename>
    <base>AnalogueModel</base>
    <member kind="function">
      <type></type>
      <name>PERModel</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>af88deff4c0b8f609b6cc5a2c15896592</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>initFromMap</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a2a72696b1edd833f3b972cccaaaca838</anchor>
      <arglist>(const ParameterMap &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>filterSignal</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a90557ea84420483d5e2cc39cc2cce017</anchor>
      <arglist>(airframe_ptr_t, const Coord &amp;, const Coord &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>packetErrorRate</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a32ced82d925f432ef880595a3d202be8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PhyLayer</name>
    <filename>a00173.html</filename>
    <base>BasePhyLayer</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual AnalogueModel *</type>
      <name>getAnalogueModelFromName</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>aaecc372ab08295d393581440b326922f</anchor>
      <arglist>(const std::string &amp;name, ParameterMap &amp;params) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Decider *</type>
      <name>getDeciderFromName</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a6f0907cd759351336c159c6e222beceb</anchor>
      <arglist>(const std::string &amp;name, ParameterMap &amp;params)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PhyLayerBattery</name>
    <filename>a00174.html</filename>
    <base>PhyLayer</base>
    <member kind="typedef">
      <type>MacPkt *</type>
      <name>macpkt_ptr_t</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>aeee5b98e239ce3ccae9f5e20f5493a33</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>a815f95ad9fe89412ff3c5991ec1cfafe</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>drawCurrent</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>aaaaec355a89dc49db47a3ca1e4ffaf90</anchor>
      <arglist>(double amount, int activity)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>setRadioState</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>ab297612cef7286db7722d19ea3a8924f</anchor>
      <arglist>(int rs)</arglist>
    </member>
    <member kind="enumeration">
      <name>Activities</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>a1eb13993a65f4147d7f99c936b4143c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Decider *</type>
      <name>getDeciderFromName</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>a9e0540a943e06cb9d7ccc80853c40986</anchor>
      <arglist>(const std::string &amp;name, ParameterMap &amp;params)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>calcTXCurrentForPacket</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>a396a3436d9a7e9116f9c06b5158029ab</anchor>
      <arglist>(macpkt_ptr_t, MacToPhyControlInfo *) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setRadioCurrent</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>a5970101ea41f75adff064d267d4cd828</anchor>
      <arglist>(int rs)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setSwitchingCurrent</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>ac729b2f04d9a037e8c58025634607f9e</anchor>
      <arglist>(int from, int to)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUpperMessage</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>a73a5457ba5a50d2d061a4cbf7dbd96b3</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleAirFrame</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>af6d51001d0cf3dae7826c3b809117977</anchor>
      <arglist>(airframe_ptr_t frame)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleHostState</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>ab687d180a389989e036e158765fe6f29</anchor>
      <arglist>(const HostState &amp;state)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finishRadioSwitching</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>a52320947de4dccb844bf26a18534fcf3</anchor>
      <arglist>(bool bSendCtrlMsg=true)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numActivities</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>a0100994772e797d41df4c41b4b9ad475</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>sleepCurrent</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>a15d15867a1ac057d60b8dc4a3771ce1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>rxCurrent</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>a43b742fc7d58613cd7cd82547ae72ab6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>decodingCurrentDelta</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>a1f391ec04019beba1fc114d37ed2c7ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>txCurrent</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>a99d73bba9a336c5d544628eb898f06ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>setupRxCurrent</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>a6c3a45f4e9353dc06ff28b70ae07e094</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>setupTxCurrent</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>a8250904854cf5543b7e25dfe683122b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>rxTxCurrent</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>afd08d6a185179e7017c862a9223a7357</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>txRxCurrent</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>a0ecdf48416041bfb393351216ab15022</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PhyLayerUWBIR</name>
    <filename>a00175.html</filename>
    <base>PhyLayerBattery</base>
    <member kind="typedef">
      <type>t_dynamic_expression_value(*</type>
      <name>fptr</name>
      <anchorfile>a00175.html</anchorfile>
      <anchor>a0bc21103d2912a0732a4e288684666df</anchor>
      <arglist>)(cComponent *context, t_dynamic_expression_value argv[], int argc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>a00175.html</anchorfile>
      <anchor>a43ea1cb734fb1538cac9e75212c4437c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00175.html</anchorfile>
      <anchor>a0bb0cfac6ebb5459b7480bf9df337a3f</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>setRadioState</name>
      <anchorfile>a00175.html</anchorfile>
      <anchor>a20ac8e3956abe65f59c69d6dcd54ec1d</anchor>
      <arglist>(int rs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isRadioInRX</name>
      <anchorfile>a00175.html</anchorfile>
      <anchor>a6f49c650fc97f95f8a5835a6e88a7f36</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static t_dynamic_expression_value</type>
      <name>ghassemzadehNLOSFunc</name>
      <anchorfile>a00175.html</anchorfile>
      <anchor>a598bde5841efb7299a2452d55c5c28e3</anchor>
      <arglist>(cComponent *, t_dynamic_expression_value argv[] __attribute__((unused)), int)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static fptr</type>
      <name>ghassemzadehNLOSFPtr</name>
      <anchorfile>a00175.html</anchorfile>
      <anchor>a302b0351dfc30fb920bac1e404e44cb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Activities</name>
      <anchorfile>a00175.html</anchorfile>
      <anchor>af67b418135096e35e238c2f135e92702</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual airframe_ptr_t</type>
      <name>encapsMsg</name>
      <anchorfile>a00175.html</anchorfile>
      <anchor>a580a9a246bc519e8c4f97a5381a8877b</anchor>
      <arglist>(cPacket *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual AnalogueModel *</type>
      <name>getAnalogueModelFromName</name>
      <anchorfile>a00175.html</anchorfile>
      <anchor>ac31e9a6af36256890a441c812643c15d</anchor>
      <arglist>(const std::string &amp;name, ParameterMap &amp;params) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Decider *</type>
      <name>getDeciderFromName</name>
      <anchorfile>a00175.html</anchorfile>
      <anchor>a2ee15cb7866f9a8bcb2f7427229d409a</anchor>
      <arglist>(const std::string &amp;name, ParameterMap &amp;params)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MiximRadio *</type>
      <name>initializeRadio</name>
      <anchorfile>a00175.html</anchorfile>
      <anchor>ad49116e3360ea2cb22d1c495fb14e800</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>switchRadioToRX</name>
      <anchorfile>a00175.html</anchorfile>
      <anchor>a56ff67f3b92bc76c59ac536ddaa67dd3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>switchRadioToSync</name>
      <anchorfile>a00175.html</anchorfile>
      <anchor>a9c45bfb4391b0f8e8f95cbd3d10da9e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setRadioCurrent</name>
      <anchorfile>a00175.html</anchorfile>
      <anchor>a43ef2c382a22da3bcf2445f855a69c6b</anchor>
      <arglist>(int rs)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setSwitchingCurrent</name>
      <anchorfile>a00175.html</anchorfile>
      <anchor>a5fe0bd496dfa869ee2646fb0ca76b2da</anchor>
      <arglist>(int from, int to)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RadioUWBIR *</type>
      <name>uwbradio</name>
      <anchorfile>a00175.html</anchorfile>
      <anchor>a24456da87c4f06ea6f3790447016ecb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>syncCurrent</name>
      <anchorfile>a00175.html</anchorfile>
      <anchor>af0ed3efc4d22e27017160fe7663125b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>PhyLayerUWBIR</name>
      <anchorfile>a00175.html</anchorfile>
      <anchor>a01b6e33a2d60280bd73ff342f0c3974c</anchor>
      <arglist>(const PhyLayerUWBIR &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>PhyLayerUWBIR &amp;</type>
      <name>operator=</name>
      <anchorfile>a00175.html</anchorfile>
      <anchor>aade3859c00c126335d9b481b78d8a343</anchor>
      <arglist>(const PhyLayerUWBIR &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>DeciderUWBIRED</name>
      <anchorfile>a00175.html</anchorfile>
      <anchor>a6584956f6ede8e0f653bad406e0c4c1e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>phyPER</name>
    <filename>a00176.html</filename>
    <base>BaseModule</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveSignal</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>af66aa42eb9cc4a85ed2df5b065773305</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, cObject *obj)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>a77bbef34f56830b35aafbdbb6ec56627</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>a54a6aabd6745231515625b51768b23d5</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>nbSyncAttempts</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>a09d1674256c1434b29f90a40931ee8e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>nbSyncSuccesses</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>ae8cda596d9050f88d812f36080bf1314</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>nbRx</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>a1f539ccf067a9cef775265a7d603a377</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>nbRxnoRS</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>a6e2c428ebbde1ca44d852fd9838cd7b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Packet</type>
      <name>packet</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>a46cb3a51375d6f3f70ec02b0df3953d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>UWBIRPacket</type>
      <name>uwbirpacket</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>a5ac4ec9415faec8b717cdf7bb5b72a6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>maiPER</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>afa3d3eb88fc496784729cd9337a9b4c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>maiPERnoRS</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>a4ec7d2775d5f39cd384a48e6941cd5d0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PhyToMacControlInfo</name>
    <filename>a00177.html</filename>
    <member kind="function">
      <type></type>
      <name>PhyToMacControlInfo</name>
      <anchorfile>a00177.html</anchorfile>
      <anchor>a8e9300c49e9f955c4b5333da109143d4</anchor>
      <arglist>(DeciderResult *result)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PhyToMacControlInfo</name>
      <anchorfile>a00177.html</anchorfile>
      <anchor>a5b56a9f0cf2b87496f6d19df98216bf5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DeciderResult *</type>
      <name>getDeciderResult</name>
      <anchorfile>a00177.html</anchorfile>
      <anchor>a695fcb4091796018a3315486acafc9b0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cObject *</type>
      <name>setControlInfo</name>
      <anchorfile>a00177.html</anchorfile>
      <anchor>a7d5a61c8f8a55edd3ea9e7d8195543ef</anchor>
      <arglist>(cMessage *const pMsg, DeciderResult *const pDeciderResult)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DeciderResult *</type>
      <name>getDeciderResult</name>
      <anchorfile>a00177.html</anchorfile>
      <anchor>a8f35582c0a725032bd6ad7bae3d73367</anchor>
      <arglist>(cMessage *const pMsg)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DeciderResult *</type>
      <name>getDeciderResultFromControlInfo</name>
      <anchorfile>a00177.html</anchorfile>
      <anchor>a0da48a989110f23b214f0fd8a2952333</anchor>
      <arglist>(cObject *const pCtrlInfo)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DeciderResult *</type>
      <name>result</name>
      <anchorfile>a00177.html</anchorfile>
      <anchor>a1dc106d6290a2f4f18b4281e14077545</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>PhyToMacControlInfo</name>
      <anchorfile>a00177.html</anchorfile>
      <anchor>ae76095ce43562a4d55d1c9f39cc671e6</anchor>
      <arglist>(const PhyToMacControlInfo &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>PhyToMacControlInfo &amp;</type>
      <name>operator=</name>
      <anchorfile>a00177.html</anchorfile>
      <anchor>a463c3368fd0aff41e4f644177b110c80</anchor>
      <arglist>(const PhyToMacControlInfo &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Posture</name>
    <filename>a00178.html</filename>
    <member kind="function">
      <type></type>
      <name>Posture</name>
      <anchorfile>a00178.html</anchorfile>
      <anchor>a2220f047525bfaca36d875fe57aef363</anchor>
      <arglist>(unsigned int, unsigned int)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumNodes</name>
      <anchorfile>a00178.html</anchorfile>
      <anchor>a54ea07f82d8f757b9c1514f9ccbc6d6a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setPostureName</name>
      <anchorfile>a00178.html</anchorfile>
      <anchor>a12591a1dc501c32eecd9c422d322dcea</anchor>
      <arglist>(char *)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setPostureSpeed</name>
      <anchorfile>a00178.html</anchorfile>
      <anchor>a8517a4c793e02f5f4cbf4cd589c2bf39</anchor>
      <arglist>(double, double)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setRadius</name>
      <anchorfile>a00178.html</anchorfile>
      <anchor>a38d971ecc896965e6f70564598b53649</anchor>
      <arglist>(unsigned int, double)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setSpeed</name>
      <anchorfile>a00178.html</anchorfile>
      <anchor>a9a1ae808066c4ffcdf73a7bc683cf456</anchor>
      <arglist>(unsigned int, double)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setPs</name>
      <anchorfile>a00178.html</anchorfile>
      <anchor>ac6e3fd122b7b79699a4b30ebe558b087</anchor>
      <arglist>(unsigned int, Coord)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setAlphaMean</name>
      <anchorfile>a00178.html</anchorfile>
      <anchor>a4fef8b2a4301bbb7dd23ad64ccc04570</anchor>
      <arglist>(unsigned int, unsigned int, double)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setAlphaSD</name>
      <anchorfile>a00178.html</anchorfile>
      <anchor>a01d63cc271da802b847daa39300b363f</anchor>
      <arglist>(unsigned int, unsigned int, double)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMobile</name>
      <anchorfile>a00178.html</anchorfile>
      <anchor>a7057d6de18f8fd8d646e0d370ab8c2a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getPostureID</name>
      <anchorfile>a00178.html</anchorfile>
      <anchor>a217bc7334d61b9441c06affd81798445</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>getPostureName</name>
      <anchorfile>a00178.html</anchorfile>
      <anchor>a40dc6d7007b14e779420da389e927aec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMaxSpeed</name>
      <anchorfile>a00178.html</anchorfile>
      <anchor>a99d879a60f411811fad6949c3b7811a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMinSpeed</name>
      <anchorfile>a00178.html</anchorfile>
      <anchor>ac805f463e2f12178b128f741cfc2f8ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRadius</name>
      <anchorfile>a00178.html</anchorfile>
      <anchor>a3b0ae5a46b6e562838f968cd1bb06b91</anchor>
      <arglist>(unsigned int)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getSpeed</name>
      <anchorfile>a00178.html</anchorfile>
      <anchor>ad29284231df7d01bf47f1aaaad192103</anchor>
      <arglist>(unsigned int)</arglist>
    </member>
    <member kind="function">
      <type>Coord</type>
      <name>getPs</name>
      <anchorfile>a00178.html</anchorfile>
      <anchor>a6cce5bfb2a17e71e346d7fd699139820</anchor>
      <arglist>(unsigned int)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getAlphaMean</name>
      <anchorfile>a00178.html</anchorfile>
      <anchor>a4ebf4ddceab8eeaf1a2f802e07750540</anchor>
      <arglist>(unsigned int, unsigned int)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getAlphaSD</name>
      <anchorfile>a00178.html</anchorfile>
      <anchor>a8e474d473692d0000790db17918e8a2b</anchor>
      <arglist>(unsigned int, unsigned int)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>numNodes</name>
      <anchorfile>a00178.html</anchorfile>
      <anchor>a26f00ed7a91cb2212501f96b3dfff654</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>postureID</name>
      <anchorfile>a00178.html</anchorfile>
      <anchor>a0c4a1ffae7770c12c0cdf627e8874bff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord *</type>
      <name>nodePs</name>
      <anchorfile>a00178.html</anchorfile>
      <anchor>a0766a3ff345ed3c738646a0b72bde74a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char</type>
      <name>posture_name</name>
      <anchorfile>a00178.html</anchorfile>
      <anchor>a411eac6d222e4c69eaeb3ae0b914ce12</anchor>
      <arglist>[50]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double **</type>
      <name>alphaMean</name>
      <anchorfile>a00178.html</anchorfile>
      <anchor>a06c51a1bf4c89b12a3c317f6ae3fc044</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double **</type>
      <name>alphaSD</name>
      <anchorfile>a00178.html</anchorfile>
      <anchor>a88871af13632952bcfc8996c5eef3906</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double *</type>
      <name>nodeRadius</name>
      <anchorfile>a00178.html</anchorfile>
      <anchor>afb21a48b225752f643ce8494393a5d1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double *</type>
      <name>nodeSpeed</name>
      <anchorfile>a00178.html</anchorfile>
      <anchor>aeb6512db7e7ac1718971b2e777754935</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>maxSpeed</name>
      <anchorfile>a00178.html</anchorfile>
      <anchor>a1d16f0f0138a5a57c72519d1a3914e69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>minSpeed</name>
      <anchorfile>a00178.html</anchorfile>
      <anchor>a259a565c328c6ca2c31ae02f7d4ba933</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PostureTransition</name>
    <filename>a00179.html</filename>
    <class kind="struct">PostureTransition::AreaBound</class>
    <class kind="struct">PostureTransition::AreaType</class>
    <class kind="struct">PostureTransition::CombinationType</class>
    <class kind="struct">PostureTransition::TimeBound</class>
    <class kind="struct">PostureTransition::TimeDomainType</class>
    <class kind="struct">PostureTransition::TransMatrix</class>
    <member kind="function">
      <type></type>
      <name>PostureTransition</name>
      <anchorfile>a00179.html</anchorfile>
      <anchor>a4b10c46a88e6be413c7395c06bf65380</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addMatrix</name>
      <anchorfile>a00179.html</anchorfile>
      <anchor>a2f02ecf5282c7bd2f124a814c9abaa47</anchor>
      <arglist>(std::string, double **, bool)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addSteadyState</name>
      <anchorfile>a00179.html</anchorfile>
      <anchor>ac5c424a8372a3d6f39ccc06c88d4249f</anchor>
      <arglist>(std::string, double *)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addAreaType</name>
      <anchorfile>a00179.html</anchorfile>
      <anchor>a261ad915b2a9c7cdf7082660360190e4</anchor>
      <arglist>(std::string)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setAreaBoundry</name>
      <anchorfile>a00179.html</anchorfile>
      <anchor>a309ed6acf7eca6469f0ea0f06ee41780</anchor>
      <arglist>(int, Coord, Coord)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addTimeDomain</name>
      <anchorfile>a00179.html</anchorfile>
      <anchor>a58c7924dfb8810ba37311217a7ba5c8d</anchor>
      <arglist>(std::string)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setTimeBoundry</name>
      <anchorfile>a00179.html</anchorfile>
      <anchor>af66d8f9dda835d55dc3009cf582f87d8</anchor>
      <arglist>(int, simtime_t, simtime_t)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addCombination</name>
      <anchorfile>a00179.html</anchorfile>
      <anchor>a5b4ab00961c0039aac63143d28e88272</anchor>
      <arglist>(std::string, std::string, std::string)</arglist>
    </member>
    <member kind="function">
      <type>double **</type>
      <name>getMatrix</name>
      <anchorfile>a00179.html</anchorfile>
      <anchor>a1f04b24b643026f15fbc95d175429c5f</anchor>
      <arglist>(simtime_t, Coord)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; TransMatrix * &gt;</type>
      <name>TransMatrixList</name>
      <anchorfile>a00179.html</anchorfile>
      <anchor>a7c9e0f2800e1fa2b681ed55c07eb8046</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; AreaType * &gt;</type>
      <name>AreaTypeList</name>
      <anchorfile>a00179.html</anchorfile>
      <anchor>a98b2ed7203b32614bd82d29079db59cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; TimeDomainType * &gt;</type>
      <name>TimeDomainList</name>
      <anchorfile>a00179.html</anchorfile>
      <anchor>a867c3cd2530e28d6f2953508a700ffec</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; CombinationType * &gt;</type>
      <name>CombinationList</name>
      <anchorfile>a00179.html</anchorfile>
      <anchor>a03a03987992fffd49db8174cf6e83953</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double **</type>
      <name>extractMatrixFromSteadyState</name>
      <anchorfile>a00179.html</anchorfile>
      <anchor>a3ddddcbf58ad8e1edd23cf8023c7b974</anchor>
      <arglist>(double *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>findTimeDomain</name>
      <anchorfile>a00179.html</anchorfile>
      <anchor>ae252301f9e6668f04fad293321f55066</anchor>
      <arglist>(simtime_t)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>findAreaType</name>
      <anchorfile>a00179.html</anchorfile>
      <anchor>a299b33afdc27f467b3cdd472a397bb5a</anchor>
      <arglist>(Coord)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isMarkovian</name>
      <anchorfile>a00179.html</anchorfile>
      <anchor>abe806a2afdeb239694094c24446f699f</anchor>
      <arglist>(double **)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isMarkovian</name>
      <anchorfile>a00179.html</anchorfile>
      <anchor>a67a8cc00702db7106fc5b38447398856</anchor>
      <arglist>(double *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>multMatrix</name>
      <anchorfile>a00179.html</anchorfile>
      <anchor>abe7336508b8864deeb66872425662587</anchor>
      <arglist>(double **, double **, double **)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addMatrix</name>
      <anchorfile>a00179.html</anchorfile>
      <anchor>a10abfb612543bbc52f6a13a0e138d822</anchor>
      <arglist>(double **, double **, double **)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>subtractMatrix</name>
      <anchorfile>a00179.html</anchorfile>
      <anchor>af48e8ee3a857b2425a9f1fe6ded08841</anchor>
      <arglist>(double **, double **, double **)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>multVector</name>
      <anchorfile>a00179.html</anchorfile>
      <anchor>a2781afe68489f9278e755429787b22ec</anchor>
      <arglist>(double *, double **)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numPos</name>
      <anchorfile>a00179.html</anchorfile>
      <anchor>a88d4a9fb3d68fb6792ebade157067d73</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>defaultMatrixID</name>
      <anchorfile>a00179.html</anchorfile>
      <anchor>ae24e4f7a9dc7453d935b87669a0edf24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TransMatrixList</type>
      <name>matrixList</name>
      <anchorfile>a00179.html</anchorfile>
      <anchor>a16d12fd657a13f5a43f5b9d1dd6fea7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AreaTypeList</type>
      <name>areaTypeList</name>
      <anchorfile>a00179.html</anchorfile>
      <anchor>a438b1e6813a28c3b9b49ae4ecef1b937</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TimeDomainList</type>
      <name>timeDomainList</name>
      <anchorfile>a00179.html</anchorfile>
      <anchor>a0566260a55d34fde7d6e35103f95785a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CombinationList</type>
      <name>combinationList</name>
      <anchorfile>a00179.html</anchorfile>
      <anchor>ab4afd59bcc62d7e198bebff13c873746</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>PostureTransition::AreaBound</name>
    <filename>a00011.html</filename>
    <member kind="variable">
      <type>Coord</type>
      <name>low</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>add5606570fa417da7028df965cc1fa9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Coord</type>
      <name>high</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a03fc1e04e84557e5306aaf27dc2ebf4e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>PostureTransition::AreaType</name>
    <filename>a00012.html</filename>
    <member kind="variable">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a034b5828f054bd45969563779dad15c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; AreaBound * &gt;</type>
      <name>boundries</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>aaa69008b1faa01cf198b84aa333487d0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>PostureTransition::CombinationType</name>
    <filename>a00048.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>timeID</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a4564042e7d786d9fba35e209d2226043</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>areaID</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a01951aa952921febc05099eb50019a8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>matrixID</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a3bc4b770b76110c261dc9520011b12fb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>PostureTransition::TimeBound</name>
    <filename>a00210.html</filename>
    <member kind="variable">
      <type>simtime_t</type>
      <name>low</name>
      <anchorfile>a00210.html</anchorfile>
      <anchor>a040ae271a53085518ee0636b49179e0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>high</name>
      <anchorfile>a00210.html</anchorfile>
      <anchor>a8709f1adcbfd47c0e6e29531b27f72c7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>PostureTransition::TimeDomainType</name>
    <filename>a00211.html</filename>
    <member kind="variable">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>a00211.html</anchorfile>
      <anchor>a7d151114380a92106d59d8bf068c7059</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; TimeBound * &gt;</type>
      <name>boundries</name>
      <anchorfile>a00211.html</anchorfile>
      <anchor>a998d2d9286f561bdd631d061dcead52e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>PostureTransition::TransMatrix</name>
    <filename>a00218.html</filename>
    <member kind="variable">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a2001d7ee6ea999a74862006357a335dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double **</type>
      <name>matrix</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a807ce24addc211660c041eb2fc964442</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ProbabilisticBroadcast</name>
    <filename>a00180.html</filename>
    <base>BaseNetwLayer</base>
    <class kind="struct">ProbabilisticBroadcast::tMsgDesc</class>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>abf8d4a866267695fc27802ada7862526</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>a9435d3ab2ff6a6c68eac011babe7511c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>struct ProbabilisticBroadcast::tMsgDesc</type>
      <name>tMsgDesc</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>aaa293bbd1aa7cdfbe1498c675d04ec51</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::set&lt; unsigned int &gt;</type>
      <name>MsgIdSet</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>a7b3c6f1c688d8a7b7254f276d0397263</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::multimap&lt; simtime_t, tMsgDesc * &gt;</type>
      <name>TimeMsgMap</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>afc30da3cce90973f0428acae9b5da46e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUpperMsg</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>a7bf4d5846300082695448feb01b9899e</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerMsg</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>afe7ebec835c0816b263c52a622a655da</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>a617c3e0c1a2179b6b560c2286732b2ad</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerControl</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>ad145699484af57f4f86319f4c62a9166</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>messageKnown</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>ac076408bb816780d45ff5b97b851cc6e</anchor>
      <arglist>(unsigned int msgId)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>debugMessageKnown</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>ae12c5ea0e8a3f6d2d941bd37181afc13</anchor>
      <arglist>(unsigned int msgId)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>insertMessage</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>a4cdd4033716469b5aa654b6a95f243ea</anchor>
      <arglist>(simtime_t_cref bcastDelay, tMsgDesc *msgDesc)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual tMsgDesc *</type>
      <name>popFirstMessageUpdateQueue</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>a738c10077912959af85fe7a322f16dc3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual netwpkt_ptr_t</type>
      <name>encapsMsg</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>a3fe5edff45548230ba917138683fd6fa</anchor>
      <arglist>(cPacket *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual cPacket *</type>
      <name>decapsMsg</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>a4a0384a5fb7b18557c33c6b2ead5722d</anchor>
      <arglist>(netwpkt_ptr_t msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>insertNewMessage</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>a9a61bf8f39a389f1c3651785fd32149f</anchor>
      <arglist>(ProbabilisticBroadcastPkt *pkt, bool iAmInitialSender=false)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static long</type>
      <name>getNextID</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>a95cc7ee0bf46971f30699c92711c1734</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>broadcastPeriod</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>a3487bf94d9135c4db3a084a20628719d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>beta</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>a94d2b55cb729ca2f8b84a97d1932eca2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>timeToLive</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>af0d63bc3d6c4b568d040e8f4ae9a3501</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>maxNbBcast</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>a5bd284f25c3de84f8d82d84d9da2a33a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>maxFirstBcastBackoff</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>aee51411ce58e319d4b7be77e946f65bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>timeInQueueAfterDeath</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>a142757ae77bf5a9500bbe6a956a4b1a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>headerLength</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>ac854fd1705c045693986aff67f61b570</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>trace</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>a1a20a131900710634c669a486ef3c113</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>stats</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>ab71b49b22a10c9a1b5d691a430158d59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>debug</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>a1712864794da337b2963293f4ca402ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>broadcastTimer</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>a1c12eb05b750dde90df63c358c25f03d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MsgIdSet</type>
      <name>knownMsgIds</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>a4b9b26b6994df3a5f9a558c453042ad1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TimeMsgMap</type>
      <name>msgQueue</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>a264b7bb55107fc4c9adff6e5e64d628f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MsgIdSet</type>
      <name>debugMsgIdSet</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>a4a5bf01234efb0e8d8f1ba16eac22eb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>nbDataPacketsReceived</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>a345bf741a515a8d1c540ca1685b385c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>nbDataPacketsSent</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>ab9ffe29fa03be20e518fc8036f631eb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>nbHops</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>a54a8aa2be349455d0f2cfec50776a2d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>debugNbMessageKnown</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>abae6a8aa700de8c211d3e4bc9d7a7f7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>nbDataPacketsForwarded</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>a524eae580545f9c4905005dd8a52e31e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>oneHopLatencies</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>aca59561a35147404a3d66cd5ba57ec58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static long</type>
      <name>id_counter</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>aca74a9f2aa59ab504d35733a720409da</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>ProbabilisticBroadcast</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>a964879f6e15313ffe6a1486eff965b21</anchor>
      <arglist>(const ProbabilisticBroadcast &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>ProbabilisticBroadcast &amp;</type>
      <name>operator=</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>a5294643076bf92f407fd618c63c79666</anchor>
      <arglist>(const ProbabilisticBroadcast &amp;)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ProbabilisticBroadcast::tMsgDesc</name>
    <filename>a00214.html</filename>
    <member kind="variable">
      <type>ProbabilisticBroadcastPkt *</type>
      <name>pkt</name>
      <anchorfile>a00214.html</anchorfile>
      <anchor>ab079da35bcb145cfb86ae92be2403539</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nbBcast</name>
      <anchorfile>a00214.html</anchorfile>
      <anchor>ac16c2b8555f16a26d05019a1b8fcb1b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>initialSend</name>
      <anchorfile>a00214.html</anchorfile>
      <anchor>a28456415a94934ad84f81517e38ee7ee</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ProbBcastNetwControlInfo</name>
    <filename>a00181.html</filename>
    <base>NetwControlInfo</base>
    <member kind="function">
      <type></type>
      <name>ProbBcastNetwControlInfo</name>
      <anchorfile>a00181.html</anchorfile>
      <anchor>a90339985658c9b31359e94415b592562</anchor>
      <arglist>(const LAddress::L3Type &amp;addr=LAddress::L3NULL, simtime_t_cref vttl=0, double vcriticality=0.0, unsigned int vid=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ProbBcastNetwControlInfo</name>
      <anchorfile>a00181.html</anchorfile>
      <anchor>abd1bc2c945b2e0f1f9915541780eaee0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t_cref</type>
      <name>getTtl</name>
      <anchorfile>a00181.html</anchorfile>
      <anchor>a55c2eb85b085afdcf65abba09cc007cb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTtl</name>
      <anchorfile>a00181.html</anchorfile>
      <anchor>a70f13b9ad68c2881590a96432b48fce8</anchor>
      <arglist>(simtime_t_cref vttl)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getCriticality</name>
      <anchorfile>a00181.html</anchorfile>
      <anchor>a2ea20bc855f7238f403178fd36c0dcbc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCriticality</name>
      <anchorfile>a00181.html</anchorfile>
      <anchor>a380ef30f9d5c17f9e785c5c9ad0815fc</anchor>
      <arglist>(const double vcriticality)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getId</name>
      <anchorfile>a00181.html</anchorfile>
      <anchor>ae078c47a1f3a5543447d75ec0edd28d3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setId</name>
      <anchorfile>a00181.html</anchorfile>
      <anchor>a528a8d9d856cb40412e41f2e4a2c421a</anchor>
      <arglist>(const unsigned int vid)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>ttl</name>
      <anchorfile>a00181.html</anchorfile>
      <anchor>ac8276c790d37786b863d0409710c2501</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>criticality</name>
      <anchorfile>a00181.html</anchorfile>
      <anchor>abfef01ec920d8d73ff3fd9afbc969a9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>id</name>
      <anchorfile>a00181.html</anchorfile>
      <anchor>afc262775011e969b55984bb946b276de</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RadioStateAnalogueModel</name>
    <filename>a00182.html</filename>
    <base>AnalogueModel</base>
    <class kind="class">RadioStateAnalogueModel::ListEntry</class>
    <member kind="typedef">
      <type>std::list&lt; ListEntry &gt;</type>
      <name>time_attenuation_collection_type</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>a40d4abacbe1feb2cf2bbc4902f0f24e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RadioStateAnalogueModel</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>a722dae61250442ba49917eceff0bdb74</anchor>
      <arglist>(Argument::mapped_type_cref initValue, bool currentlyTracking=false, simtime_t_cref initTime=SIMTIME_ZERO)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>filterSignal</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>ad1d87d5b9447579b3d28dcdcc4d0dd32</anchor>
      <arglist>(airframe_ptr_t, const Coord &amp;, const Coord &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTrackingModeTo</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>a9a3457871c28e3e86759f70a9def9f28</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cleanUpUntil</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>a8034e0bc85edc2debfcacacafc86cefb</anchor>
      <arglist>(simtime_t_cref t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeRecvEntry</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>ad80154bcc09f8db0e08efb2efd75872c</anchor>
      <arglist>(simtime_t_cref time, Argument::mapped_type_cref value)</arglist>
    </member>
    <member kind="variable">
      <type>time_attenuation_collection_type</type>
      <name>radioStateAttenuation</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>a85a93fd7827eb98707f472d31e5c6fd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>currentlyTracking</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>a576c1bc7398c256153ac9e22bbc84f61</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>RSAMMapping</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>a6ec9262901fa86ea2ef6d08fc9410144</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>RSAMConstMappingIterator</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>ab901736afc45f0b8dbe019c39356aa09</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RadioStateAnalogueModel::ListEntry</name>
    <filename>a00125.html</filename>
    <member kind="function">
      <type></type>
      <name>ListEntry</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>a103b5e4c79f39b84b58341464a697d8b</anchor>
      <arglist>(simtime_t_cref time, Argument::mapped_type_cref value)</arglist>
    </member>
    <member kind="function">
      <type>simtime_t_cref</type>
      <name>getTime</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>a7891497cd233d578f2e7ba3f01552870</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTime</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>a498d467b4ad9223646bf3c78ee2626b7</anchor>
      <arglist>(simtime_t_cref time)</arglist>
    </member>
    <member kind="function">
      <type>Argument::mapped_type_cref</type>
      <name>getValue</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>ad01a32f5c87cb21f5773449a6f914fd8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>aa15158ad239ac703da7d93c77ac35e68</anchor>
      <arglist>(Argument::mapped_type_cref value)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::pair&lt; simtime_t, Argument::mapped_type &gt;</type>
      <name>basicTimestamp</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>a9d66461184f2716ac7d3fb5810d998d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>a2871467101970cb463d69dc27772994a</anchor>
      <arglist>(const ListEntry &amp;e, simtime_t_cref t)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>a17dd091fbb3d71bcb53c2324f25a695f</anchor>
      <arglist>(simtime_t_cref t, const ListEntry &amp;e)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>a96ad143c7a58ddc09f6f2feaa41fea8c</anchor>
      <arglist>(const ListEntry &amp;left, const ListEntry &amp;right)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RadioUWBIR</name>
    <filename>a00183.html</filename>
    <base>MiximRadio</base>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>switchTo</name>
      <anchorfile>a00183.html</anchorfile>
      <anchor>a4fcf2fff34e2a9d289028ebe13b6ada1</anchor>
      <arglist>(int newState, simtime_t_cref now)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>reallySwitchTo</name>
      <anchorfile>a00183.html</anchorfile>
      <anchor>a96b2407e5162bf2b54c2a67b723efa84</anchor>
      <arglist>(int newState, simtime_t_cref now)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RadioUWBIR *</type>
      <name>createNewUWBIRRadio</name>
      <anchorfile>a00183.html</anchorfile>
      <anchor>ae4588bd3c5aafd430f3722a85a4baa6c</anchor>
      <arglist>(bool recordStats, int initialState, Argument::mapped_type_cref minAtt=Argument::MappedOne, Argument::mapped_type_cref maxAtt=Argument::MappedZero)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>RadioUWBIR</name>
      <anchorfile>a00183.html</anchorfile>
      <anchor>ac1d6465afc99160c6efbe87d95be91d8</anchor>
      <arglist>(int numRadioStates, bool recordStats, int initialState, Argument::mapped_type_cref minAtt=Argument::MappedOne, Argument::mapped_type_cref maxAtt=Argument::MappedZero)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Argument::mapped_type_cref</type>
      <name>mapStateToAtt</name>
      <anchorfile>a00183.html</anchorfile>
      <anchor>a4b53bfa722dbe40dd1a46ddc39c90a81</anchor>
      <arglist>(int state)</arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual void</type>
      <name>startReceivingFrame</name>
      <anchorfile>a00183.html</anchorfile>
      <anchor>a2fe9963465ed09e02428c4949a85d56b</anchor>
      <arglist>(simtime_t_cref now)</arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual void</type>
      <name>finishReceivingFrame</name>
      <anchorfile>a00183.html</anchorfile>
      <anchor>a1cdcafe6ddd11881a67a519f5ca90f82</anchor>
      <arglist>(simtime_t_cref now)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>PhyLayerUWBIR</name>
      <anchorfile>a00183.html</anchorfile>
      <anchor>a76d3794507c276b04459ca2a6f7967d7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RandomFreqTimeModel</name>
    <filename>a00184.html</filename>
    <base>AnalogueModel</base>
    <member kind="function">
      <type></type>
      <name>RandomFreqTimeModel</name>
      <anchorfile>a00184.html</anchorfile>
      <anchor>af43a3836fe69642419f7577942aaa810</anchor>
      <arglist>(int seed=23)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>initFromMap</name>
      <anchorfile>a00184.html</anchorfile>
      <anchor>a59618233607756964713ab8e45cce848</anchor>
      <arglist>(const ParameterMap &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>filterSignal</name>
      <anchorfile>a00184.html</anchorfile>
      <anchor>a9c8c9efca7849ffb32d315a71d2a7184</anchor>
      <arglist>(airframe_ptr_t, const Coord &amp;, const Coord &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Dimension</type>
      <name>frequency</name>
      <anchorfile>a00184.html</anchorfile>
      <anchor>a90eae73608986a38d5dcd71c4ddce7a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const DimensionSet</type>
      <name>dimensions</name>
      <anchorfile>a00184.html</anchorfile>
      <anchor>a918823c159b50a6f90c51c1b79b9018a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RandomFrequencyOnlyModel</name>
    <filename>a00185.html</filename>
    <base>AnalogueModel</base>
    <member kind="function">
      <type></type>
      <name>RandomFrequencyOnlyModel</name>
      <anchorfile>a00185.html</anchorfile>
      <anchor>a7f2a29b2108609ff9f1549ee74668ffc</anchor>
      <arglist>(int seed=23)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>initFromMap</name>
      <anchorfile>a00185.html</anchorfile>
      <anchor>a89ed481e27038eec8dcd71c7c55437d1</anchor>
      <arglist>(const ParameterMap &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>filterSignal</name>
      <anchorfile>a00185.html</anchorfile>
      <anchor>acac71950a5a7176292f7c404c32f609c</anchor>
      <arglist>(airframe_ptr_t, const Coord &amp;, const Coord &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Dimension</type>
      <name>frequency</name>
      <anchorfile>a00185.html</anchorfile>
      <anchor>abe40315d1e83aab5a999278cd7f2da6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const DimensionSet</type>
      <name>dimensions</name>
      <anchorfile>a00185.html</anchorfile>
      <anchor>a42f3ab529c90ee41904e5cc95fae5bd7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RandomWPMobility</name>
    <filename>a00186.html</filename>
    <base>LineSegmentsMobilityBase</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>ae3269ca71d4aa02a51fc7933782737e0</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setTargetPosition</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>aec3111a2fa5e5bed3737d1067d2b01b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>move</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>a7775f9c1fad0e50420c7dd16a4738562</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>nextMoveIsWait</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>a4f79cd5fe8c2350af8703874ca1dfb06</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RectangleMobility</name>
    <filename>a00187.html</filename>
    <base>MovingMobilityBase</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00187.html</anchorfile>
      <anchor>a7042d73fe8ec8419352e5e0e8d188e28</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initializePosition</name>
      <anchorfile>a00187.html</anchorfile>
      <anchor>a21250a0ded7592d849975ec6ebb41c79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>move</name>
      <anchorfile>a00187.html</anchorfile>
      <anchor>a32ecffdbc60f4af16a23acd84b8aab90</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>speed</name>
      <anchorfile>a00187.html</anchorfile>
      <anchor>a9310117cb7d6d7290eb16ceec3daf98f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>d</name>
      <anchorfile>a00187.html</anchorfile>
      <anchor>aa83622f27b0d73d7d4f4dad3dde4d7ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>corner1</name>
      <anchorfile>a00187.html</anchorfile>
      <anchor>a1cbbe28da9bb02adb85d20443b532661</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>corner2</name>
      <anchorfile>a00187.html</anchorfile>
      <anchor>a1b7ab4275ae23da11aaa267676966e99</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>corner3</name>
      <anchorfile>a00187.html</anchorfile>
      <anchor>aff489c70c030aec6f6bcb2f25979001e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>corner4</name>
      <anchorfile>a00187.html</anchorfile>
      <anchor>afb7594642fcbc485adf6996b73fb57c7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RSAMConstMappingIterator</name>
    <filename>a00188.html</filename>
    <base>ConstMappingIterator</base>
    <member kind="function">
      <type></type>
      <name>RSAMConstMappingIterator</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>a88568a19f3ddbae8645fdabffc2dc2a5</anchor>
      <arglist>(const RadioStateAnalogueModel *rsam, simtime_t_cref signalStart, simtime_t_cref signalEnd)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>jumpTo</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>a3740e6b65c335fcde632e296b56070de</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNextPosition</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>a082fa16cd2eaa7ac2dd0b16b66660317</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>jumpToBegin</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>a3a34a4fb1e22f7e0bbac13e21d08415e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>iterateTo</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>a7694574b32a82ddbfa3e86bed32be016</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>next</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>a919ae04b93ed239dc2f5566a383f28d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>inRange</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>a7dd83432a7cd3ff5d1f827cb34f61a32</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasNext</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>a1a5d0e40bb42450fb2158e6172cc27d1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Argument &amp;</type>
      <name>getPosition</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>af465b20a9a50c6640289e7f53f26134d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Argument &amp;</type>
      <name>getNextPosition</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>a35441df57b5a398c15aefd4696ac9e44</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual argument_value_t</type>
      <name>getValue</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>a59275f8855f0bda32e25116da54dcd2f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>iterateToOverZeroSwitches</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>a8387043b9b90a5ea75d3d968cbb87f10</anchor>
      <arglist>(simtime_t_cref t)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const RadioStateAnalogueModel *</type>
      <name>rsam</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>aad2e47c90690500114b0715ac93fdea0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RadioStateAnalogueModel::time_attenuation_collection_type::const_iterator</type>
      <name>it</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>af50e95907f71f9fba359cb559549cef3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Argument</type>
      <name>position</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>a9039bc33a7d35f7fefa980d1bc48ad5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Argument</type>
      <name>nextPosition</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>a926d1e5571f715a515233de3f245dea2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>signalStart</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>a44e62faddab1436a85e70e80d00080ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>signalEnd</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>a1f51b46c71a890d8331afb993bf1cc54</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>RSAMConstMappingIterator</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>a0229778be6916b25666e3d11ab82fd01</anchor>
      <arglist>(const RSAMConstMappingIterator &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>RSAMConstMappingIterator &amp;</type>
      <name>operator=</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>aa3cb210d24799738fd2971116477f45c</anchor>
      <arglist>(const RSAMConstMappingIterator &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RSAMMapping</name>
    <filename>a00189.html</filename>
    <base>ConstMapping</base>
    <member kind="function">
      <type></type>
      <name>RSAMMapping</name>
      <anchorfile>a00189.html</anchorfile>
      <anchor>af06c2c7d0de01d46127f12a4d43d3617</anchor>
      <arglist>(const RSAMMapping &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>RSAMMapping &amp;</type>
      <name>operator=</name>
      <anchorfile>a00189.html</anchorfile>
      <anchor>afd82b76846eaeea2ac5ac06255770258</anchor>
      <arglist>(const RSAMMapping &amp;copy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>a00189.html</anchorfile>
      <anchor>a61ee1608b52cd975bffe1350f468a4cb</anchor>
      <arglist>(RSAMMapping &amp;s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RSAMMapping</name>
      <anchorfile>a00189.html</anchorfile>
      <anchor>acec9b66637a97c81d45a073f622bf9ee</anchor>
      <arglist>(const RadioStateAnalogueModel *rsam, simtime_t_cref signalStart, simtime_t_cref signalEnd)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual argument_value_t</type>
      <name>getValue</name>
      <anchorfile>a00189.html</anchorfile>
      <anchor>adfde2753ba641cbdafbd95fc914034e6</anchor>
      <arglist>(const Argument &amp;pos) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstMappingIterator *</type>
      <name>createConstIterator</name>
      <anchorfile>a00189.html</anchorfile>
      <anchor>a0c4471fe51b34fab8f93b644326c1862</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstMappingIterator *</type>
      <name>createConstIterator</name>
      <anchorfile>a00189.html</anchorfile>
      <anchor>a79e3de9b0f3220b01dd28346e51ae019</anchor>
      <arglist>(const Argument &amp;pos) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstMapping *</type>
      <name>constClone</name>
      <anchorfile>a00189.html</anchorfile>
      <anchor>a7b47c38b2b2c98e251db268c9fe4ce6d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const RadioStateAnalogueModel *</type>
      <name>rsam</name>
      <anchorfile>a00189.html</anchorfile>
      <anchor>a1e968e40c9c6d55ef033aea16dc7cc92</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>signalStart</name>
      <anchorfile>a00189.html</anchorfile>
      <anchor>a83073d619992a38be77157eeaa8de677</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>signalEnd</name>
      <anchorfile>a00189.html</anchorfile>
      <anchor>ac4a1ed01e6319d66ada6b7bab12ce93f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SamplePhyLayer</name>
    <filename>a00190.html</filename>
    <base>PhyLayer</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00190.html</anchorfile>
      <anchor>a51d4997ab7973ee4b174ae49fb9b658f</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>a00190.html</anchorfile>
      <anchor>aea91987fbece2dea329cf0a24dfa5450</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual AnalogueModel *</type>
      <name>getAnalogueModelFromName</name>
      <anchorfile>a00190.html</anchorfile>
      <anchor>a4a7e75e458a9e9ea62bd933378baa7d7</anchor>
      <arglist>(const std::string &amp;name, ParameterMap &amp;params) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Decider *</type>
      <name>getDeciderFromName</name>
      <anchorfile>a00190.html</anchorfile>
      <anchor>ad2c09c9853706c2949e06dd9e4fb0739</anchor>
      <arglist>(const std::string &amp;name, ParameterMap &amp;params)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>log</name>
      <anchorfile>a00190.html</anchorfile>
      <anchor>ac5a75e29cb99697bfcf7549ad5381db9</anchor>
      <arglist>(std::string msg) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>a00190.html</anchorfile>
      <anchor>aa61c5b8f1e8b668d04515b0ce21983fb</anchor>
      <arglist>(const T &amp;v) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SensorApplLayer</name>
    <filename>a00191.html</filename>
    <base>BaseLayer</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>aac9612746afd57f4393658789d3c64fe</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a3dd29a64d1a719cd0eaea713604a4791</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>af822f0d57cf5642efe603f6fd83612c0</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerMsg</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a1100fd46a8ced89ff27dd845de9c0d63</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerControl</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>ae7d9070dfdde5b29f9d707973f81099f</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUpperMsg</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a999fc38567d79965df17646dcbf38e84</anchor>
      <arglist>(cMessage *m)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUpperControl</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a92df66edc3522240f26e56c25e5c1c21</anchor>
      <arglist>(cMessage *m)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendData</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a874cfc7ac28f9b46f51eea860536ab59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeDistribution</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a08e69649b4aa1b598216c5aa2d12e940</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>scheduleNextPacket</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a246b38e417b96f476d61a5f6899a11b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>cStdDev &amp;</type>
      <name>hostsLatency</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>ac9d94d2ed83444dbea11b6255f0cd1b0</anchor>
      <arglist>(const LAddress::L3Type &amp;hostAddress)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>delayTimer</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a3375e6f49ac3784496a7a6ffe9e2fc35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LAddress::L3Type</type>
      <name>myAppAddr</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a72e00ca1da89eba0b3bcb1605e0c08ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LAddress::L3Type</type>
      <name>destAddr</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a9940a24ee62f9cecdbea289ca2e85c87</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>sentPackets</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>acf6112c3199e4da114ac4b1c9cd67eee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>initializationTime</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a27d84efacfd12f69d4b8ce46c7d81e3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>firstPacketGeneration</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a638d8d62f6fbf0f83ea7817d08527949</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>lastPacketReception</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a39eeaa89f77e3fec16674571263ab353</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>trafficType</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a7f256e95120539f7e4ec12b9e98fd87e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>trafficParam</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>ae0e8514e2d8d1390c9504fc2d4dc458e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>nbPackets</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>abd87aa5ce596b1b9d985828be9f89779</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>nbPacketsSent</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a67fa481f2752142bf155cdb7010efd41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>nbPacketsReceived</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a971e61f21143b670e7c4462d5f8d54ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>stats</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a8c46dd133a8360b2b7ab2a43549cb61f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>trace</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a59083df1439f7a7d3f05f432dc1659b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>debug</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a6d8bd1aaca78da940546c05fb597bf00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>broadcastPackets</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a3decc9ad2daaaadc24e54f612f735dae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; LAddress::L3Type, cStdDev &gt;</type>
      <name>latencies</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a9b01d3a81c84371cac5bd38985a27de7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cStdDev</type>
      <name>latency</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>ad56d0d82d8dc0c36ccf7f4958feb381e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>latenciesRaw</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a0f405c2797c0609b7a093449c4da3f5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Packet</type>
      <name>packet</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a169d60c938ce6ea91954f5085ccc5164</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>headerLength</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a61a1450b8823596784f09befffa791f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BaseWorldUtility *</type>
      <name>world</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a059d142df87f53397e49178fc3bea03f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>dataOut</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a02ce31b9a41fb7dd4ac97f53cfd45671</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>dataIn</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a50407433f2187e17eeca411c2e07bf2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>ctrlOut</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>aeeb05a8981390520fc56593c5764810f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>ctrlIn</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>ab4862ee2fc1a727b44d07b2d4a5a00ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>SensorApplLayer</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a39256e730b7fc84e5868809b3625bd11</anchor>
      <arglist>(const SensorApplLayer &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>SensorApplLayer &amp;</type>
      <name>operator=</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a1d82e523d2e9cee09568c311e738628c</anchor>
      <arglist>(const SensorApplLayer &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Signal</name>
    <filename>a00192.html</filename>
    <member kind="typedef">
      <type>ConcatConstMapping&lt; std::multiplies&lt; double &gt; &gt;</type>
      <name>MultipliedMapping</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>a484a5f8dfebfd933edcb1a55770df0e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; ConstMapping * &gt;</type>
      <name>ConstMappingList</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>a463671c45cf3099eb81d8840c86a27b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Signal</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>a0da19733584d5de330474ee32b6bc186</anchor>
      <arglist>(simtime_t_cref start=-1.0, simtime_t_cref length=-1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Signal</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>a079cc6bee7380f5744001d5f26505b2c</anchor>
      <arglist>(const Signal &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>Signal &amp;</type>
      <name>operator=</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>a562664a0cf28279a2d0f0bbdc1fedf8b</anchor>
      <arglist>(const Signal &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>a9b608e1461bfaaff534bc7c0b220c6b0</anchor>
      <arglist>(Signal &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Signal</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>ae7a1d116cda63e790bf9aab549d57d3a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>simtime_t_cref</type>
      <name>getSendingStart</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>a0d2a31d69d90186d6f0ba17719f3a9e6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>getSendingEnd</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>a65d72906b81304dd63f93408ba8f4b34</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>getReceptionStart</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>a7c4710243cf87caf7dfc9f313e2619b2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>getReceptionEnd</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>a2875223239e124d85949e1116cc12ae9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>simtime_t_cref</type>
      <name>getDuration</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>a22f7cede842dbfe895cd8aedf708402f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>simtime_t_cref</type>
      <name>getPropagationDelay</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>a815379c4c75ace99ad262d4abc651f11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPropagationDelay</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>a2864ac2fa780e25223db94ba3d36b8e9</anchor>
      <arglist>(simtime_t_cref delay)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTransmissionPower</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>ad8c5494d0f7bd564bf14dc0c90f9a361</anchor>
      <arglist>(ConstMapping *power)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBitrate</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>a86e4ecdabd5ca03ede5e2c81c6b76002</anchor>
      <arglist>(Mapping *bitrate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addAttenuation</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>a0beeef0f27c33145a0fca521df1c5f5c</anchor>
      <arglist>(ConstMapping *att)</arglist>
    </member>
    <member kind="function">
      <type>ConstMapping *</type>
      <name>getTransmissionPower</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>a392ecf1a624edfb90243e7227370a772</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ConstMapping *</type>
      <name>getTransmissionPower</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>a5e8552f0d95e8faea2dee32ee7ba7212</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Mapping *</type>
      <name>getBitrate</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>afcfa26a0f384f475a019446b33c7458d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ConstMappingList &amp;</type>
      <name>getAttenuation</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>a9b949d4e6bd18f6baccd66748c2bcd78</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const MultipliedMapping *</type>
      <name>getReceivingPower</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>a78255d9a9f6c3bffb72a51ce48e2fbb9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cModule *</type>
      <name>getReceptionModule</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>ac78bb49ae3090d9954722feaad3e88ae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cGate *</type>
      <name>getReceptionGate</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>a3de107a6c7b0283bb79b7e641616b26c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cModule *</type>
      <name>getSendingModule</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>a2edb4eb1bb7cb96f389999ba624ad5bd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cGate *</type>
      <name>getSendingGate</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>a687a2fde154487ff1c6516073a5fc0c4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setReceptionSenderInfo</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>a6354b073881f4ea6190637d2e0164372</anchor>
      <arglist>(const cMessage *const pMsg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>markRcvPowerOutdated</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>a594e926b3d8ff3330375c8850699ae76</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>senderModuleID</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>a3e9509d6f61f45994b1bf49d319e4b31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>senderFromGateID</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>a7355857ae0852dfe9e415d475585396b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>receiverModuleID</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>a44ca8e70f7bd86a8af28bd382bea7434</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>receiverToGateID</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>a539dc4174aaa8ca81c7b40b9e39470fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>sendingStart</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>a56c032041881146f469092037028affb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>duration</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>a8073ad666fac40bf900fe0d9d6a88fa1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>propagationDelay</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>a8549f666048ce96bcfd1b4d9c9a3e95b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ConstMapping *</type>
      <name>power</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>a3570fb45af2a0f7580ee32c57e90e2b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Mapping *</type>
      <name>bitrate</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>a4a6e1ad1165fc73157c8820739011e85</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Mapping *</type>
      <name>txBitrate</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>ac60bce52288a4fc2067aa394918edf37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ConstMappingList</type>
      <name>attenuations</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>a1fb9da7932d7c4746f2afaaa21153cce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MultipliedMapping *</type>
      <name>rcvPower</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>a9e3d433a61e8188c8a6de5b540da8d5e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimpleBattery</name>
    <filename>a00193.html</filename>
    <base>BaseBattery</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00193.html</anchorfile>
      <anchor>a02f43017e7f375fb12a3299f929f99d3</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>a00193.html</anchorfile>
      <anchor>a6741c08be8212fe0fe2786285157b991</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleHostState</name>
      <anchorfile>a00193.html</anchorfile>
      <anchor>aad95dbfe21ea8354b02af1e9b4d387f7</anchor>
      <arglist>(const HostState &amp;state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>a00193.html</anchorfile>
      <anchor>a06b1ab5eb89e7cf72c0660eb5ed68f31</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>registerDevice</name>
      <anchorfile>a00193.html</anchorfile>
      <anchor>abb7866a326788b64466534c95ccb2b52</anchor>
      <arglist>(const std::string &amp;name, int numAccounts)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>draw</name>
      <anchorfile>a00193.html</anchorfile>
      <anchor>aae7228c50e302f9f30eea0f1e69ba38b</anchor>
      <arglist>(int drainID, DrawAmount &amp;amount, int activity)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual HostState::States</type>
      <name>getState</name>
      <anchorfile>a00193.html</anchorfile>
      <anchor>a3e92cb2ebfbcd0879279f45ac03a5111</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVoltage</name>
      <anchorfile>a00193.html</anchorfile>
      <anchor>aa0439bde80704c4346bc423da73bf789</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>estimateResidualRelative</name>
      <anchorfile>a00193.html</anchorfile>
      <anchor>a0c2eeb0db29dfd5e519ff47f313ba9aa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>estimateResidualAbs</name>
      <anchorfile>a00193.html</anchorfile>
      <anchor>acebb3063d673fb8e96c72729ef3a3a56</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="enumeration">
      <name>msgType</name>
      <anchorfile>a00193.html</anchorfile>
      <anchor>a2027a9cfdf410e246a3cb90acbfad6dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>deductAndCheck</name>
      <anchorfile>a00193.html</anchorfile>
      <anchor>a86c19e96a41b6edd8cce5f7da782966a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numDevices</name>
      <anchorfile>a00193.html</anchorfile>
      <anchor>a713465d20e40c275f105d9cdff32b3f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>resolution</name>
      <anchorfile>a00193.html</anchorfile>
      <anchor>adf9aa194bb0405e0d1d504a2f4e2562a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>timeout</name>
      <anchorfile>a00193.html</anchorfile>
      <anchor>af47d0bb558d32ae4c079feec825a301f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>residualVec</name>
      <anchorfile>a00193.html</anchorfile>
      <anchor>a7ac70c949d5974651eb5c669f10352d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DeviceEntry *</type>
      <name>devices</name>
      <anchorfile>a00193.html</anchorfile>
      <anchor>a1667f1336167e09b40dc3ab3b94f05d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>registeredDevices</name>
      <anchorfile>a00193.html</anchorfile>
      <anchor>aca990f2e71c484694cb93bf2fe5cf29c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>lastUpdateTime</name>
      <anchorfile>a00193.html</anchorfile>
      <anchor>a1cd5c7fa6c929f92176c2280074bc721</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cModule *</type>
      <name>host</name>
      <anchorfile>a00193.html</anchorfile>
      <anchor>a31ed3863dd9803577d59dfa8952b1d72</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>capmAh</name>
      <anchorfile>a00193.html</anchorfile>
      <anchor>a05d65f8b333b68eec48de0888f68261c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>nominalCapmAh</name>
      <anchorfile>a00193.html</anchorfile>
      <anchor>a318d762eb5c65237eb9aca0bf0e6d880</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>voltage</name>
      <anchorfile>a00193.html</anchorfile>
      <anchor>aac296663af4d156e5b31f868abb5f7b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>publish</name>
      <anchorfile>a00193.html</anchorfile>
      <anchor>ad7d03f71f85f952de696f906a5f16e34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>publishDelta</name>
      <anchorfile>a00193.html</anchorfile>
      <anchor>a134a4882fa54badf6ac61bf7ca85c40b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>publishTime</name>
      <anchorfile>a00193.html</anchorfile>
      <anchor>ac6a51f675a5ff7cd53c79a87a8a8396e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BatteryState *</type>
      <name>batteryState</name>
      <anchorfile>a00193.html</anchorfile>
      <anchor>ad65a4502e96576b1e12332dbb19a1f3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>HostState</type>
      <name>hostState</name>
      <anchorfile>a00193.html</anchorfile>
      <anchor>a2ce6f955ec0e80f98ccbabfdc9d5d1f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>capacity</name>
      <anchorfile>a00193.html</anchorfile>
      <anchor>a167d1f32b5590266ae038c1ad9930d65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>nominalCapacity</name>
      <anchorfile>a00193.html</anchorfile>
      <anchor>a605d3891d36cfc5fe20908588ffff385</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>residualCapacity</name>
      <anchorfile>a00193.html</anchorfile>
      <anchor>a161908772ca511a1ff0bac0c171b1748</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>lastPublishCapacity</name>
      <anchorfile>a00193.html</anchorfile>
      <anchor>a7f84316e88869a105abb59205cec3c13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>lifetime</name>
      <anchorfile>a00193.html</anchorfile>
      <anchor>a17e06cb38be96647528fa58ba7457f00</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>SimpleBattery</name>
      <anchorfile>a00193.html</anchorfile>
      <anchor>ab25dfae170bbde8e03ea66240b1f2e7f</anchor>
      <arglist>(const SimpleBattery &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>SimpleBattery &amp;</type>
      <name>operator=</name>
      <anchorfile>a00193.html</anchorfile>
      <anchor>a8cc3e80734e33d25d753ba27b06a1919</anchor>
      <arglist>(const SimpleBattery &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimpleConstMapping</name>
    <filename>a00194.html</filename>
    <base>ConstMapping</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstMappingIterator *</type>
      <name>createConstIterator</name>
      <anchorfile>a00194.html</anchorfile>
      <anchor>a70d0d044f36428965b77233bbf4c698b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstMappingIterator *</type>
      <name>createConstIterator</name>
      <anchorfile>a00194.html</anchorfile>
      <anchor>ab0dfc0c3ba9ba222176b29d88a4e6578</anchor>
      <arglist>(const Argument &amp;pos) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleConstMapping</name>
      <anchorfile>a00194.html</anchorfile>
      <anchor>a0794f7d9a8afe0dc17232211eb451302</anchor>
      <arglist>(const DimensionSet &amp;dims)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleConstMapping</name>
      <anchorfile>a00194.html</anchorfile>
      <anchor>a964085459e9772b74341f7386cd665e3</anchor>
      <arglist>(const SimpleConstMapping &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>SimpleConstMapping &amp;</type>
      <name>operator=</name>
      <anchorfile>a00194.html</anchorfile>
      <anchor>aa49498d175e63415d1b16656ffe2e28b</anchor>
      <arglist>(const SimpleConstMapping &amp;copy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>a00194.html</anchorfile>
      <anchor>a77247e2c90cc1d33bcfc305e575cab2c</anchor>
      <arglist>(SimpleConstMapping &amp;s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleConstMapping</name>
      <anchorfile>a00194.html</anchorfile>
      <anchor>a2e89eb287b66b66bec570afa716a7e78</anchor>
      <arglist>(const DimensionSet &amp;dims, const Argument &amp;key)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleConstMapping</name>
      <anchorfile>a00194.html</anchorfile>
      <anchor>a8ad8dfd538dabda7d637819a2f34a1b5</anchor>
      <arglist>(const DimensionSet &amp;dims, const Argument &amp;key1, const Argument &amp;key2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleConstMapping</name>
      <anchorfile>a00194.html</anchorfile>
      <anchor>acd1a6f80289031ea0f5ccc6b29cae9d5</anchor>
      <arglist>(const DimensionSet &amp;dims, const Argument &amp;min, const Argument &amp;max, const Argument &amp;interval)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initializeArguments</name>
      <anchorfile>a00194.html</anchorfile>
      <anchor>a17d3c5e8c98e7451a844d59c95c7272a</anchor>
      <arglist>(const Argument &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initializeArguments</name>
      <anchorfile>a00194.html</anchorfile>
      <anchor>a8555ecac0cfcfdcc07d540a640975607</anchor>
      <arglist>(const Argument &amp;key1, const Argument &amp;key2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initializeArguments</name>
      <anchorfile>a00194.html</anchorfile>
      <anchor>aca948c360cd24e21a92c80bf5f53cf16</anchor>
      <arglist>(const Argument &amp;min, const Argument &amp;max, const Argument &amp;interval)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual argument_value_t</type>
      <name>getValue</name>
      <anchorfile>a00194.html</anchorfile>
      <anchor>aeb10c744b8f4c6df092332b6228e209e</anchor>
      <arglist>(const Argument &amp;pos) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>ConstMapping *</type>
      <name>constClone</name>
      <anchorfile>a00194.html</anchorfile>
      <anchor>a49da397ee4ea25a6bdcf7f08dc6e2ed5</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::set&lt; Argument &gt;</type>
      <name>KeyEntrySet</name>
      <anchorfile>a00194.html</anchorfile>
      <anchor>a4a48a5d4281c2bf8eda6b0cd96fb67e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>createKeyEntries</name>
      <anchorfile>a00194.html</anchorfile>
      <anchor>a3804bf19eee40fe09c626b7ca9e0885e</anchor>
      <arglist>(const Argument &amp;from, const Argument &amp;to, const Argument &amp;step, Argument &amp;pos)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>createKeyEntries</name>
      <anchorfile>a00194.html</anchorfile>
      <anchor>aa6f392c0904f66eb264c597980873367</anchor>
      <arglist>(const Argument &amp;from, const Argument &amp;to, const Argument &amp;step, DimensionSet::const_iterator curDim, Argument &amp;pos)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>KeyEntrySet</type>
      <name>keyEntries</name>
      <anchorfile>a00194.html</anchorfile>
      <anchor>a022d4ae04338d12fad79f4e2f9b1f7af</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimpleConstMappingIterator</name>
    <filename>a00195.html</filename>
    <base>ConstMappingIterator</base>
    <member kind="function">
      <type></type>
      <name>SimpleConstMappingIterator</name>
      <anchorfile>a00195.html</anchorfile>
      <anchor>aef703d1c7304041f2594886e902134ed</anchor>
      <arglist>(const ConstMapping *mapping, const SimpleConstMappingIterator::KeyEntrySet *keyEntries, const Argument &amp;start)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleConstMappingIterator</name>
      <anchorfile>a00195.html</anchorfile>
      <anchor>acd9ffe8031190318003512dd72a060ad</anchor>
      <arglist>(const ConstMapping *mapping, const SimpleConstMappingIterator::KeyEntrySet *keyEntries)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Argument &amp;</type>
      <name>getNextPosition</name>
      <anchorfile>a00195.html</anchorfile>
      <anchor>ae024ecc6a05c06a6c1f80cd594c387a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>jumpTo</name>
      <anchorfile>a00195.html</anchorfile>
      <anchor>a810c8af9b437ac5bd010cf5f4b154045</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>jumpToBegin</name>
      <anchorfile>a00195.html</anchorfile>
      <anchor>aff0c387e3cc73d9821078492ae90e82f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>iterateTo</name>
      <anchorfile>a00195.html</anchorfile>
      <anchor>af63f318fde0e50bc3383ebf1686d4a7a</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>next</name>
      <anchorfile>a00195.html</anchorfile>
      <anchor>a4984e94b5c551edac1270dc35db8e02f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>inRange</name>
      <anchorfile>a00195.html</anchorfile>
      <anchor>a25c1a14b6104fd53f38f1ffaa0555864</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasNext</name>
      <anchorfile>a00195.html</anchorfile>
      <anchor>a7d5c3fb31916385945abed1d6a38f797</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Argument &amp;</type>
      <name>getPosition</name>
      <anchorfile>a00195.html</anchorfile>
      <anchor>a54d571cc74688a5ce0b23a8d8ba5f04c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual argument_value_t</type>
      <name>getValue</name>
      <anchorfile>a00195.html</anchorfile>
      <anchor>ab76e81f21df7609e4af1d65e570e08ef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::set&lt; Argument &gt;</type>
      <name>KeyEntrySet</name>
      <anchorfile>a00195.html</anchorfile>
      <anchor>acd382b24005d9a14b143b6efd5922eb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>KeyEntrySet::value_type</type>
      <name>KeyEntryType</name>
      <anchorfile>a00195.html</anchorfile>
      <anchor>a54ae3def7249f54515c6683ba554ccf5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ConstMapping *const</type>
      <name>mapping</name>
      <anchorfile>a00195.html</anchorfile>
      <anchor>a0e0ea2154862ca3e6b35c393e87849fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const DimensionSet &amp;</type>
      <name>dimensions</name>
      <anchorfile>a00195.html</anchorfile>
      <anchor>a5600a3c00abb82f8fda8ceb84b13530b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>KeyEntryType</type>
      <name>position</name>
      <anchorfile>a00195.html</anchorfile>
      <anchor>a7b29cea82195fd2084e4f63606aeb506</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const KeyEntrySet *</type>
      <name>keyEntries</name>
      <anchorfile>a00195.html</anchorfile>
      <anchor>a55107a3430801eefc9c6130995f7e98a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>KeyEntrySet::const_iterator</type>
      <name>nextEntry</name>
      <anchorfile>a00195.html</anchorfile>
      <anchor>a4e274fc2e3dc1900b7c210509fc34513</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>SimpleConstMappingIterator</name>
      <anchorfile>a00195.html</anchorfile>
      <anchor>aa3b3120e02d9a8b5658e07c9422a039d</anchor>
      <arglist>(const SimpleConstMappingIterator &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>SimpleConstMappingIterator &amp;</type>
      <name>operator=</name>
      <anchorfile>a00195.html</anchorfile>
      <anchor>a5b966ad7eaf6c7d4d013f44d5da53436</anchor>
      <arglist>(const SimpleConstMappingIterator &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimpleMacLayer</name>
    <filename>a00196.html</filename>
    <base>BaseModule</base>
    <member kind="typedef">
      <type>MacPkt *</type>
      <name>macpkt_ptr_t</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>aabc2c824006e58a49f66457ccb508e6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a9a23cdc88daa658398f0bc10ac4ed219</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a54dbbc7fdd99fc056baab98061420258</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="enumvalue">
      <name>TEST_MACPKT</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>abfa6d561f6a78e4067a27434d766225fa4b9a5853e8ca522bc3f0be62c042d894</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Mapping *</type>
      <name>createMapping</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a376421d6d86692c47dacaaebfd21ebd7</anchor>
      <arglist>(simtime_t_cref time, simtime_t_cref length, double freqFrom, double freqTo, double value)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleMacPkt</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a2a2b646d20cff2c0d82bc565f6fa4ac1</anchor>
      <arglist>(macpkt_ptr_t pkt)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleTXOver</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>affce6782f24929b0620d77e43849cd1d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>broadCastPacket</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a24a84df3fe2796c6ef724227dd6293bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendDown</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a780c8e3e997a5dcb2d3560d664ae2a66</anchor>
      <arglist>(macpkt_ptr_t pkt)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>macpkt_ptr_t</type>
      <name>createMacPkt</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>aa39c30004cbd08a2a0b0405d818313b0</anchor>
      <arglist>(simtime_t_cref length)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>log</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a40e1a41bf783a5ca9525dcbfca6d7ace</anchor>
      <arglist>(std::string msg)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MacToPhyInterface *</type>
      <name>phy</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>ad7ed88006647e680895f4737464fc639</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>dataOut</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a6bef5234e57995505bed24b48e68f77a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>dataIn</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>aba6cf264f7ce298a44fc553a1de23f0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>myIndex</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a1f46921b1c45cc87f0ffe1bf442b4e3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>nextReceiver</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a67addba2fe8f0c3cccb46662b8d97038</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DimensionSet</type>
      <name>dimensions</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a22ca1a18e1bed2f5875c1cca654a9a88</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>SimpleMacLayer</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a2cfd124e320077ba48c03d59b695b646</anchor>
      <arglist>(const SimpleMacLayer &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>SimpleMacLayer &amp;</type>
      <name>operator=</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>ab94865cc9947b44466914291b37a2eac</anchor>
      <arglist>(const SimpleMacLayer &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimpleNetwLayer</name>
    <filename>a00197.html</filename>
    <base>BaseModule</base>
    <member kind="typedef">
      <type>NetwPkt</type>
      <name>netwpkt_t</name>
      <anchorfile>a00197.html</anchorfile>
      <anchor>a3f2e9c8431b75798f9d170d4c41501a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>netwpkt_t *</type>
      <name>netwpkt_ptr_t</name>
      <anchorfile>a00197.html</anchorfile>
      <anchor>aca02a85d3117f0db3f7de76aace2b55c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00197.html</anchorfile>
      <anchor>a20a43187e836ef7fb9c26a6132b3b77a</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>a00197.html</anchorfile>
      <anchor>aaa9b0e59e71d913a0bc99f94937e4f05</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; LAddress::L3Type, LAddress::L2Type &gt;</type>
      <name>RoutingTable</name>
      <anchorfile>a00197.html</anchorfile>
      <anchor>a5aa120d443d2ede2cc50e682ecc24fa9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>scheduleJabbering</name>
      <anchorfile>a00197.html</anchorfile>
      <anchor>ac3193be4e1d6fef90e4d11dcfb5ed548</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>broadcastHelloWorld</name>
      <anchorfile>a00197.html</anchorfile>
      <anchor>a6bb1c14cc91edf63fbd14094d54d360c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendDown</name>
      <anchorfile>a00197.html</anchorfile>
      <anchor>a3753816b0cd2b1a4d3853478aa364e33</anchor>
      <arglist>(cPacket *pkt)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>forwardPacket</name>
      <anchorfile>a00197.html</anchorfile>
      <anchor>a04260efc84484057dde43c172172bd70</anchor>
      <arglist>(netwpkt_ptr_t pkt, const LAddress::L2Type &amp;nextHop)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleHelloWorld</name>
      <anchorfile>a00197.html</anchorfile>
      <anchor>af0b8624057339fb519562a5b6ef049c7</anchor>
      <arglist>(netwpkt_ptr_t pkt)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>jabberToSomeone</name>
      <anchorfile>a00197.html</anchorfile>
      <anchor>a9ef840887cbe3ea722d44ac83a1047e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleIncomingJabber</name>
      <anchorfile>a00197.html</anchorfile>
      <anchor>abc0e5c675ff3f0230cdc91468b705914</anchor>
      <arglist>(netwpkt_ptr_t pkt)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isSwitch</name>
      <anchorfile>a00197.html</anchorfile>
      <anchor>ab61a4f00f3f8d2b3637c295f95b5fc8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>boredTime</name>
      <anchorfile>a00197.html</anchorfile>
      <anchor>ae44adf1777151868d82ca8aba469378b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>maxTtl</name>
      <anchorfile>a00197.html</anchorfile>
      <anchor>ae0f6b3a439c56cd2275a3f10d8a9a691</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LAddress::L3Type</type>
      <name>ip</name>
      <anchorfile>a00197.html</anchorfile>
      <anchor>aafb836d0526cd5fab1623cfdb2c1d6d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>dataIn</name>
      <anchorfile>a00197.html</anchorfile>
      <anchor>a58834b1edd6cc63bcd522581cc0250ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>dataOut</name>
      <anchorfile>a00197.html</anchorfile>
      <anchor>a532bbd6a5172956ed9ae000f55fae8cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>startJabberTimer</name>
      <anchorfile>a00197.html</anchorfile>
      <anchor>a926095a2ae602b9a2773349160b12dea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned long</type>
      <name>runningSeqNumber</name>
      <anchorfile>a00197.html</anchorfile>
      <anchor>abc490acad686c553452e30d46eca00bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RoutingTable</type>
      <name>routingTable</name>
      <anchorfile>a00197.html</anchorfile>
      <anchor>aa4b573bb29f586e194db8ac015b99e99</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>SimpleNetwLayer</name>
      <anchorfile>a00197.html</anchorfile>
      <anchor>ab080a3c4f30b630e534147527f51c861</anchor>
      <arglist>(const SimpleNetwLayer &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>SimpleNetwLayer &amp;</type>
      <name>operator=</name>
      <anchorfile>a00197.html</anchorfile>
      <anchor>a76441caa603cc1d8852254c7e46c169b</anchor>
      <arglist>(const SimpleNetwLayer &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimplePathlossConstMapping</name>
    <filename>a00198.html</filename>
    <base>SimpleConstMapping</base>
    <member kind="function">
      <type></type>
      <name>SimplePathlossConstMapping</name>
      <anchorfile>a00198.html</anchorfile>
      <anchor>a05ca5384df78435f54d6126651daaaa4</anchor>
      <arglist>(const DimensionSet &amp;dimensions, SimplePathlossModel *model, const double distFactor)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimplePathlossConstMapping</name>
      <anchorfile>a00198.html</anchorfile>
      <anchor>af552700dd0f80cebaefa5261af6f5629</anchor>
      <arglist>(const SimplePathlossConstMapping &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getValue</name>
      <anchorfile>a00198.html</anchorfile>
      <anchor>aa263547a6e528cc1acf88fc496510e40</anchor>
      <arglist>(const Argument &amp;pos) const </arglist>
    </member>
    <member kind="function">
      <type>ConstMapping *</type>
      <name>constClone</name>
      <anchorfile>a00198.html</anchorfile>
      <anchor>a07a068298d3682405c07849bbcafac3e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const double</type>
      <name>distFactor</name>
      <anchorfile>a00198.html</anchorfile>
      <anchor>a5256f04ca6630c73e38c611472d330a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimplePathlossModel *</type>
      <name>model</name>
      <anchorfile>a00198.html</anchorfile>
      <anchor>acd7441a6db213de39f2286e7e91110b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>hasFrequency</name>
      <anchorfile>a00198.html</anchorfile>
      <anchor>af4da6a90c9477ea1de2eccfd9ae95e55</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>SimplePathlossConstMapping &amp;</type>
      <name>operator=</name>
      <anchorfile>a00198.html</anchorfile>
      <anchor>afb159877fc366918d7ae593aaa3bc3fe</anchor>
      <arglist>(const SimplePathlossConstMapping &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimplePathlossModel</name>
    <filename>a00199.html</filename>
    <base>AnalogueModel</base>
    <member kind="function">
      <type></type>
      <name>SimplePathlossModel</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>aedf82487a8fd5d18d251cd357b431d2a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>initFromMap</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>a51b4be0210555212a92f0400fa4393d9</anchor>
      <arglist>(const ParameterMap &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>filterSignal</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>a7a1a3a2080c5cf5d7ac3550f33099508</anchor>
      <arglist>(airframe_ptr_t, const Coord &amp;, const Coord &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>calcPathloss</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>ade7562b60b0a5ced0d81ca29bee99ffd</anchor>
      <arglist>(const Coord &amp;receiverPos, const Coord &amp;sendersPos)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>pathLossAlphaHalf</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>a064c70c5c35a1bcb1d6450722d70ec1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>carrierFrequency</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>a48902a15501db259c953348f4d50313a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>useTorus</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>abadf2a2885c8e8597713a7d14201d732</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>playgroundSize</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>ad42603e06762d9ccafdc2ef39ec8552d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>debug</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>a659b7135ed6ca2282617b863362f21f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>SimplePathlossConstMapping</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>a917f0958441d102331b9adf788fd63c8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimpleTimeConstMapping</name>
    <filename>a00200.html</filename>
    <base>SimpleConstMapping</base>
    <member kind="function">
      <type></type>
      <name>SimpleTimeConstMapping</name>
      <anchorfile>a00200.html</anchorfile>
      <anchor>a97917a522331bafda509d61dd804ecaa</anchor>
      <arglist>(double _myValue, simtime_t_cref _start, simtime_t_cref _stop)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getValue</name>
      <anchorfile>a00200.html</anchorfile>
      <anchor>aa7f481ebc2ec51c38a98af9595fb00cc</anchor>
      <arglist>(const Argument &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>ConstMapping *</type>
      <name>constClone</name>
      <anchorfile>a00200.html</anchorfile>
      <anchor>aea131c470ba71700264787a55b9d2d0e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myValue</name>
      <anchorfile>a00200.html</anchorfile>
      <anchor>af1b61e574743500a9fdb8b0d3e8678fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>start</name>
      <anchorfile>a00200.html</anchorfile>
      <anchor>a4921aa0bcfcd61618c953a0115cf364d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>stop</name>
      <anchorfile>a00200.html</anchorfile>
      <anchor>aa51226034a3d7fa9ff2f931dcf9fe8d2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>simsignalwrap_t</name>
    <filename>a00201.html</filename>
    <member kind="function">
      <type></type>
      <name>simsignalwrap_t</name>
      <anchorfile>a00201.html</anchorfile>
      <anchor>a0cd6dc064fbacefdcbcb7bab6366af0e</anchor>
      <arglist>(const char *const pSignalName)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>simsignalwrap_t</name>
      <anchorfile>a00201.html</anchorfile>
      <anchor>ae2973c10941420fa7c60f3df329bd108</anchor>
      <arglist>(const simsignalwrap_t &amp;pCpy)</arglist>
    </member>
    <member kind="function">
      <type>simsignal_t</type>
      <name>initialize</name>
      <anchorfile>a00201.html</anchorfile>
      <anchor>aa01f017b96087bc252445206777e0080</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator simsignal_t</name>
      <anchorfile>a00201.html</anchorfile>
      <anchor>ac0e7f28a74aad2569ccfa51b2f8486b5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>volatile simsignal_t</type>
      <name>ssChangeSignal</name>
      <anchorfile>a00201.html</anchorfile>
      <anchor>a3ca298b148783eba89d72134a55d485f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const char *const</type>
      <name>sSignalName</name>
      <anchorfile>a00201.html</anchorfile>
      <anchor>a4235d46c336709e687bb1aced9983318</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTracer</name>
    <filename>a00202.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a6ecce89c39b049ae7ae53f8edcb26561</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a45ff5c21bab35375fd0cc64d0f9dab69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>namLog</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a01acc81a79813c446e005c2c565c3b0d</anchor>
      <arglist>(std::string namString)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>radioEnergyLog</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a19ccd8a04cb71d3b1d5bd5903ab15641</anchor>
      <arglist>(unsigned long mac, int state, simtime_t_cref duration, double power, double newPower)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>logLink</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a6a0bdca61d51566cea8885d6b8ca17ec</anchor>
      <arglist>(T parent, T child)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>logPosition</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>ab922fd19ca5a84b2037673a3d8924a2e</anchor>
      <arglist>(int node, double x, double y, double z=0.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveSignal</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a2c06e266a68afe56a1d107a256ff984a</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, cObject *obj)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getAvgSensorPowerConsumption</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>af84804d95ce644a84efee51b5ff30115</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getSinkPowerConsumption</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>ad437f52e8868641b2d44ae167f7fc133</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::ofstream</type>
      <name>namFile</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a13b010be92cbb90497ee7780e978e3b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::ofstream</type>
      <name>radioEnergyFile</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a6d823af310c6909c86d4cced61104285</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::ofstream</type>
      <name>treeFile</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>acf4e8b6061c41971703184a7fc23ee9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::string &gt;</type>
      <name>packetsColors</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>ae371b04be6160ff32cfdfc02691cb055</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>goodputVec</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>ac18d4bc215fbe502b582ed1993926432</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>pSinkVec</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>ac2fd1d0d7ed6237950592875610b0ca3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>pSensorVec</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>ad1e418ff37d878d2d9460023b10798af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; unsigned long, double &gt;</type>
      <name>powerConsumptions</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a8cfb3bbe3f40d060a709edbff44e1ec8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Packet</type>
      <name>packet</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>ab5a2aeeb4748ff2af3facfdda5d09ef1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>nbApplPacketsSent</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a3d6fa6e94cb248f95c4d6b6483e646ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>nbApplPacketsReceived</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a803aac7cae367109c27b845e993194e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>catEnergy</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>afca05bfcb5a81ccceab2b42dd5e6f8c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; unsigned long, double &gt;</type>
      <name>powerConsumptions2</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>af0000d44755d6895b72397ad75666690</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; unsigned long, double &gt;</type>
      <name>currPower</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a51dd3f0e69dc2243ea2d395f9f801d2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; unsigned long, simtime_t &gt;</type>
      <name>lastUpdates</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a7e10a424021471b931c68888ebe2151a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BaseWorldUtility *</type>
      <name>world</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a0abb6a374c635fa194834252a6b368ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>SimTracer</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>abe43b8d4ba8ac993aa02da3e2be786b8</anchor>
      <arglist>(const SimTracer &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>SimTracer &amp;</type>
      <name>operator=</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>afaae08c0ff1e41252f5c90ac3101bf6a</anchor>
      <arglist>(const SimTracer &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SNRThresholdDecider</name>
    <filename>a00203.html</filename>
    <base>BaseDecider</base>
    <member kind="function">
      <type></type>
      <name>SNRThresholdDecider</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>aad17421c20bd89d6670ab110558a2479</anchor>
      <arglist>(DeciderToPhyInterface *phy, double sensitivity, int myIndex=-1, bool debug=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>initFromMap</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>a52492077116fc26bc18f97bc94565800</anchor>
      <arglist>(const ParameterMap &amp;params)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ChannelState</type>
      <name>getChannelState</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>aa777b8c29fabf14d30d03972fed515d0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>checkIfAboveThreshold</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>abb6ae13f91f830a9e6cd975426b9d6df</anchor>
      <arglist>(Mapping *map, simtime_t_cref start, simtime_t_cref end) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual DeciderResult *</type>
      <name>createResult</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>ac75875c691493cd4c69a01f3aeb6cd22</anchor>
      <arglist>(const airframe_ptr_t frame) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>canAnswerCSR</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>ae38586c5255f37cfe67aa1bdec283dde</anchor>
      <arglist>(const CSRInfo &amp;requestInfo) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>answerCSR</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>aa7e33361b328274b04ff7bd2d6206e6d</anchor>
      <arglist>(CSRInfo &amp;requestInfo)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isIdleRSSI</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>ae900f58c344f86cea2dbf21b55a74d85</anchor>
      <arglist>(double rssi) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>snrThreshold</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>abdb6b19743460a19e900c4b6d38c483b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>busyThreshold</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>a8f32acd24c8c84efee941211d1f81c98</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StaticGridMobility</name>
    <filename>a00204.html</filename>
    <base>StationaryMobility</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a42d1cb48bbda91008d175b9dbcd998f8</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initializePosition</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a6b252c79696d6b5abb44bb2f17fb2329</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a2362da142369a45e91ca6ded1d61350b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>marginX</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a502b4b944930f945fb3821e459631fda</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>marginY</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a140431acecc1862995bfcdc4d61190c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numHosts</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a3ab08a20e42f47a0c4f010dc2dc40f7c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StationaryMobility</name>
    <filename>a00205.html</filename>
    <base>MobilityBase</base>
    <member kind="function" virtualness="virtual">
      <type>virtual Coord</type>
      <name>getCurrentPosition</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>a0a012dcfb215524ec7c740f8a5098df9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Coord</type>
      <name>getCurrentSpeed</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>a859a42c49b97bdb1861e93fef8f4ff58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMessage</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>aaed48da3012406571faa2e7c6c024afc</anchor>
      <arglist>(cMessage *message)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestApplication</name>
    <filename>a00207.html</filename>
    <base>BaseModule</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00207.html</anchorfile>
      <anchor>adc3a512816290a38b548f973bba993e7</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>a00207.html</anchorfile>
      <anchor>a0b7f4db11451905159985b9f0632ed9d</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>a00207.html</anchorfile>
      <anchor>a7d4f47952d0129aed89583322e64798e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>dataOut</name>
      <anchorfile>a00207.html</anchorfile>
      <anchor>ab21991fe139bbdf61e1be5fd72204ad8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>dataIn</name>
      <anchorfile>a00207.html</anchorfile>
      <anchor>a79f1ca1aa535e6f26e3379fbc896af38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>ctrlOut</name>
      <anchorfile>a00207.html</anchorfile>
      <anchor>a51548c2716a2a2ce5053095dfd0c9597</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>ctrlIn</name>
      <anchorfile>a00207.html</anchorfile>
      <anchor>aa8308be564cf8bff13a2799ee7016f74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>delayTimer</name>
      <anchorfile>a00207.html</anchorfile>
      <anchor>ac1c65132d2cccd336f188817f5ef517a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>nbPackets</name>
      <anchorfile>a00207.html</anchorfile>
      <anchor>a3b02990ad73d4921ac736e8748ce62c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>remainingPackets</name>
      <anchorfile>a00207.html</anchorfile>
      <anchor>aa254722de1f3f20b18800ee91e553f66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>headerLength</name>
      <anchorfile>a00207.html</anchorfile>
      <anchor>a85370247ea4783a5b11283f5c0f4aaa6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LAddress::L3Type</type>
      <name>nodeAddr</name>
      <anchorfile>a00207.html</anchorfile>
      <anchor>ab1dd707f51794dac6d534b0f8bead812</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LAddress::L3Type</type>
      <name>dstAddr</name>
      <anchorfile>a00207.html</anchorfile>
      <anchor>aa499f99684c3c5774a591567993f8c5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>trafficParam</name>
      <anchorfile>a00207.html</anchorfile>
      <anchor>a9cd52c9bdb932f4ea7cc6e41ca85b19a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>debug</name>
      <anchorfile>a00207.html</anchorfile>
      <anchor>ae1dc3152139c63611b74226ceb849e09</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>stats</name>
      <anchorfile>a00207.html</anchorfile>
      <anchor>a7ab456a584e497917b78846e83f41f6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>trace</name>
      <anchorfile>a00207.html</anchorfile>
      <anchor>a1e73785222e60c8661ffac5f932ab04b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>flood</name>
      <anchorfile>a00207.html</anchorfile>
      <anchor>a8f2cfc6f9217d0a956cdced5fe378614</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isTransmitting</name>
      <anchorfile>a00207.html</anchorfile>
      <anchor>af894aa90b03042f7859df3bbdd68a435</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>INITIAL_DELAY</name>
      <anchorfile>a00207.html</anchorfile>
      <anchor>a8c705b62d519c2ee04d9840aa88987b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>PAYLOAD_SIZE</name>
      <anchorfile>a00207.html</anchorfile>
      <anchor>a348fb0d4eeb6f84c1e42ad58fe5c9d06</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>nbPacketsReceived</name>
      <anchorfile>a00207.html</anchorfile>
      <anchor>af769fb6025a97bd3d1880694be8b5ae5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; cStdDev &gt;</type>
      <name>latencies</name>
      <anchorfile>a00207.html</anchorfile>
      <anchor>a170766132ed588154d393bd483a0a4d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>latenciesRaw</name>
      <anchorfile>a00207.html</anchorfile>
      <anchor>aa4ac0e0de6ebef3a9f70aaaf89b5b1d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cStdDev</type>
      <name>testStat</name>
      <anchorfile>a00207.html</anchorfile>
      <anchor>aa2c9f935c704f942fe88818f7699c33d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>TestApplication</name>
      <anchorfile>a00207.html</anchorfile>
      <anchor>a230c6b18eef2dacee602d65fb4a6c6e8</anchor>
      <arglist>(const TestApplication &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>TestApplication &amp;</type>
      <name>operator=</name>
      <anchorfile>a00207.html</anchorfile>
      <anchor>a517f1051a8160b5ebae3d10c27c19532</anchor>
      <arglist>(const TestApplication &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TestApplLayer</name>
    <filename>a00208.html</filename>
    <base>BaseApplLayer</base>
    <member kind="enumeration">
      <name>TestApplMessageKinds</name>
      <anchorfile>a00208.html</anchorfile>
      <anchor>a3d99b89890ea7f156487ab5570f5b898</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00208.html</anchorfile>
      <anchor>a8df32483962ebc40e1eed225716e54cb</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>a00208.html</anchorfile>
      <anchor>a7cc6a018758d27f31133de05804281f8</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerMsg</name>
      <anchorfile>a00208.html</anchorfile>
      <anchor>af64945ae392b392418574b58b76232b9</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendBroadcast</name>
      <anchorfile>a00208.html</anchorfile>
      <anchor>aacf2004acd42e50fe4c46bdc3dcffbc2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sendReply</name>
      <anchorfile>a00208.html</anchorfile>
      <anchor>af1d3f3a3be9478119f118beeb5b4ad85</anchor>
      <arglist>(ApplPkt *msg)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>delayTimer</name>
      <anchorfile>a00208.html</anchorfile>
      <anchor>ae46c2fd464821d8ffb07fc0588623d23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>coreDebug</name>
      <anchorfile>a00208.html</anchorfile>
      <anchor>a5efed246e454bf24dcbbf0fb1780df40</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>TestApplLayer</name>
      <anchorfile>a00208.html</anchorfile>
      <anchor>ad6e9b40e20dcb2ab4512a413debfdf0f</anchor>
      <arglist>(const TestApplLayer &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>TestApplLayer &amp;</type>
      <name>operator=</name>
      <anchorfile>a00208.html</anchorfile>
      <anchor>ab930eb650242dbb6110ee7e7d22db01d</anchor>
      <arglist>(const TestApplLayer &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ThresholdDecider</name>
    <filename>a00209.html</filename>
    <base>Decider</base>
    <member kind="function">
      <type></type>
      <name>ThresholdDecider</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>a56f0b3495b47d6d0df3cfe33a169f44e</anchor>
      <arglist>(DeciderToPhyInterface *phy, double sensitivity, int myIndex, bool bDebug)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>initFromMap</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>a5ed56dc12cece481ab983da1853daff4</anchor>
      <arglist>(const ParameterMap &amp;params)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>processSignal</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>aa8d099cd7a5ade60ca70a291239bdc78</anchor>
      <arglist>(airframe_ptr_t frame)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ChannelState</type>
      <name>getChannelState</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>a245351047ec242c42497116e66b2d902</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>handleChannelSenseRequest</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>af67f3a22ff4eaf2e77e2e71d04885040</anchor>
      <arglist>(ChannelSenseRequest *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>simtime_t</type>
      <name>handleNewSignal</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>a0d05cb7c20aff520229a8a051f1f63d3</anchor>
      <arglist>(Signal *s)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>simtime_t</type>
      <name>handleHeaderOver</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>a5cca0d77477336f95f56215d7a43c704</anchor>
      <arglist>(std::map&lt; Signal *, int &gt;::iterator &amp;it)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>simtime_t</type>
      <name>handleSignalOver</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>a6e559163ddd38ef6256b9faa67a46e63</anchor>
      <arglist>(std::map&lt; Signal *, int &gt;::iterator &amp;it, airframe_ptr_t frame)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>log</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>a16c7166b8c0f48e3781cb2524abeff4b</anchor>
      <arglist>(std::string msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>toDecibel</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>a431183db0fe1f31506eec3828fa2271b</anchor>
      <arglist>(double v)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>a254419dee9f58c5f9635ed1d83b572e0</anchor>
      <arglist>(T v, unsigned int length)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>a80b787aa1e09c73d4058e4bf18f1b81a</anchor>
      <arglist>(simtime_t_cref v, unsigned int length)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printMapping</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>a4d46b0c578c9e817ea8084f53fc0e8e4</anchor>
      <arglist>(const ConstMapping *m) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myIndex</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>a79efdf2aeae37558e081ca0850ef9050</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>threshold</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>ab216c5d8999489f418afab2308e606b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; Signal *, int &gt;</type>
      <name>currentSignals</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>adba3e2c16d773850acaacf8d7d7bf11d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TimeMapping</name>
    <filename>a00212.html</filename>
    <templarg>Interpolator</templarg>
    <base>Mapping</base>
    <member kind="function">
      <type></type>
      <name>TimeMapping</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>a3ca434daf1dece372ccc7421b5305720</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TimeMapping</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>a58ac95842db382d15e77ead809bddc1e</anchor>
      <arglist>(const TimeMapping&lt; Interpolator &gt; &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TimeMapping</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>a1fbcd02d2c6525dc0d89354a146e4efb</anchor>
      <arglist>(mapped_cref_type outOfRangeVal)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Mapping *</type>
      <name>clone</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>a3d9bde06fb3d637992eb3e60135d96c0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual argument_value_t</type>
      <name>getValue</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>a4f46930630d6c6a79b34211992840731</anchor>
      <arglist>(const Argument &amp;pos) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValue</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>a453ce64062fa7afd7398735a9cf499a6</anchor>
      <arglist>(const Argument &amp;pos, argument_value_cref_t value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MappingIterator *</type>
      <name>createIterator</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>a99f25f5769ab59fd41080fedfa0dbaa5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MappingIterator *</type>
      <name>createIterator</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>a46c922604b76bf239263820a34a6ff29</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>InterpolateableMap&lt; Interpolator&lt; std::map&lt; simtime_t, argument_value_t &gt; &gt; &gt;</type>
      <name>interpolator_map_type</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>a234c05b54a7bb7366b6f40598c925aeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>interpolator_map_type::interpolator_type</type>
      <name>interpolator_type</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>a3d3dc8083e25509e01ffeac67792fea3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>interpolator_map_type::mapped_type</type>
      <name>mapped_type</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>ade5767a86bf9854bc2c277aec02a1bcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>interpolator_map_type::mapped_cref_type</type>
      <name>mapped_cref_type</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>ad3d8288de00e1653af77476e3940f54e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>interpolator_map_type::iterator_intpl</type>
      <name>iterator</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>a75b569ea7018b0f3e08a65a84d7ee97d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>interpolator_map_type::const_iterator_intpl</type>
      <name>const_iterator</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>af8af9735fbd58320b894d961f690c4fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>interpolator_map_type</type>
      <name>entries</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>adb0dbcc9aec3a052d85ef7e015a89148</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TimeMappingIterator</name>
    <filename>a00213.html</filename>
    <templarg>Interpolator</templarg>
    <base>MappingIterator</base>
    <member kind="function">
      <type></type>
      <name>TimeMappingIterator</name>
      <anchorfile>a00213.html</anchorfile>
      <anchor>a0bdf656d6e53fda33b555b0c100af6ff</anchor>
      <arglist>(const iterator &amp;it)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TimeMappingIterator</name>
      <anchorfile>a00213.html</anchorfile>
      <anchor>afea15898187a8ce372f31fc1b6ec9f9d</anchor>
      <arglist>(const TimeMappingIterator&lt; Interpolator &gt; &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>jumpTo</name>
      <anchorfile>a00213.html</anchorfile>
      <anchor>a41457ef9679298443d01dd5d29d63864</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>iterateTo</name>
      <anchorfile>a00213.html</anchorfile>
      <anchor>adf215619550c90677bb8784e61813c45</anchor>
      <arglist>(const Argument &amp;pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>next</name>
      <anchorfile>a00213.html</anchorfile>
      <anchor>aa12e17f8a08312b3661671c1c2b6c4ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>inRange</name>
      <anchorfile>a00213.html</anchorfile>
      <anchor>a787c682f86d90d77fddc92f4045639b0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Argument &amp;</type>
      <name>getPosition</name>
      <anchorfile>a00213.html</anchorfile>
      <anchor>ab9eb7cfe03f970af00ce999161dc8077</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Argument &amp;</type>
      <name>getNextPosition</name>
      <anchorfile>a00213.html</anchorfile>
      <anchor>a19cc52d765cc946a004c87e92ebc659a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual mapped_type</type>
      <name>getValue</name>
      <anchorfile>a00213.html</anchorfile>
      <anchor>a29e9cd7dbc9096f8694739faaa3450b1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>jumpToBegin</name>
      <anchorfile>a00213.html</anchorfile>
      <anchor>ac7a2b12c7ac068980d72b374d2ea4182</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasNext</name>
      <anchorfile>a00213.html</anchorfile>
      <anchor>abac41f2fb9ad8d503df9d8c27d3d6340</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValue</name>
      <anchorfile>a00213.html</anchorfile>
      <anchor>ac4eef2a5a0b2c899e270048c86d6ec66</anchor>
      <arglist>(argument_value_cref_t value)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>InterpolateableMap&lt; Interpolator&lt; std::map&lt; simtime_t, argument_value_t &gt; &gt; &gt;</type>
      <name>interpolator_map_type</name>
      <anchorfile>a00213.html</anchorfile>
      <anchor>a61386f0c76f3a08c1d35b46924955212</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>interpolator_map_type::interpolator_type</type>
      <name>interpolator_type</name>
      <anchorfile>a00213.html</anchorfile>
      <anchor>a664b59f81dcbbb62cdca0800d13a7a8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>interpolator_map_type::mapped_type</type>
      <name>mapped_type</name>
      <anchorfile>a00213.html</anchorfile>
      <anchor>a3c5c546c73e7faaccfc94b2e13d8fec1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>interpolator_map_type::iterator_intpl</type>
      <name>iterator</name>
      <anchorfile>a00213.html</anchorfile>
      <anchor>a0f7b37f70b736b69dc5c19341685958e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>interpolator_map_type::const_iterator_intpl</type>
      <name>const_iterator</name>
      <anchorfile>a00213.html</anchorfile>
      <anchor>afd8d7a3a42b56a8644e063da708c3e09</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateNextPos</name>
      <anchorfile>a00213.html</anchorfile>
      <anchor>a1a9382671669207404a7edba9469145e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>iterator</type>
      <name>valueIt</name>
      <anchorfile>a00213.html</anchorfile>
      <anchor>a178fa9015e993aa264bc1351b218431a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Argument</type>
      <name>position</name>
      <anchorfile>a00213.html</anchorfile>
      <anchor>af9dbee2a6ce9ba1d26d8e2cd82c413f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Argument</type>
      <name>nextPosition</name>
      <anchorfile>a00213.html</anchorfile>
      <anchor>a228df0793fb7486e617aeb9ba6540863</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isStepMapping</name>
      <anchorfile>a00213.html</anchorfile>
      <anchor>ac8e1d2adb44399eb29c4b0fc4f84a142</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>atPreStep</name>
      <anchorfile>a00213.html</anchorfile>
      <anchor>a79417d5433894eb05e64574c3c8a3090</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TractorMobility</name>
    <filename>a00216.html</filename>
    <base>LineSegmentsMobilityBase</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>a5dc11ca4b22d7c70f796bf59b4a6ce3d</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initializePosition</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>a7a37bcc22e09a5501aa177f8dc7cbb58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setTargetPosition</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>ab7c5cbcfc3f84b8b0ffa9b16e97c0c28</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>speed</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>abe9079417ab0b0cdcd3ad977baaaddb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>x1</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>ae24110fa394186fc2e6cc3fe71fa00c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>y1</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>a83ba237fe5f2fb2bd686f290106f84ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>x2</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>a174cd48f7f9a7de868d848cc1a06452f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>y2</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>ab33d9d4f561dc9b75a5a0e9706d37e50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>rowCount</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>ab55d06a25edc10399f12a25931334ed5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>step</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>acebc8607808dc3a9fdc3109cf601d850</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TrafficGen</name>
    <filename>a00217.html</filename>
    <base>BaseApplLayer</base>
    <member kind="enumeration">
      <name>TrafficGenMessageKinds</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>ab3f33e4bfe1ef6044b6938b9dd054ca6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SEND_PACKET_TIMER</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>ab3f33e4bfe1ef6044b6938b9dd054ca6a291762a575ed780bda8ff5fd21e5e4a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRAFFIC_GEN_PACKET</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>ab3f33e4bfe1ef6044b6938b9dd054ca6a7c99b102d9593dbb193c4dafd1db4c44</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LAST_TRAFFIC_GEN_MESSAGE_KIND</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>ab3f33e4bfe1ef6044b6938b9dd054ca6affa00b6e47f4ffa2c67aa02f43c97e76</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>a083fea2270d41c26495fbc8e2bbe95be</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>a531800f6be75c55afc5d1ff86429079f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>aa9406396f3f5cd85b5779889c56241c5</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerMsg</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>a754b9f07a0644691d9c532c8aa2d374d</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>sendBroadcast</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>a246eb89973ae5af45a3c7ee7279e9777</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>packetTime</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>aec31a7a067a59a61e01363ebfeacc747</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>pppt</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>a4fb86caeca4afa1688fc5807b4f048c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>burstSize</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>a084ddaeaac78f6e97f8319918a01100e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>remainingBurst</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>ad764b6f5e6766c650f6c2e4a6632be07</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>nbPacketDropped</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>afc3659efb18c042a3808dc77cd401737</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>delayTimer</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>a03134090b954c1b2578f148d89cf2ec6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BaseWorldUtility *</type>
      <name>world</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>a5074266ab490574d116cdad31f603483</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>TrafficGen</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>a47956bbb8359bc80347b9faec70526b3</anchor>
      <arglist>(const TrafficGen &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>TrafficGen &amp;</type>
      <name>operator=</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>a6a7478d55f2a76e3046b11d84f3b2d32</anchor>
      <arglist>(const TrafficGen &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TurtleMobility</name>
    <filename>a00220.html</filename>
    <base>LineSegmentsMobilityBase</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00220.html</anchorfile>
      <anchor>a6f15f0b51441338a3e828135d598c1a5</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initializePosition</name>
      <anchorfile>a00220.html</anchorfile>
      <anchor>ae89831a398a71d6472c26f336887f754</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setTargetPosition</name>
      <anchorfile>a00220.html</anchorfile>
      <anchor>a77b7dc906cdb7ac02ee420a4a8028ac9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>move</name>
      <anchorfile>a00220.html</anchorfile>
      <anchor>aca27a0cc6248eaad99c566d49c2ffc5e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>resumeScript</name>
      <anchorfile>a00220.html</anchorfile>
      <anchor>a6301ae69ac2657ffb813f422885b4323</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>executeStatement</name>
      <anchorfile>a00220.html</anchorfile>
      <anchor>adf8a33f548f1f30804b8e8399b7f0dfd</anchor>
      <arglist>(cXMLElement *nextStatement)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>getValue</name>
      <anchorfile>a00220.html</anchorfile>
      <anchor>a9139ae0504735451c6767415f1951992</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>gotoNextStatement</name>
      <anchorfile>a00220.html</anchorfile>
      <anchor>a999d116108ecc399eae6aaca63a45bcf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cXMLElement *</type>
      <name>turtleScript</name>
      <anchorfile>a00220.html</anchorfile>
      <anchor>a08babee46db12aad334943374937962b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cXMLElement *</type>
      <name>nextStatement</name>
      <anchorfile>a00220.html</anchorfile>
      <anchor>aadb591a9cc96eb64acde49644c45805b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>speed</name>
      <anchorfile>a00220.html</anchorfile>
      <anchor>a0369b5e57db118aba35e9a116203eb4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>angle</name>
      <anchorfile>a00220.html</anchorfile>
      <anchor>a8e8e4dc8443ca6866b5540b3005e7b24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BorderPolicy</type>
      <name>borderPolicy</name>
      <anchorfile>a00220.html</anchorfile>
      <anchor>ae43798eb0dd7cb1e08eba3350edc46fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::stack&lt; long &gt;</type>
      <name>loopVars</name>
      <anchorfile>a00220.html</anchorfile>
      <anchor>ac46a272d9b3a0d28684e4ea3ea675cbc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>UnitDisk</name>
    <filename>a00221.html</filename>
    <base>ConnectionManager</base>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>a00221.html</anchorfile>
      <anchor>a7ff362bb4f4d3d5464c42d1b2822e560</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>calcInterfDist</name>
      <anchorfile>a00221.html</anchorfile>
      <anchor>ae83d638608dcf8d6267f3673792b914c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>radioRange</name>
      <anchorfile>a00221.html</anchorfile>
      <anchor>afb22a745df1ad44eb5809ca4586c832c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>UWBIRIEEE802154APathlossModel</name>
    <filename>a00222.html</filename>
    <base>AnalogueModel</base>
    <class kind="struct">UWBIRIEEE802154APathlossModel::CMconfig</class>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>initFromMap</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>a9529da672fa9576ea09f3aa22a129f57</anchor>
      <arglist>(const ParameterMap &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>filterSignal</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>a3a27ac6615499a86832230bfaafabb7a</anchor>
      <arglist>(airframe_ptr_t, const Coord &amp;, const Coord &amp;)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Rayleigh</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>af2ce425e03bfae194ea4e177a15ac1d1</anchor>
      <arglist>(double param)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>implemented_CMs</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>ad0bc6a56024f7e3cde2b6c88c8a2b730</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const CMconfig</type>
      <name>CMconfigs</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>aec663e65774ad756b25eac803cb5eea6</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addEchoes</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>a834e439b81d2e27ed0d68cb6cca8f202</anchor>
      <arglist>(simtime_t_cref pulseStart)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>getPathloss</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>a03d9ac143765c203951ad77105580f99</anchor>
      <arglist>(double fc, double BW, double distance) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>channelModel</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>a725ed7982be7b05533473705224fb14f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CMconfig</type>
      <name>cfg</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>a01d8518283319d88743424b617b120a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>tapThreshold</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>a2e936ac29bd6f1b6a13cb375713c802c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>doShadowing</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>a5248dd72132658b53c94105ceed973ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>doSmallScaleShadowing</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>a0518d7e5f60c691cc6f74c276fa9e4f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TimeMapping&lt; Linear &gt; *</type>
      <name>newTxPower</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>a97fc7222e893751c6f5b73f30bf509fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ConstMapping *</type>
      <name>txPower</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>a39af1b08dba3a98a988116911633530f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Argument</type>
      <name>arg</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>af0bb825b917ffc2082da260085061c94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MappingIterator *</type>
      <name>pulsesIter</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>a3abd0cd96264449e34d4aeb4e0bc89cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>L</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>a243433097abdfeb133f3de4fc6cc4b58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>S</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>a128721af88ba6f0206c3edc5509c416b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>clusterStart</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>a1ddaa02da18cb959411839a4607b7655</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>simtime_t</type>
      <name>gamma_l</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>a7b00c482a4108dac490113040f50388d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>Mcluster</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>a7c0e437740defdf3b45f7d91b1682269</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>Omega_l</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>a8198110a3cc42d38fa59dc536b7d6ed1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>averagePower</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>a38db78b4797c1f3ff547131ddd29c243</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>nbCalls</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>ac09d7e8d30e8d036c02a35cc8fd3d12c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>averagePowers</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>a98d60e3a433cf3a80336b68fc562881d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>pathlosses</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>a3bc1b7adb02cda3d23015dc9225f5e11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const double</type>
      <name>PL0</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>a1f3fc2da25d13972c71ab56c4f1e9f10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const double</type>
      <name>pathloss_exponent</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>ad32c7d644953c8ff19fb6ee5ef6830e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const double</type>
      <name>meanL</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>a4eb30804fc4e704218f8a2802b472dbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const double</type>
      <name>Lambda</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>a31ac6b2519c1cb09a8428f67e880cba4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const double</type>
      <name>lambda1</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>adb762952d41a15c9d207d125fa4bf95a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const double</type>
      <name>lambda2</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>a72980c41d59f773f67d5d2078c0ee462</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const double</type>
      <name>Beta</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>a488475434d64ba621aaf58d61fca8238</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const double</type>
      <name>Gamma</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>a915f10f82169f307c63aba1169a266e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const double</type>
      <name>k_gamma</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>a03b6e29c4b871ff6b7849f3611b2d5c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const double</type>
      <name>gamma_0</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>ac6eaa4556d0a67d3c0bf1ea8e796118f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const double</type>
      <name>sigma_cluster</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>a2590e48c6f59fc6fe7339eabb5bd7df2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const double</type>
      <name>fc</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>ae5eb8822e9088b4a413af447ce3e33af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const double</type>
      <name>BW</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>ae5a683c567712479a284113cb8ba8df0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const double</type>
      <name>fcMHz</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>a865aaa2e5967d407f3b2c894d81b36a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const double</type>
      <name>d0</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>a77ed5e6b8d481bb8590b982b17671541</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const double</type>
      <name>ntx</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>ab1c164bcba2e21cbc69c791ef5eea809</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const double</type>
      <name>nrx</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>a5119c88a027fa29c7c3f0e006a2bf8da</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>UWBIRIEEE802154APathlossModel</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>aacc537a0375faa90f4705c1d0003d43d</anchor>
      <arglist>(const UWBIRIEEE802154APathlossModel &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>UWBIRIEEE802154APathlossModel &amp;</type>
      <name>operator=</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>a223d24fc079d2193ae950266a937349d</anchor>
      <arglist>(const UWBIRIEEE802154APathlossModel &amp;)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>UWBIRIEEE802154APathlossModel::CMconfig</name>
    <filename>a00047.html</filename>
    <member kind="variable">
      <type>double</type>
      <name>PL0</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>aa8dbf6d2b3c021868a77443061619182</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>n</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>ab84b7a9c3bdb010170c7725b22ae3b77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>sigma_s</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>a36363462ff17dd834a56a24b91d4a8af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>Aant</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>a8e4e4d082d854b71899a204b1736f1cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>kappa</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>a4d90c1038dc9fc41e438fa0642d74b91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>Lmean</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>a84357efec719bd3762ba8fb8229b3018</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>Lambda</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>aad0f35072b49391a05d198e8a778a1c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>lambda_1</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>a7a236e1e2965b3e5b885de866e86a6a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>lambda_2</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>a3b76470b95e634acb5d4e100b32697b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>Beta</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>ae0a3fbfa0eb3acd8f45fbd4ed8d59365</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>Gamma</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>a62aacac917ede0fb8d5e156a1e39546b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>k_gamma</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>a5e7c434a264f775a8535e97da77b4611</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>gamma_0</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>a7fffebef02a73fd594622160cc1b872b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>sigma_cluster</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>a91e0005187cd7ac64b8f2fdddfd97d6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_0</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>ada3a35476f70d5dc96fa243d829c25fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>k_m</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>ad54d0279be381e7d68452112c97895bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>var_m_0</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>a6e8f59b7cfcb5f7fccf640aff1a00f28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>var_k_m</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>ac454559b0326b34cd1335089e2be4c8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>strong_m_0</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>aef2526997842ec2dc2cfc25b392ef816</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>gamma_rise</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>a9436338847595386fa1d72f56529cf8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>gamma_1</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>afcd4233b6bc40f285901ce5f3e26a166</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>xi</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>a6b0cea430404964c72134f65a8f9c7a3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>UWBIRMac</name>
    <filename>a00223.html</filename>
    <base>BaseMacLayer</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>a0fcaae9c3cefb73372b7290ff4d9092d</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>adec88d201429455ea912572c935d8d53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>prepareData</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>aa20303103ae3ad969d2177b93d72a375</anchor>
      <arglist>(UWBIRMacPkt *packet, IEEE802154A::config cfg=IEEE802154A::cfg_mandatory_4M)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerMsg</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>acac82faa5c2357def7a7c0ac2363b88b</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>validatePacket</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>a9a22aae5b3a786301ed8a80b93fb1c14</anchor>
      <arglist>(UWBIRMacPkt *mac)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initCounters</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>a850cbe57fcdbf63fddb1495ee946b14a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>debug</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>a03036f082beb5171b39a36a76cda36bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>stats</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>a1135b192570e3433d5c09fa638bc1d36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>trace</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>a6885208134f243646d6855eedcff2934</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>rsDecoder</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>a284abf38f95685722e6e45ce46ebb344</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>packetsAlwaysValid</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>a569330d3c1cd0134dd3c74aebe70bf82</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>totalRxBits</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>a1a2c6f70476af0f1653092c98f7ce9ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>errRxBits</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>a5ae05555cd6ce5aeae19e7f84c0bdac2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MacToPhyInterface *</type>
      <name>phy</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>a11441696168ae8b05f3d5bb899478656</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Packet</type>
      <name>packet</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>a537904829cefe54e83b84659f89299d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>prf</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>ab34556877e39f423d17620e9074e5c4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>packetsBER</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>a3266b1085577bafe847ebaa028f40ef5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>dataLengths</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>a4a26015e8af493eac0d1b5bba24224ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>erroneousSymbols</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>a651f418a1531432a4b3f6a1d6f3aa127</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>sentPulses</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>ae26f54e275f9baf993bc8c522011d52f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>receivedPulses</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>a92d2428a8c467d27436aa30c2489a4c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>meanPacketBER</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>a7e37eaa9329e57d22a8880a0a8082e29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>packetSuccessRate</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>acb9c37a88347a1bd11ab5a75413721f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>packetSuccessRateNoRS</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>ac1697311450e13159c3ec7203c1ca4b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>ber</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>a68d05d4253574afaf60260f32eb92ebd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cStdDev</type>
      <name>meanBER</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>ad4b3f2fe8ff1ce4e5e66cd01c3d3d02a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>RSErrorRate</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>ab3d14ddcaad12ce9bd5b3fd1d714b3fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>success</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>a9eafa390c144e74c95619e03ada46a4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>successNoRS</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>afc2fc9ae65ec06363b3d7a29ff0794e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>nbReceivedPacketsNoRS</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>a57a803da655d86bf651b9b6cd6e1af38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>nbReceivedPacketsRS</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>aa253392777c64f7b63b4042058ec7099</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>nbSentPackets</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>ae3257757a23e072a3f20cbabcda76c21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>nbSymbolErrors</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>a59e141df0fd79f64afe9bd674071a413</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>nbSymbolsReceived</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>a3f655e1fb1ef295f36f08f1e31ece2c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>nbHandledRxPackets</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>a84f5a65393a219062a370575bcfb4261</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>nbFramesDropped</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>aadeda031c42b657e1cc6bec50d6fea14</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>UWBIRMac</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>a47b8ea01a0e0b5c57294a66f2e1120f0</anchor>
      <arglist>(const UWBIRMac &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>UWBIRMac &amp;</type>
      <name>operator=</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>a0b7a0b9f480c6be20338a451eeb63530</anchor>
      <arglist>(const UWBIRMac &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>UWBIRMacPkt</name>
    <filename>a00224.html</filename>
    <member kind="function">
      <type></type>
      <name>UWBIRMacPkt</name>
      <anchorfile>a00224.html</anchorfile>
      <anchor>a133875cacf379401824949500fd35a05</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UWBIRMacPkt</name>
      <anchorfile>a00224.html</anchorfile>
      <anchor>a7977e5d189a97569c0e91a4314d2ea9f</anchor>
      <arglist>(const UWBIRMacPkt &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>UWBIRMacPkt &amp;</type>
      <name>operator=</name>
      <anchorfile>a00224.html</anchorfile>
      <anchor>a70dac669a44213e85d2c4ef112af2725</anchor>
      <arglist>(const UWBIRMacPkt &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UWBIRMacPkt *</type>
      <name>dup</name>
      <anchorfile>a00224.html</anchorfile>
      <anchor>a73c32a7129f2359d76970107a58a6d73</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBitValuesArraySize</name>
      <anchorfile>a00224.html</anchorfile>
      <anchor>a8456c2d00d0d16109897d709467de0fa</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getBitValuesArraySize</name>
      <anchorfile>a00224.html</anchorfile>
      <anchor>a32c31a75c203ec54769ce2ab0bdb427e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getBitValues</name>
      <anchorfile>a00224.html</anchorfile>
      <anchor>ab93151418b130d2280056205702f9401</anchor>
      <arglist>(unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBitValues</name>
      <anchorfile>a00224.html</anchorfile>
      <anchor>a33ce826d481a5459c8031525b9eb5c9d</anchor>
      <arglist>(unsigned int k, bool bitValues_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pushBitvalue</name>
      <anchorfile>a00224.html</anchorfile>
      <anchor>a6af0d98f753dfdeea6fa3fcf2d1a4d2d</anchor>
      <arglist>(bool bitValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>popBitValue</name>
      <anchorfile>a00224.html</anchorfile>
      <anchor>ab6f24f7f9af192e73f41446c427ad283</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isEmpty</name>
      <anchorfile>a00224.html</anchorfile>
      <anchor>a5eb0b0b088cb5cd6d7cf424d872e27db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>std::list&lt; bool &gt;</type>
      <name>bitValues</name>
      <anchorfile>a00224.html</anchorfile>
      <anchor>ae0595faf3834db155ed23b4363266eae</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>UWBIRPacket</name>
    <filename>a00225.html</filename>
    <member kind="function">
      <type></type>
      <name>UWBIRPacket</name>
      <anchorfile>a00225.html</anchorfile>
      <anchor>aadbe6e07b7a4fc771ac9406316b9f016</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>getNbPacketsReceived</name>
      <anchorfile>a00225.html</anchorfile>
      <anchor>ae081b808300516b855b8016046c29d09</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNbPacketsReceived</name>
      <anchorfile>a00225.html</anchorfile>
      <anchor>a06d4c200dbb15d262b5724e58c7b5e0a</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>getNbSyncAttempts</name>
      <anchorfile>a00225.html</anchorfile>
      <anchor>ad8da6b13b960b26cdba2d2109e95b5bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNbSyncAttempts</name>
      <anchorfile>a00225.html</anchorfile>
      <anchor>a2d1261d2937ef6fe323d5fa4e43b4bd4</anchor>
      <arglist>(long n)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>getNbSyncSuccesses</name>
      <anchorfile>a00225.html</anchorfile>
      <anchor>af9d2b196f0dfbc82ccd47d3e74a6692d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNbSyncSuccesses</name>
      <anchorfile>a00225.html</anchorfile>
      <anchor>af1db7190969a9b3b297c6efb6251f16b</anchor>
      <arglist>(long n)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>info</name>
      <anchorfile>a00225.html</anchorfile>
      <anchor>af7696b38c67d8bbff606665e7815e3a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>nbSyncAttempts</name>
      <anchorfile>a00225.html</anchorfile>
      <anchor>acdf4d9bc1f9c041bdcf8b665ad9f9409</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>nbSyncSuccesses</name>
      <anchorfile>a00225.html</anchorfile>
      <anchor>a733a4b799c73b0b553dbaa51f345dfd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>nbPacketsReceived</name>
      <anchorfile>a00225.html</anchorfile>
      <anchor>a524612f86258fbbf96953bc823d3d4d2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>UWBIRStochasticPathlossModel</name>
    <filename>a00226.html</filename>
    <base>AnalogueModel</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>initFromMap</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>a6ec46d3a30f4631c407295965a218ba8</anchor>
      <arglist>(const ParameterMap &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>filterSignal</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>a9fda7231500ecd807a4fd8295b9907cb</anchor>
      <arglist>(airframe_ptr_t, const Coord &amp;, const Coord &amp;)</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>PL0</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>ad35d61380860a7eab8298d84e6fafe9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>mu_gamma</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>a16bccca6bb49e61038883dc354702db1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>sigma_gamma</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>a09c5048ae13e1bea3dc258c14552659d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>mu_sigma</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>ac7d6cb9ab03f0ff5286e6ae7611beea4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>sigma_sigma</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>a3004091ffb2569ca739ae7763a725615</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>gamma</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>a4330e7d56d416d1cc629bbe3e94a66e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>S</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>ae2a531cf6fd70411fd6da3c1d93b3d82</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>sigma</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>a415b80a63ec4d6e5804dec267f0aa738</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>n1</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>a4bd7c906c33e853156c89b572cce3b49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>n2</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>a1b876fdcbe5a34bff4ceae0291b5d369</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>n3</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>a7c84a96368f0b5f63466589fe85dc208</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isEnabled</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>a94fd7c1cef2f7df2ccd2d30659a38508</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>shadowing</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>a43cc0c84dc53b830ebf5bee4e4ede73c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cOutVector</type>
      <name>distances</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>a67a27e5bc4321278399bbcb796d02ce8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cOutVector</type>
      <name>srcPosX</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>a337cce9e92e2d033ce4c375fcf610242</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cOutVector</type>
      <name>srcPosY</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>a18757c617af83b7c458c2a92888fd560</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cOutVector</type>
      <name>dstPosX</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>a7ece8944fcf2a613990533db6b283c49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cOutVector</type>
      <name>dstPosY</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>a44f6b1fdd806812e6190904e293b8280</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>myIndex</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>a3f4ce3e082aea938b66fe95a3953661e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>myName</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>af6c30afa4bc91386b2af266abd18ca25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>Gtx</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>a5c93d9572fec58b2a3297540661bf8e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>Grx</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>a7020f1fe8f35071bda40f7c609acdb1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>ntx</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>aae690960abb93afef48628b8057ab7cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>nrx</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>a13d70526f3c7dc1b0d1c75dedfcb31b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>fc</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>a162c2b76d32d7eba9a87a3e152c6028e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>d0</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>a51c18c87e91e8c8b83658d2b61e01750</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static double</type>
      <name>n1_limit</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>a967f91932e97419c8ed16132bfaa48ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static double</type>
      <name>n2_limit</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>acb6f7fc5bb351b4b3d56f71c46364ed9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>s_mu</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>a259155ebc5a5fed9ba5d337f4f88bdd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>s_sigma</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>a6f5635d455213c7915c326bd6c286d52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>kappa</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>a2a784fefc809487edd20c91d602bd3ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>getGhassemzadehPathloss</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>ad47b2d55e7c9758e04e313c92a633217</anchor>
      <arglist>(double distance) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>getFDPathloss</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>a74cac9747c66d704a0218a91ecf15e3d</anchor>
      <arglist>(double freq, double distance) const </arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static double</type>
      <name>getNarrowBandFreeSpacePathloss</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>ade7dc743dee8f01dfaefe6ea1254b18c</anchor>
      <arglist>(double fc, double distance)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static double</type>
      <name>simtruncnormal</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>ac8815d0a3314745544c2894a9050710f</anchor>
      <arglist>(double mean, double stddev, double a, int rng)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>pathloss_exponent</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>aa70659ad7163f6fc4fd263de2bbf1c45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>fading</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>ae06e49a5ee7b6750e35bf5e5120e9481</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Dimension</type>
      <name>frequency</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>a293d8f2e36a211e5b81e694148c7c15c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>pathlosses</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>a55b0e186ad01841d2f88ccecd5de8906</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>WiseRoute</name>
    <filename>a00227.html</filename>
    <base>BaseNetwLayer</base>
    <class kind="struct">WiseRoute::tRouteTableEntry</class>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>ade7fd8114864ff11327435c57cab0e53</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>ac82ec530969665b6848ef32e0a4816d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>enum WiseRoute::floodTypes</type>
      <name>floodTypes</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>ae2042a6b1eee9f32d9fd0a95ec514b9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>struct WiseRoute::tRouteTableEntry</type>
      <name>tRouteTableEntry</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>aa233ffcd07346b9a01daacdfc4f42d85</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; LAddress::L3Type, tRouteTableEntry &gt;</type>
      <name>tRouteTable</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a8acf27ff5cfd449c445d00a497b99a84</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::multimap&lt; tRouteTable::key_type, unsigned long &gt;</type>
      <name>tFloodTable</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a965fc5f787ec273d081b3c0ec565ef58</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleUpperMsg</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>aca0392ef347f060c9950238620245357</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerMsg</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a30099bfda16298ba45f76f4ba2fb0985</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleSelfMsg</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a4f0df1761deb1e98784b416ea17fc1e7</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleLowerControl</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a03bea5d2e67da93c2abb61c2a54f109e</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>updateRouteTable</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a9c57e8afd945eeb5f5b2ca817ad7392d</anchor>
      <arglist>(const tRouteTable::key_type &amp;origin, const LAddress::L3Type &amp;lastHop, double rssi, double ber)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>cMessage *</type>
      <name>decapsMsg</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a679068365891c8fd94c37fd43976c0fd</anchor>
      <arglist>(WiseRoutePkt *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>floodTypes</type>
      <name>updateFloodTable</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a0003b4b04a19304216dea8d0a16fa839</anchor>
      <arglist>(bool isFlood, const tFloodTable::key_type &amp;srcAddr, const tFloodTable::key_type &amp;destAddr, unsigned long seqNum)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>tFloodTable::key_type</type>
      <name>getRoute</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a2787f895fa0f74d4c51b084dae927e74</anchor>
      <arglist>(const tFloodTable::key_type &amp;destAddr, bool iAmOrigin=false) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>tRouteTable</type>
      <name>routeTable</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>af500d987d4aa51e6f49824fbd3c438ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>tFloodTable</type>
      <name>floodTable</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a3f72d7988caeaa3ea64a79e724136ad5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>headerLength</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a85496f386487b74241f1f49dc2382018</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LAddress::L2Type</type>
      <name>macaddress</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a7133c22ad06dc95ee4c0c3cb28128d47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LAddress::L3Type</type>
      <name>sinkAddress</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a409930b44fc240f9e3edd108d6f9027a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>useSimTracer</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a2a97e5b977b19cdda28811cfbd382c04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>rssiThreshold</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a54b8e7bd6fc7ac3dcb1712bcd242d73d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>routeFloodsInterval</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a129155f4064558e95b461cd5e222bf79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned long</type>
      <name>floodSeqNumber</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a033281ae1ebaa9bc4badf3a4e1a3a330</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimTracer *</type>
      <name>tracer</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>ac53bb2f1e1c23bcb6c711e4dd991cd57</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>routeFloodTimer</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a6582d7c1cc2d4154a55aefff919d13ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>nbDataPacketsForwarded</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a4863c6c9c0b4648d1fe489f1e366ddfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>nbDataPacketsReceived</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a93aec138fe8eb82509fa1e1123af11be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>nbDataPacketsSent</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>aaf7e7cc0f2bac73a975d0ba208364ec7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>nbDuplicatedFloodsReceived</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>ade45073ec3c7fd876a3bdd7cc090e416</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>nbFloodsSent</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a55bd88188f20b6307c82d0b1f9af9766</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>nbPureUnicastSent</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a98dc1c65fd8aee95d2a9d4a5e63cec7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>nbRouteFloodsSent</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>afc9395ff804cb0c9bbfc15622688f664</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>nbRouteFloodsReceived</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>aaf415e7572611a84f55a95adc5564435</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>nbUnicastFloodForwarded</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a0ac2253da16188710dad1b34ed3602d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>nbPureUnicastForwarded</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>af70ef0701cd4d00762d10525481f8db6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>nbGetRouteFailures</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a75551cecd26f5133895afacd5f140e95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>nbRoutesRecorded</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>ab0c5fcdca985cc551b56836f477e90ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>nbHops</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a2e56a303e52a2706bd60458071928669</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>receivedRSSI</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a219ae940d9facdca33297ec5d22ae32c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>routeRSSI</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a31230cf7b9ecbdd2758ac6f9426c7adc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>allReceivedRSSI</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>accc36fd88e5b12c57907d36de0ffe84e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>allReceivedBER</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>af75a6dc3d381a12f671b7ed4d5f2f231</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>routeBER</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a22c3d4ccded1b5f8df3e9f674955059b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>receivedBER</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>ae20ff5239162971bf39bc65e8d1b527d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>nextHopSelectionForSink</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a0d93454b857556e70bf8a012621f2ec7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>trace</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a12bb6784eca1ad17663808bb8a45bb8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>stats</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a453b79d54a4dcd999485531e1b5b336a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>debug</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>aa20b4f21d71d01e0a25ff690b3004f21</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>WiseRoute</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>abe926615dee528bddb5d5615f82dc85b</anchor>
      <arglist>(const WiseRoute &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>WiseRoute &amp;</type>
      <name>operator=</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a905cc9830c1aa94419ffbc20556dcd9a</anchor>
      <arglist>(const WiseRoute &amp;)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>WiseRoute::tRouteTableEntry</name>
    <filename>a00219.html</filename>
    <member kind="variable">
      <type>LAddress::L3Type</type>
      <name>nextHop</name>
      <anchorfile>a00219.html</anchorfile>
      <anchor>a7b6543a987d7980e6661447b5e8753e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>rssi</name>
      <anchorfile>a00219.html</anchorfile>
      <anchor>a3b6c017ea61d45fcc961d6ac18bc56e9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>WorldUtilityStats</name>
    <filename>a00228.html</filename>
    <base>BaseWorldUtility</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveSignal</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>a0a34f5f6b232d12915aa9e3aa8065408</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, cObject *obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>a794e8b4372f4204ea1d91faf58e75e55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>ac90889fbe786f75c1a88385f7b2b90ae</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>bitsSent</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>a2e23fb0abb8f5c728a58ad0f71e4270d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>bitsReceived</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>aab6072e36ec8749a0e27d74f4bdf30f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>sent</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>a0c14ed1633f01e0b0287842c582a5a4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>rcvd</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>a2dbfb50a0fd7f4dc8b8107e4f7e26d85</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>recordVectors</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>af5fc820e55397b180268f1bd98175aa8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>bitrate</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>a3161970c51e0cf78466a32f0361fb52d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mixim::math::mW2dBm</name>
    <filename>a00150.html</filename>
    <templarg></templarg>
    <templarg>B</templarg>
  </compound>
  <compound kind="struct">
    <name>mixim::math::mW2dBm&lt; T, false &gt;</name>
    <filename>a00151.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>a1493328ab1ee54fd4ff6e8cd61326b96</anchor>
      <arglist>(const T &amp;mW)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mixim::math::mW2dBm&lt; T, true &gt;</name>
    <filename>a00152.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>a00152.html</anchorfile>
      <anchor>a8ad42782121100d0c3b9a0a5a79a96ba</anchor>
      <arglist>(const T &amp;mW)</arglist>
    </member>
  </compound>
  <compound kind="dir">
    <name>D:/Projects/MiXiM/extsrc/mixim/src/modules/analogueModel/</name>
    <path>D:/Projects/MiXiM/extsrc/mixim/src/modules/analogueModel/</path>
    <filename>dir_1a1e9ec392552335f1177d0d4d8b4778.html</filename>
    <file>BreakpointPathlossModel.cc</file>
    <file>BreakpointPathlossModel.h</file>
    <file>IntensityModel.h</file>
    <file>JakesFading.cc</file>
    <file>JakesFading.h</file>
    <file>LogNormalShadowing.cc</file>
    <file>LogNormalShadowing.h</file>
    <file>PERModel.cc</file>
    <file>PERModel.h</file>
    <file>SimplePathlossModel.cc</file>
    <file>SimplePathlossModel.h</file>
    <file>UWBIRIEEE802154APathlossModel.cc</file>
    <file>UWBIRIEEE802154APathlossModel.h</file>
    <file>UWBIRStochasticPathlossModel.cc</file>
    <file>UWBIRStochasticPathlossModel.h</file>
  </compound>
  <compound kind="dir">
    <name>D:/Projects/MiXiM/extsrc/mixim/examples/analogueModels/</name>
    <path>D:/Projects/MiXiM/extsrc/mixim/examples/analogueModels/</path>
    <filename>dir_c2dea2f761526973c39c610dbc60b0fc.html</filename>
    <file>RandomFreqTimeModel.cc</file>
    <file>RandomFreqTimeModel.h</file>
    <file>RandomFrequencyOnlyModel.cc</file>
    <file>RandomFrequencyOnlyModel.h</file>
    <file>SamplePhyLayer.cc</file>
    <file>SamplePhyLayer.h</file>
    <file>SimpleMacLayer.cc</file>
    <file>SimpleMacLayer.h</file>
    <file>ThresholdDecider.h</file>
  </compound>
  <compound kind="dir">
    <name>D:/Projects/MiXiM/extsrc/mixim/src/modules/application/</name>
    <path>D:/Projects/MiXiM/extsrc/mixim/src/modules/application/</path>
    <filename>dir_9a554bfedab7c7aee58ab970711305fb.html</filename>
    <file>BurstApplLayer.cc</file>
    <file>BurstApplLayer.h</file>
    <file>BurstApplLayerBattery.cc</file>
    <file>BurstApplLayerBattery.h</file>
    <file>SensorApplLayer.cc</file>
    <file>SensorApplLayer.h</file>
    <file>TestApplication.cc</file>
    <file>TestApplication.h</file>
    <file>TrafficGen.cc</file>
    <file>TrafficGen.h</file>
  </compound>
  <compound kind="dir">
    <name>D:/Projects/MiXiM/extsrc/mixim/src/inet_stub/base/</name>
    <path>D:/Projects/MiXiM/extsrc/mixim/src/inet_stub/base/</path>
    <filename>dir_8d39aff5ff1b905c9ff15c09f098eb40.html</filename>
    <file>BasicModule.cc</file>
    <file>BasicModule.h</file>
    <file>Coord.cc</file>
    <file>Coord.h</file>
    <file>INETDefs.h</file>
    <file>INotifiable.h</file>
    <file>ModuleAccess.cc</file>
    <file>ModuleAccess.h</file>
    <file>NotificationBoard.cc</file>
    <file>NotificationBoard.h</file>
    <file>NotifierConsts.cc</file>
    <file>NotifierConsts.h</file>
  </compound>
  <compound kind="dir">
    <name>D:/Projects/MiXiM/extsrc/mixim/src/base/</name>
    <path>D:/Projects/MiXiM/extsrc/mixim/src/base/</path>
    <filename>dir_480ff70c9e275e7d188cc28bdbcc43a9.html</filename>
    <dir>D:/Projects/MiXiM/extsrc/mixim/src/base/connectionManager/</dir>
    <dir>D:/Projects/MiXiM/extsrc/mixim/src/base/messages/</dir>
    <dir>D:/Projects/MiXiM/extsrc/mixim/src/base/modules/</dir>
    <dir>D:/Projects/MiXiM/extsrc/mixim/src/base/phyLayer/</dir>
    <dir>D:/Projects/MiXiM/extsrc/mixim/src/base/utils/</dir>
    <file>groups.h</file>
    <file>mainpage.h</file>
  </compound>
  <compound kind="dir">
    <name>D:/Projects/MiXiM/extsrc/mixim/src/modules/power/battery/</name>
    <path>D:/Projects/MiXiM/extsrc/mixim/src/modules/power/battery/</path>
    <filename>dir_db8e355a73ce2a5e1d6ec92f91789332.html</filename>
    <file>BatteryState.h</file>
    <file>BatteryStats.cc</file>
    <file>BatteryStats.h</file>
    <file>DeviceEntry.h</file>
    <file>SimpleBattery.cc</file>
    <file>SimpleBattery.h</file>
  </compound>
  <compound kind="dir">
    <name>D:/Projects/MiXiM/extsrc/mixim/src/inet_stub/networklayer/common/</name>
    <path>D:/Projects/MiXiM/extsrc/mixim/src/inet_stub/networklayer/common/</path>
    <filename>dir_9c3c495feceb383517e21d5f70131942.html</filename>
    <file>IInterfaceTable.h</file>
    <file>InterfaceEntry.cc</file>
    <file>InterfaceEntry.h</file>
    <file>InterfaceTable.cc</file>
    <file>InterfaceTable.h</file>
    <file>InterfaceTableAccess.h</file>
    <file>InterfaceToken.h</file>
  </compound>
  <compound kind="dir">
    <name>D:/Projects/MiXiM/extsrc/mixim/src/modules/connectionManager/</name>
    <path>D:/Projects/MiXiM/extsrc/mixim/src/modules/connectionManager/</path>
    <filename>dir_d835bdf3a9b01acb04d35028dd6263f1.html</filename>
    <file>UnitDisk.cc</file>
    <file>UnitDisk.h</file>
  </compound>
  <compound kind="dir">
    <name>D:/Projects/MiXiM/extsrc/mixim/src/base/connectionManager/</name>
    <path>D:/Projects/MiXiM/extsrc/mixim/src/base/connectionManager/</path>
    <filename>dir_bedfa3303641d9983d6583f19b1d578d.html</filename>
    <file>BaseConnectionManager.cc</file>
    <file>BaseConnectionManager.h</file>
    <file>ConnectionManager.cc</file>
    <file>ConnectionManager.h</file>
    <file>ConnectionManagerAccess.cc</file>
    <file>ConnectionManagerAccess.h</file>
    <file>NicEntry.h</file>
    <file>NicEntryDebug.cc</file>
    <file>NicEntryDebug.h</file>
    <file>NicEntryDirect.cc</file>
    <file>NicEntryDirect.h</file>
  </compound>
  <compound kind="dir">
    <name>D:/Projects/MiXiM/extsrc/mixim/src/inet_stub/linklayer/contract/</name>
    <path>D:/Projects/MiXiM/extsrc/mixim/src/inet_stub/linklayer/contract/</path>
    <filename>dir_efe79891598aebe06cd414464ea8d978.html</filename>
    <file>MACAddress.cc</file>
    <file>MACAddress.h</file>
  </compound>
  <compound kind="dir">
    <name>D:/Projects/MiXiM/extsrc/mixim/examples/CSMAMac/</name>
    <path>D:/Projects/MiXiM/extsrc/mixim/examples/CSMAMac/</path>
    <filename>dir_3d6ed159e5768439e443c67f4f7e3d3a.html</filename>
    <file>SimpleNetwLayer.cc</file>
    <file>SimpleNetwLayer.h</file>
  </compound>
  <compound kind="dir">
    <name>D:/</name>
    <path>D:/</path>
    <filename>dir_275089585c7fc1b5fd5d7d42c69cb1da.html</filename>
    <dir>D:/Projects/</dir>
  </compound>
  <compound kind="dir">
    <name>D:/Projects/MiXiM/extsrc/mixim/examples/</name>
    <path>D:/Projects/MiXiM/extsrc/mixim/examples/</path>
    <filename>dir_a8e215bf854b9c7e8f39782c0cbe2e3a.html</filename>
    <dir>D:/Projects/MiXiM/extsrc/mixim/examples/analogueModels/</dir>
    <dir>D:/Projects/MiXiM/extsrc/mixim/examples/CSMAMac/</dir>
    <dir>D:/Projects/MiXiM/extsrc/mixim/examples/ieee802154Narrow/</dir>
  </compound>
  <compound kind="dir">
    <name>D:/Projects/MiXiM/extsrc/</name>
    <path>D:/Projects/MiXiM/extsrc/</path>
    <filename>dir_f0d742422d117846120341974051282f.html</filename>
    <dir>D:/Projects/MiXiM/extsrc/mixim/</dir>
  </compound>
  <compound kind="dir">
    <name>D:/Projects/MiXiM/extsrc/mixim/examples/ieee802154Narrow/</name>
    <path>D:/Projects/MiXiM/extsrc/mixim/examples/ieee802154Narrow/</path>
    <filename>dir_d2b72a89cd4bc14cc5e1e11b45bf4e7e.html</filename>
    <file>NetworkStackTrafficGen.cc</file>
    <file>NetworkStackTrafficGen.h</file>
    <file>WorldUtilityStats.cc</file>
    <file>WorldUtilityStats.h</file>
  </compound>
  <compound kind="dir">
    <name>D:/Projects/MiXiM/extsrc/mixim/src/inet_stub/</name>
    <path>D:/Projects/MiXiM/extsrc/mixim/src/inet_stub/</path>
    <filename>dir_2a70cffa5c504087d78c61b179738498.html</filename>
    <dir>D:/Projects/MiXiM/extsrc/mixim/src/inet_stub/base/</dir>
    <dir>D:/Projects/MiXiM/extsrc/mixim/src/inet_stub/linklayer/</dir>
    <dir>D:/Projects/MiXiM/extsrc/mixim/src/inet_stub/mobility/</dir>
    <dir>D:/Projects/MiXiM/extsrc/mixim/src/inet_stub/networklayer/</dir>
    <dir>D:/Projects/MiXiM/extsrc/mixim/src/inet_stub/util/</dir>
  </compound>
  <compound kind="dir">
    <name>D:/Projects/MiXiM/extsrc/mixim/src/inet_stub/linklayer/</name>
    <path>D:/Projects/MiXiM/extsrc/mixim/src/inet_stub/linklayer/</path>
    <filename>dir_4fcba5364314de5813fd44a7523f2232.html</filename>
    <dir>D:/Projects/MiXiM/extsrc/mixim/src/inet_stub/linklayer/contract/</dir>
  </compound>
  <compound kind="dir">
    <name>D:/Projects/MiXiM/extsrc/mixim/src/modules/mac/</name>
    <path>D:/Projects/MiXiM/extsrc/mixim/src/modules/mac/</path>
    <filename>dir_a95c9cd61ce1c0b659e65d5ec82a6fd8.html</filename>
    <file>AlohaMacLayer.cc</file>
    <file>AlohaMacLayer.h</file>
    <file>BMacLayer.cc</file>
    <file>BMacLayer.h</file>
    <file>csma.cc</file>
    <file>csma.h</file>
    <file>CSMA802154.cc</file>
    <file>CSMA802154.h</file>
    <file>CSMAMacLayer.cc</file>
    <file>CSMAMacLayer.h</file>
    <file>LMacLayer.cc</file>
    <file>LMacLayer.h</file>
    <file>Mac80211.cc</file>
    <file>Mac80211.h</file>
    <file>Mac80211MultiChannel.cc</file>
    <file>Mac80211MultiChannel.h</file>
    <file>UWBIRMac.cc</file>
    <file>UWBIRMac.h</file>
  </compound>
  <compound kind="dir">
    <name>D:/Projects/MiXiM/extsrc/mixim/src/modules/messages/</name>
    <path>D:/Projects/MiXiM/extsrc/mixim/src/modules/messages/</path>
    <filename>dir_c2cba0862ae0ea446e98be2b7dc59016.html</filename>
    <file>AggrPkt.cc</file>
    <file>AggrPkt.h</file>
    <file>UWBIRMacPkt.cc</file>
    <file>UWBIRMacPkt.h</file>
  </compound>
  <compound kind="dir">
    <name>D:/Projects/MiXiM/extsrc/mixim/src/base/messages/</name>
    <path>D:/Projects/MiXiM/extsrc/mixim/src/base/messages/</path>
    <filename>dir_33effc0fa4ddeee6a5500053d8414653.html</filename>
    <file>MiXiMAirFrame.h</file>
    <file>MiXiMMacPkt.h</file>
  </compound>
  <compound kind="dir">
    <name>D:/Projects/MiXiM/extsrc/mixim/</name>
    <path>D:/Projects/MiXiM/extsrc/mixim/</path>
    <filename>dir_5b98468eb5a3695f9b6d6d18452c8ea1.html</filename>
    <dir>D:/Projects/MiXiM/extsrc/mixim/examples/</dir>
    <dir>D:/Projects/MiXiM/extsrc/mixim/src/</dir>
  </compound>
  <compound kind="dir">
    <name>D:/Projects/MiXiM/</name>
    <path>D:/Projects/MiXiM/</path>
    <filename>dir_81feda56b9bf0039bbf4600bd53286a7.html</filename>
    <dir>D:/Projects/MiXiM/extsrc/</dir>
  </compound>
  <compound kind="dir">
    <name>D:/Projects/MiXiM/extsrc/mixim/src/inet_stub/mobility/</name>
    <path>D:/Projects/MiXiM/extsrc/mixim/src/inet_stub/mobility/</path>
    <filename>dir_9b44ec77db926df833cf375edb8a2d2a.html</filename>
    <dir>D:/Projects/MiXiM/extsrc/mixim/src/inet_stub/mobility/models/</dir>
    <file>IMobility.h</file>
  </compound>
  <compound kind="dir">
    <name>D:/Projects/MiXiM/extsrc/mixim/src/inet_stub/mobility/models/</name>
    <path>D:/Projects/MiXiM/extsrc/mixim/src/inet_stub/mobility/models/</path>
    <filename>dir_a6ba1217f1e6986661121b2c7436d8e9.html</filename>
    <file>ANSimMobility.cc</file>
    <file>ANSimMobility.h</file>
    <file>BonnMotionFileCache.cc</file>
    <file>BonnMotionFileCache.h</file>
    <file>BonnMotionMobility.cc</file>
    <file>BonnMotionMobility.h</file>
    <file>ChiangMobility.cc</file>
    <file>ChiangMobility.h</file>
    <file>CircleMobility.cc</file>
    <file>CircleMobility.h</file>
    <file>ConstSpeedMobility.cc</file>
    <file>ConstSpeedMobility.h</file>
    <file>GaussMarkovMobility.cc</file>
    <file>GaussMarkovMobility.h</file>
    <file>LinearMobility.cc</file>
    <file>LinearMobility.h</file>
    <file>LinearNodeDistributionMobility.cc</file>
    <file>LinearNodeDistributionMobility.h</file>
    <file>LineSegmentsMobilityBase.cc</file>
    <file>LineSegmentsMobilityBase.h</file>
    <file>MassMobility.cc</file>
    <file>MassMobility.h</file>
    <file>MoBANCoordinator.cc</file>
    <file>MoBANCoordinator.h</file>
    <file>MoBANLocal.cc</file>
    <file>MoBANLocal.h</file>
    <file>MobilityAccess.cc</file>
    <file>MobilityAccess.h</file>
    <file>MobilityBase.cc</file>
    <file>MobilityBase.h</file>
    <file>MovingMobilityBase.cc</file>
    <file>MovingMobilityBase.h</file>
    <file>Ns2MotionMobility.cc</file>
    <file>Ns2MotionMobility.h</file>
    <file>Posture.cc</file>
    <file>Posture.h</file>
    <file>PostureTransition.cc</file>
    <file>PostureTransition.h</file>
    <file>RandomWPMobility.cc</file>
    <file>RandomWPMobility.h</file>
    <file>RectangleMobility.cc</file>
    <file>RectangleMobility.h</file>
    <file>StaticGridMobility.cc</file>
    <file>StaticGridMobility.h</file>
    <file>StationaryMobility.cc</file>
    <file>StationaryMobility.h</file>
    <file>TraCIMobility.cc</file>
    <file>TraCIMobility.h</file>
    <file>TractorMobility.cc</file>
    <file>TractorMobility.h</file>
    <file>TurtleMobility.cc</file>
    <file>TurtleMobility.h</file>
  </compound>
  <compound kind="dir">
    <name>D:/Projects/MiXiM/extsrc/mixim/src/modules/</name>
    <path>D:/Projects/MiXiM/extsrc/mixim/src/modules/</path>
    <filename>dir_75bd850ab6558d0a87dc9d97ebaafd4c.html</filename>
    <dir>D:/Projects/MiXiM/extsrc/mixim/src/modules/analogueModel/</dir>
    <dir>D:/Projects/MiXiM/extsrc/mixim/src/modules/application/</dir>
    <dir>D:/Projects/MiXiM/extsrc/mixim/src/modules/connectionManager/</dir>
    <dir>D:/Projects/MiXiM/extsrc/mixim/src/modules/mac/</dir>
    <dir>D:/Projects/MiXiM/extsrc/mixim/src/modules/messages/</dir>
    <dir>D:/Projects/MiXiM/extsrc/mixim/src/modules/netw/</dir>
    <dir>D:/Projects/MiXiM/extsrc/mixim/src/modules/phy/</dir>
    <dir>D:/Projects/MiXiM/extsrc/mixim/src/modules/power/</dir>
    <dir>D:/Projects/MiXiM/extsrc/mixim/src/modules/transport/</dir>
    <dir>D:/Projects/MiXiM/extsrc/mixim/src/modules/utility/</dir>
  </compound>
  <compound kind="dir">
    <name>D:/Projects/MiXiM/extsrc/mixim/src/base/modules/</name>
    <path>D:/Projects/MiXiM/extsrc/mixim/src/base/modules/</path>
    <filename>dir_f27abf2bd9e17cc9a24477da0ee8b309.html</filename>
    <file>AddressingInterface.h</file>
    <file>ArpInterface.h</file>
    <file>BaseApplLayer.cc</file>
    <file>BaseApplLayer.h</file>
    <file>BaseArp.cc</file>
    <file>BaseArp.h</file>
    <file>BaseBattery.cc</file>
    <file>BaseBattery.h</file>
    <file>BaseLayer.cc</file>
    <file>BaseLayer.h</file>
    <file>BaseMacLayer.cc</file>
    <file>BaseMacLayer.h</file>
    <file>BaseModule.cc</file>
    <file>BaseModule.h</file>
    <file>BaseNetwLayer.cc</file>
    <file>BaseNetwLayer.h</file>
    <file>BaseWorldUtility.cc</file>
    <file>BaseWorldUtility.h</file>
    <file>MiximBatteryAccess.cc</file>
    <file>MiximBatteryAccess.h</file>
    <file>TestApplLayer.cc</file>
    <file>TestApplLayer.h</file>
  </compound>
  <compound kind="dir">
    <name>D:/Projects/MiXiM/extsrc/mixim/src/modules/netw/</name>
    <path>D:/Projects/MiXiM/extsrc/mixim/src/modules/netw/</path>
    <filename>dir_10b772a06beace38e141ceae8b640d46.html</filename>
    <file>AdaptiveProbabilisticBroadcast.cc</file>
    <file>AdaptiveProbabilisticBroadcast.h</file>
    <file>ArpHost.cc</file>
    <file>ArpHost.h</file>
    <file>DummyRoute.cc</file>
    <file>DummyRoute.h</file>
    <file>Flood.cc</file>
    <file>Flood.h</file>
    <file>ProbabilisticBroadcast.cc</file>
    <file>ProbabilisticBroadcast.h</file>
    <file>WiseRoute.cc</file>
    <file>WiseRoute.h</file>
  </compound>
  <compound kind="dir">
    <name>D:/Projects/MiXiM/extsrc/mixim/src/inet_stub/networklayer/</name>
    <path>D:/Projects/MiXiM/extsrc/mixim/src/inet_stub/networklayer/</path>
    <filename>dir_59146efa8b756171755b7f4d15162c67.html</filename>
    <dir>D:/Projects/MiXiM/extsrc/mixim/src/inet_stub/networklayer/common/</dir>
  </compound>
  <compound kind="dir">
    <name>D:/Projects/MiXiM/extsrc/mixim/src/modules/phy/</name>
    <path>D:/Projects/MiXiM/extsrc/mixim/src/modules/phy/</path>
    <filename>dir_9cf2bfd3572d2377e116fe823dc22a7b.html</filename>
    <file>Decider80211.cc</file>
    <file>Decider80211.h</file>
    <file>Decider80211Battery.cc</file>
    <file>Decider80211Battery.h</file>
    <file>Decider80211MultiChannel.cc</file>
    <file>Decider80211MultiChannel.h</file>
    <file>Decider802154Narrow.cc</file>
    <file>Decider802154Narrow.h</file>
    <file>DeciderResult80211.h</file>
    <file>DeciderResult802154Narrow.h</file>
    <file>DeciderResultUWBIR.h</file>
    <file>DeciderUWBIRED.cc</file>
    <file>DeciderUWBIRED.h</file>
    <file>DeciderUWBIREDSync.cc</file>
    <file>DeciderUWBIREDSync.h</file>
    <file>DeciderUWBIREDSyncOnAddress.cc</file>
    <file>DeciderUWBIREDSyncOnAddress.h</file>
    <file>MacToUWBIRPhyControlInfo.h</file>
    <file>PhyLayer.cc</file>
    <file>PhyLayer.h</file>
    <file>PhyLayerBattery.cc</file>
    <file>PhyLayerBattery.h</file>
    <file>PhyLayerUWBIR.cc</file>
    <file>PhyLayerUWBIR.h</file>
    <file>RadioUWBIR.h</file>
    <file>SNRThresholdDecider.cc</file>
    <file>SNRThresholdDecider.h</file>
  </compound>
  <compound kind="dir">
    <name>D:/Projects/MiXiM/extsrc/mixim/src/base/phyLayer/</name>
    <path>D:/Projects/MiXiM/extsrc/mixim/src/base/phyLayer/</path>
    <filename>dir_d72a69de32420e1a8224d62f70c66090.html</filename>
    <file>AnalogueModel.h</file>
    <file>BaseDecider.cc</file>
    <file>BaseDecider.h</file>
    <file>BasePhyLayer.cc</file>
    <file>BasePhyLayer.h</file>
    <file>ChannelInfo.cc</file>
    <file>ChannelInfo.h</file>
    <file>ChannelState.cc</file>
    <file>ChannelState.h</file>
    <file>Decider.cc</file>
    <file>Decider.h</file>
    <file>DeciderToPhyInterface.h</file>
    <file>Interpolation.h</file>
    <file>MacToPhyControlInfo.h</file>
    <file>MacToPhyInterface.h</file>
    <file>Mapping.h</file>
    <file>MappingBase.cc</file>
    <file>MappingBase.h</file>
    <file>MappingUtils.cc</file>
    <file>MappingUtils.h</file>
    <file>PhyToMacControlInfo.h</file>
    <file>PhyUtils.cc</file>
    <file>PhyUtils.h</file>
    <file>Signal.cc</file>
    <file>Signal_.h</file>
  </compound>
  <compound kind="dir">
    <name>D:/Projects/MiXiM/extsrc/mixim/src/modules/power/</name>
    <path>D:/Projects/MiXiM/extsrc/mixim/src/modules/power/</path>
    <filename>dir_ff9a6e0a225cc610e0b0bce4c05606ce.html</filename>
    <dir>D:/Projects/MiXiM/extsrc/mixim/src/modules/power/battery/</dir>
  </compound>
  <compound kind="dir">
    <name>D:/Projects/</name>
    <path>D:/Projects/</path>
    <filename>dir_70399fa3d88a5292b2b41a1f3fe3e4e2.html</filename>
    <dir>D:/Projects/MiXiM/</dir>
  </compound>
  <compound kind="dir">
    <name>D:/Projects/MiXiM/extsrc/mixim/src/</name>
    <path>D:/Projects/MiXiM/extsrc/mixim/src/</path>
    <filename>dir_a693f3e27e78382c0d4f3f7d65ac0be1.html</filename>
    <dir>D:/Projects/MiXiM/extsrc/mixim/src/base/</dir>
    <dir>D:/Projects/MiXiM/extsrc/mixim/src/inet_stub/</dir>
    <dir>D:/Projects/MiXiM/extsrc/mixim/src/modules/</dir>
  </compound>
  <compound kind="dir">
    <name>D:/Projects/MiXiM/extsrc/mixim/src/modules/transport/</name>
    <path>D:/Projects/MiXiM/extsrc/mixim/src/modules/transport/</path>
    <filename>dir_d91f4cad94e49c21a8c7269939236346.html</filename>
    <file>Aggregation.cc</file>
    <file>Aggregation.h</file>
  </compound>
  <compound kind="dir">
    <name>D:/Projects/MiXiM/extsrc/mixim/src/inet_stub/util/</name>
    <path>D:/Projects/MiXiM/extsrc/mixim/src/inet_stub/util/</path>
    <filename>dir_c478f640285a8af3ce2e2aa4d83fa0ab.html</filename>
    <file>FWMath.h</file>
  </compound>
  <compound kind="dir">
    <name>D:/Projects/MiXiM/extsrc/mixim/src/modules/utility/</name>
    <path>D:/Projects/MiXiM/extsrc/mixim/src/modules/utility/</path>
    <filename>dir_2c254034fefd19a28744e3147b79ce8a.html</filename>
    <file>Consts80211.h</file>
    <file>Consts802154.h</file>
    <file>DroppedPacket.h</file>
    <file>IEEE802154A.cc</file>
    <file>IEEE802154A.h</file>
    <file>Packet.h</file>
    <file>phyPER.cc</file>
    <file>phyPER.h</file>
    <file>ProbBcastNetwControlInfo.h</file>
    <file>SimpleTimeConstMapping.h</file>
    <file>SimTracer.cc</file>
    <file>SimTracer.h</file>
    <file>UWBIRPacket.h</file>
  </compound>
  <compound kind="dir">
    <name>D:/Projects/MiXiM/extsrc/mixim/src/base/utils/</name>
    <path>D:/Projects/MiXiM/extsrc/mixim/src/base/utils/</path>
    <filename>dir_761e2d8b854bdad894a2a92660ce2aa1.html</filename>
    <file>FindModule.h</file>
    <file>HostState.h</file>
    <file>MacToNetwControlInfo.h</file>
    <file>MiXiMDefs.h</file>
    <file>miximkerneldefs.h</file>
    <file>NetwControlInfo.h</file>
    <file>NetwToMacControlInfo.cc</file>
    <file>NetwToMacControlInfo.h</file>
    <file>PassedMessage.h</file>
    <file>SimpleAddress.cc</file>
    <file>SimpleAddress.h</file>
    <file>winsupport.cc</file>
    <file>winsupport.h</file>
  </compound>
</tagfile>
