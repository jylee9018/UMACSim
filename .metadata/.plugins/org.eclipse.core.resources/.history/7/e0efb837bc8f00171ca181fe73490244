//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see http://www.gnu.org/licenses/.
// 

#ifndef UWANMACLAYER_H_
#define UWANMACLAYER_H_

#include <list>

#include "MiXiMDefs.h"
#include "BaseMacLayer.h"
#include "UWANMacPkt_m.h"

class MIXIM_API UWANMacLayer : public BaseMacLayer
{
  private:
    /** @brief Copy constructor is not allowed.
     */
    UWANMacLayer(const UWANMacLayer&);
    /** @brief Assignment operator is not allowed.
     */
    UWANMacLayer& operator=(const UWANMacLayer&);

  public:
    /** @brief frame kinds */
    enum UWANMacMessageKinds {
      //between MAC layers of two nodes
      RTS = LAST_BASE_MAC_MESSAGE_KIND, // request to send
      CTS,                 // clear to send
      ACK,                 // acknowledgement
      DATA,
      BROADCAST,
      LAST_MAC_80211_MESSAGE_KIND
    };

  protected:
    enum TimerType {
        TIMEOUT,
        NAV
    };

    enum States {
        IDLE = 0,
        CONTEND,
        WFCTS,
        WFDATA,

        BUSY,
        TX_RTS,
        TX_CTS,
        TX_DATA
    };

    States macState;

  public:
    UWANMacLayer()
        : BaseMacLayer()
    {}
    virtual ~UWANMacLayer();
    virtual void initialize(int);
    virtual void finish();

  protected:
    /** @brief Handle self messages such as timer... */
    virtual void handleSelfMsg(cMessage* msg);

    /** @brief Handle messages from upper layer */
    virtual void handleUpperMsg(cMessage* msg);

    /** @brief Handle messages from lower layer */
    virtual void handleLowerMsg(cMessage* msg);

    /** @brief Handle control messages from lower layer */
    virtual void handleLowerControl(cMessage* msg);

    /** @brief encapsulate packet */
    virtual macpkt_ptr_t encapsMsg(cPacket* pkt);

    /** @brief start a new contention period */
    void beginNewCycle();
    void checkMaxTxAttempts();

    void sendRTSframe();
    void sendCTSframe(UWANMacPkt*);
    void sendDATAframe();

    void handleMsgForMe(UWANMacPkt*);
    void handleMsgNotForMe(UWANMacPkt*);
    void handleEndTransmission();

    void handleRTSframe(UWANMacPkt*);
    void handleCTSframe(UWANMacPkt*);
    void handleDATAframe(UWANMacPkt*);

    void handleTimeoutTimer();
    void rtsTransmissionFailed();

    simtime_t timeOut(UWANMacMessageKinds type, double br);
    simtime_t packetDuration(double bits, double br);

  protected:
    /** @brief Type for a queue of cPackets.*/
    typedef std::list<UWANMacPkt*> MacPktList;

    /** @brief A queue to store packets from upper layer in case another
    packet is still waiting for transmission..*/
    MacPktList fromUpperPkt;

    const int LENGTH_RTS  =  40; // 5 * 8 bit = 40 bit
    const int LENGTH_CTS  =  40;
    const int LENGTH_DATA = 200;
    const int MAC_HEADER_LENGTH = 40;
    const int PHY_HEADER_LENGTH = 80;

    const unsigned maxTxAttempts = 3;

    // TIMERS:
    cMessage* timeout;

    simtime_t delta;

    /** @brief length of the queue*/
    unsigned queueLength;

    /** @brief the bit rate at which we transmit */
    double bitrate;

    /** @brief The power at which we transmit. */
    double txPower;

    unsigned txAttempts;

    unsigned long nbTxRtsFrames;
    unsigned long nbTxCtsFrames;
    unsigned long nbTxFrames;
    unsigned long nbRxRtsFrames;
    unsigned long nbRxCtsFrames;
    unsigned long nbRxFrames;
};

#endif /* UWANMACLAYER_H_ */
